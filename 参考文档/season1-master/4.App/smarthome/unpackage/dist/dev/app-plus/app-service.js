(this["webpackJsonp"] = this["webpackJsonp"] || []).push([["app-service"],[
/* 0 */
/*!***********************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/main.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("__webpack_require__(/*! uni-pages */ 1);var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 11));\nvar _App = _interopRequireDefault(__webpack_require__(/*! ./App */ 18));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {_defineProperty(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}\n\n_vue.default.config.productionTip = false;\n\n_App.default.mpType = 'app';\n\nvar app = new _vue.default(_objectSpread({},\n_App.default));\n\napp.$mount();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vbWFpbi5qcyJdLCJuYW1lcyI6WyJWdWUiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwiQXBwIiwibXBUeXBlIiwiYXBwIiwiJG1vdW50Il0sIm1hcHBpbmdzIjoiQUFBQSx3Q0FBbUI7QUFDbkIsd0U7O0FBRUFBLGFBQUlDLE1BQUosQ0FBV0MsYUFBWCxHQUEyQixLQUEzQjs7QUFFQUMsYUFBSUMsTUFBSixHQUFhLEtBQWI7O0FBRUEsSUFBTUMsR0FBRyxHQUFHLElBQUlMLFlBQUo7QUFDTEcsWUFESyxFQUFaOztBQUdBRSxHQUFHLENBQUNDLE1BQUoiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAndW5pLXBhZ2VzJztpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCdcclxuXHJcblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlXHJcblxyXG5BcHAubXBUeXBlID0gJ2FwcCdcclxuXHJcbmNvbnN0IGFwcCA9IG5ldyBWdWUoe1xyXG4gICAgLi4uQXBwXHJcbn0pXHJcbmFwcC4kbW91bnQoKSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/*!**************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/pages.json ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


if (typeof Promise !== 'undefined' && !Promise.prototype.finally) {
  Promise.prototype.finally = function (callback) {
    var promise = this.constructor;
    return this.then(
    function (value) {return promise.resolve(callback()).then(function () {return value;});},
    function (reason) {return promise.resolve(callback()).then(function () {
        throw reason;
      });});

  };
}

if (uni.restoreGlobal) {
  uni.restoreGlobal(weex, plus, setTimeout, clearTimeout, setInterval, clearInterval);
}
__definePage('pages/index/index', function () {return Vue.extend(__webpack_require__(/*! pages/index/index.vue?mpType=page */ 2).default);});
__definePage('pages/my/my', function () {return Vue.extend(__webpack_require__(/*! pages/my/my.vue?mpType=page */ 13).default);});

/***/ }),
/* 2 */
/*!*************************************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/index/index.vue?mpType=page ***!
  \*************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.vue?vue&type=template&id=2be84a3c&mpType=page */ 3);\n/* harmony import */ var _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.vue?vue&type=script&lang=js&mpType=page */ 5);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 12);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"pages/index/index.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBNkg7QUFDN0g7QUFDb0U7QUFDTDs7O0FBRy9EO0FBQzZMO0FBQzdMLGdCQUFnQiwyTEFBVTtBQUMxQixFQUFFLHNGQUFNO0FBQ1IsRUFBRSwyRkFBTTtBQUNSLEVBQUUsb0dBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsK0ZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzIH0gZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJiZTg0YTNjJm1wVHlwZT1wYWdlXCJcbnZhciByZW5kZXJqc1xuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIlxuZXhwb3J0ICogZnJvbSBcIi4vaW5kZXgudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsLFxuICBmYWxzZSxcbiAgY29tcG9uZW50cyxcbiAgcmVuZGVyanNcbilcblxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJwYWdlcy9pbmRleC9pbmRleC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/*!*******************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/index/index.vue?vue&type=template&id=2be84a3c&mpType=page ***!
  \*******************************************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=template&id=2be84a3c&mpType=page */ 4);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_template_id_2be84a3c_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 4 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/index/index.vue?vue&type=template&id=2be84a3c&mpType=page ***!

/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: _vm._$s(0, "sc", "wrapper"), attrs: { _i: 0 } },
    [
      _c(
        "div",
        { staticClass: _vm._$s(1, "sc", "header-wrapper"), attrs: { _i: 1 } },
        [
          _c(
            "div",
            { staticClass: _vm._$s(2, "sc", "header-title"), attrs: { _i: 2 } },
            [
              _c("span", [_vm._v(_vm._$s(3, "t0-0", _vm._s(_vm.airText)))]),
              _c("span", [
                _vm._v(
                  _vm._$s(4, "t0-0", _vm._s(_vm.area)) +
                    _vm._$s(4, "t0-1", _vm._s(_vm.city))
                )
              ])
            ]
          ),
          _c(
            "div",
            { staticClass: _vm._$s(5, "sc", "header-text"), attrs: { _i: 5 } },
            [
              _c("span", [_vm._v(_vm._$s(6, "t0-0", _vm._s(_vm.airValue)))]),
              _c("span", [_vm._v(_vm._$s(7, "t0-0", _vm._s(_vm.weather)))])
            ]
          ),
          _c(
            "div",
            {
              staticClass: _vm._$s(8, "sc", "weather-advice"),
              attrs: { _i: 8 }
            },
            [_vm._v(_vm._$s(8, "t0-0", _vm._s(_vm.weatherAdvice)))]
          )
        ]
      ),
      _c(
        "div",
        { staticClass: _vm._$s(9, "sc", "body-wrapper"), attrs: { _i: 9 } },
        [
          _c(
            "div",
            { staticClass: _vm._$s(10, "sc", "body"), attrs: { _i: 10 } },
            [
              _c(
                "div",
                {
                  staticClass: _vm._$s(11, "sc", "data-wrapper"),
                  attrs: { _i: 11 }
                },
                [
                  _c(
                    "div",
                    {
                      staticClass: _vm._$s(12, "sc", "data"),
                      attrs: { _i: 12 }
                    },
                    [
                      _c("image", {
                        staticClass: _vm._$s(13, "sc", "data-logo"),
                        attrs: { _i: 13 }
                      }),
                      _c(
                        "div",
                        {
                          staticClass: _vm._$s(14, "sc", "data-text"),
                          attrs: { _i: 14 }
                        },
                        [
                          _c("div", {
                            staticClass: _vm._$s(15, "sc", "data-title"),
                            attrs: { _i: 15 }
                          }),
                          _c(
                            "div",
                            {
                              staticClass: _vm._$s(16, "sc", "data-value"),
                              attrs: { _i: 16 }
                            },
                            [_vm._v(_vm._$s(16, "t0-0", _vm._s(_vm.Temp)))]
                          )
                        ]
                      )
                    ]
                  ),
                  _c(
                    "div",
                    {
                      staticClass: _vm._$s(17, "sc", "data"),
                      attrs: { _i: 17 }
                    },
                    [
                      _c("image", {
                        staticClass: _vm._$s(18, "sc", "data-logo"),
                        attrs: { _i: 18 }
                      }),
                      _c(
                        "div",
                        {
                          staticClass: _vm._$s(19, "sc", "data-text"),
                          attrs: { _i: 19 }
                        },
                        [
                          _c("div", {
                            staticClass: _vm._$s(20, "sc", "data-title"),
                            attrs: { _i: 20 }
                          }),
                          _c(
                            "div",
                            {
                              staticClass: _vm._$s(21, "sc", "data-value"),
                              attrs: { _i: 21 }
                            },
                            [_vm._v(_vm._$s(21, "t0-0", _vm._s(_vm.Hum)))]
                          )
                        ]
                      )
                    ]
                  )
                ]
              ),
              _c(
                "div",
                {
                  staticClass: _vm._$s(22, "sc", "data-wrapper"),
                  attrs: { _i: 22 }
                },
                [
                  _c(
                    "div",
                    {
                      staticClass: _vm._$s(23, "sc", "data"),
                      attrs: { _i: 23 }
                    },
                    [
                      _c("image", {
                        staticClass: _vm._$s(24, "sc", "data-logo"),
                        attrs: { _i: 24 }
                      }),
                      _c(
                        "div",
                        {
                          staticClass: _vm._$s(25, "sc", "data-text"),
                          attrs: { _i: 25 }
                        },
                        [
                          _c("div", {
                            staticClass: _vm._$s(26, "sc", "data-title"),
                            attrs: { _i: 26 }
                          }),
                          _c(
                            "div",
                            {
                              staticClass: _vm._$s(27, "sc", "data-value"),
                              attrs: { _i: 27 }
                            },
                            [_vm._v(_vm._$s(27, "t0-0", _vm._s(_vm.Light)))]
                          )
                        ]
                      )
                    ]
                  ),
                  _c(
                    "div",
                    {
                      staticClass: _vm._$s(28, "sc", "data"),
                      attrs: { _i: 28 }
                    },
                    [
                      _c("image", {
                        staticClass: _vm._$s(29, "sc", "data-logo"),
                        attrs: { _i: 29 }
                      }),
                      _c(
                        "div",
                        {
                          staticClass: _vm._$s(30, "sc", "data-text"),
                          attrs: { _i: 30 }
                        },
                        [
                          _c("div", {
                            staticClass: _vm._$s(31, "sc", "data-title"),
                            attrs: { _i: 31 }
                          }),
                          _c(
                            "div",
                            {
                              staticClass: _vm._$s(32, "sc", "data-value"),
                              attrs: { _i: 32 }
                            },
                            [
                              _c("switch", {
                                attrs: {
                                  checked: _vm._$s(33, "a-checked", _vm.Led),
                                  _i: 33
                                },
                                on: { change: _vm.onLedChange }
                              })
                            ]
                          )
                        ]
                      )
                    ]
                  )
                ]
              ),
              _c(
                "div",
                {
                  staticClass: _vm._$s(34, "sc", "data-wrapper"),
                  attrs: { _i: 34 }
                },
                [
                  _c(
                    "div",
                    {
                      staticClass: _vm._$s(35, "sc", "data"),
                      attrs: { _i: 35 }
                    },
                    [
                      _c("image", {
                        staticClass: _vm._$s(36, "sc", "data-logo"),
                        attrs: { _i: 36 }
                      }),
                      _c(
                        "div",
                        {
                          staticClass: _vm._$s(37, "sc", "data-text"),
                          attrs: { _i: 37 }
                        },
                        [
                          _c("div", {
                            staticClass: _vm._$s(38, "sc", "data-title"),
                            attrs: { _i: 38 }
                          }),
                          _c(
                            "div",
                            {
                              staticClass: _vm._$s(39, "sc", "data-value"),
                              attrs: { _i: 39 }
                            },
                            [
                              _c("switch", {
                                attrs: {
                                  checked: _vm._$s(40, "a-checked", _vm.Beep),
                                  _i: 40
                                },
                                on: { change: _vm.onBeepChange }
                              })
                            ]
                          )
                        ]
                      )
                    ]
                  )
                ]
              )
            ]
          )
        ]
      )
    ]
  )
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 5 */
/*!*************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/index/index.vue?vue&type=script&lang=js&mpType=page ***!
  \*************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./index.vue?vue&type=script&lang=js&mpType=page */ 6);\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_index_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQW9wQixDQUFnQiw4bkJBQUcsRUFBQyIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9Qcm9ncmFtIEZpbGVzL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3dlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy93ZWJwYWNrLXVuaS1hcHAtbG9hZGVyL3VzaW5nLWNvbXBvbmVudHMuanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9Qcm9ncmFtIEZpbGVzL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3dlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy93ZWJwYWNrLXVuaS1hcHAtbG9hZGVyL3VzaW5nLWNvbXBvbmVudHMuanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9pbmRleC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmbXBUeXBlPXBhZ2VcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/index/index.vue?vue&type=script&lang=js&mpType=page ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar _mqtt = __webpack_require__(/*! ../../utils/mqttjs3/mqtt */ 8); //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n/******************* 必须要改！！不然得不到天气！！ ******************/var hefengKey = '8d90114ce9334ccbbcf6dec72f534bd6'; //  和风天气Web api的key\n/******************* 可能需要你修改的部分 ******************/var mqttHost = 'broker.emqx.io'; //mqtt 服务器域名/IP\nvar mqttPort = 8084; //mqtt 服务器域名/IP\nvar hefengVIP = false; //  和风天气是免费的api（false）还是付费api（true）\nvar deviceSubTopic = '/mysmarthome/sub'; //  设备订阅topic（小程序发布命令topic）\nvar devicePubTopic = '/mysmarthome/pub'; //  设备发布topic（小程序订阅数据topic）\n/********************* 一般不用动这些 ********************/var mpSubTopic = devicePubTopic;var mpPubTopic = deviceSubTopic;var mqttUrl = \"wxs://\".concat(mqttHost, \":\").concat(mqttPort, \"/mqtt\"); //  mqtt连接路径\nvar hefengApi = 'https://api.qweather.com/v7'; //  和风天气付费API前缀\nvar hefengFreeApi = 'https://devapi.qweather.com/v7'; //  和风天气免费API前缀\nvar hefengWeather = \"\".concat(hefengVIP ? hefengApi : hefengFreeApi, \"/weather/now?\"); //  和风天气实时天气api\nvar hefengAir = \"\".concat(hefengVIP ? hefengApi : hefengFreeApi, \"/air/now?\"); //  和风天气空气质量api\nvar geoApi = 'https://geoapi.qweather.com/v2/city/lookup?'; //  地理位置api（用来获取经纬度对应的城市/城区名字）\nvar _default = { data: function data() {return { client: {}, Temp: 0, Hum: 0, Light: 0, Led: false, Beep: false, area: '请求中', //城区\n      city: '请求中', //城市\n      airText: '请求中', //空气优良\n      airValue: 0, //空气指数\n      weather: '请求中', //天气\n      weatherAdvice: '今天天气不错' //天气建议\n    };}, onShow: function onShow() {var that = this;uni.showToast({ title: '连接服务器....', icon: 'loading', duration: 10000, mask: true });var second = 10;var toastTimer = setInterval(function () {second--;if (!second) {clearInterval(toastTimer);uni.showToast({ title: '连接失败', icon: 'none', mask: true });}}, 1000);that.client = (0, _mqtt.connect)(mqttUrl);that.client.on('connect', function () {__f__(\"log\", '成功连接mqtt服务器！', \" at pages/index/index.vue:130\");clearInterval(toastTimer);uni.showToast({ title: '连接成功', icon: 'success', mask: true }); // 一秒后订阅主题\n      setTimeout(function () {that.client.subscribe(mpSubTopic, function (err) {if (!err) {__f__(\"log\", '成功订阅设备上行数据Topic!', \" at pages/index/index.vue:141\");uni.showToast({ title: '订阅成功',\n              icon: 'success',\n              mask: true });\n\n          }\n        });\n      }, 1000);\n    });\n    that.client.on('message', function (topic, message) {\n      __f__(\"log\", topic, \" at pages/index/index.vue:152\");\n      // message是16进制的Buffer字节流\n      var dataFromDev = {};\n      // 尝试进行JSON解析\n      try {\n        dataFromDev = JSON.parse(message);\n        __f__(\"log\", dataFromDev, \" at pages/index/index.vue:158\");\n        that.Temp = dataFromDev.Temp;\n        that.Hum = dataFromDev.Hum;\n        that.Light = dataFromDev.Light;\n        that.Led = dataFromDev.Led;\n        that.Beep = dataFromDev.Beep;\n      } catch (error) {\n        // 解析失败错误捕获并打印（错误捕获之后不会影响程序继续运行）\n        __f__(\"log\", error, \" at pages/index/index.vue:166\");\n      }\n    });\n\n    uni.getLocation({\n      type: 'wgs84',\n      success: function success(res) {\n        var latitude = res.latitude;\n        var longitude = res.longitude;\n        var key = hefengKey;\n\n        uni.request({\n          url: \"\".concat(geoApi, \"location=\").concat(longitude, \",\").concat(latitude, \"&key=\").concat(key), //获取地理位置\n          success: function success(res) {\n            __f__(\"log\", res.data, \" at pages/index/index.vue:180\");\n            if (res.data.code == '401') {\n              __f__(\"error\", 'HUAQING --- 地理位置获取失败，请检查你的和风天气API或Key是否正确！', \" at pages/index/index.vue:182\");\n              return;\n            } else if (res.data.code == '403') {\n              __f__(\"error\", 'HUAQING --- 地理位置获取失败，和风天气服务器故障！', \" at pages/index/index.vue:185\");\n              return;\n            }\n            try {var\n              location = res.data.location;\n\n              that.area = location[0].name; //城区\n              that.city = location[0].adm2; //城市\n            } catch (error) {\n              __f__(\"error\", error, \" at pages/index/index.vue:194\");\n            }\n          } });\n\n        uni.request({\n          url: \"\".concat(hefengWeather, \"location=\").concat(longitude, \",\").concat(latitude, \"&key=\").concat(key), //获取实时天气数据\n          success: function success(res) {\n            __f__(\"log\", res.data, \" at pages/index/index.vue:201\");\n            if (res.data.code == '401') {\n              __f__(\"error\", 'HUAQING --- 获取实时天气数据失败，请检查你的和风天气API或Key是否正确！', \" at pages/index/index.vue:203\");\n              return;\n            } else if (res.data.code == '403') {\n              __f__(\"error\", 'HUAQING --- 获取实时天气数据失败，和风天气服务器故障！', \" at pages/index/index.vue:206\");\n              return;\n            }\n            try {var\n              now = res.data.now;\n              that.weather = now.text;\n            } catch (error) {\n              __f__(\"error\", error, \" at pages/index/index.vue:213\");\n            }\n          } });\n\n        uni.request({\n          url: \"\".concat(hefengAir, \"location=\").concat(longitude, \",\").concat(latitude, \"&key=\").concat(key), //获取空气数据\n          success: function success(res) {\n            __f__(\"log\", res.data, \" at pages/index/index.vue:220\");\n            if (res.data.code == '401') {\n              __f__(\"error\", 'HUAQING --- 获取空气数据失败，请检查你的和风天气API或Key是否正确！', \" at pages/index/index.vue:222\");\n              return;\n            } else if (res.data.code == '403') {\n              __f__(\"error\", 'HUAQING --- 获取空气数据失败，和风天气服务器故障！', \" at pages/index/index.vue:225\");\n              return;\n            }\n            try {var\n              now = res.data.now;\n              that.airText = now.category;\n              that.airValue = now.aqi;\n            } catch (error) {\n              __f__(\"error\", error, \" at pages/index/index.vue:233\");\n            }\n          } });\n\n      } });\n\n  },\n  onHide: function onHide() {\n    var that = this;\n    that.client.end();\n  },\n  methods: {\n    onLedChange: function onLedChange(event) {\n      var that = this;\n      __f__(\"log\", event.detail, \" at pages/index/index.vue:247\");\n      var sw = event.detail.value;\n      that.Led = sw;\n      if (sw) {\n        that.client.publish(mpPubTopic, '{\"target\":\"LED\",\"value\":1}', function (err) {\n          if (!err) {\n            __f__(\"log\", '成功下发命令——开灯', \" at pages/index/index.vue:253\");\n          }\n        });\n      } else {\n        that.client.publish(mpPubTopic, '{\"target\":\"LED\",\"value\":0}', function (err) {\n          if (!err) {\n            __f__(\"log\", '成功下发命令——关灯', \" at pages/index/index.vue:259\");\n          }\n        });\n      }\n    },\n    onBeepChange: function onBeepChange(event) {\n      var that = this;\n      __f__(\"log\", event.detail, \" at pages/index/index.vue:266\");\n      var sw = event.detail.value;\n      that.Beep = sw;\n      if (sw) {\n        that.client.publish(mpPubTopic, '{\"target\":\"BEEP\",\"value\":1}', function (err) {\n          if (!err) {\n            __f__(\"log\", '成功下发命令——打开报警器', \" at pages/index/index.vue:272\");\n          }\n        });\n      } else {\n        that.client.publish(mpPubTopic, '{\"target\":\"BEEP\",\"value\":0}', function (err) {\n          if (!err) {\n            __f__(\"log\", '成功下发命令——关闭报警器', \" at pages/index/index.vue:278\");\n          }\n        });\n      }\n    } } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/*!*********************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js ***!
  \*********************************************************************/
/*! exports provided: log, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "log", function() { return log; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return formatLog; });
function typof (v) {
  var s = Object.prototype.toString.call(v)
  return s.substring(8, s.length - 1)
}

function isDebugMode () {
  /* eslint-disable no-undef */
  return typeof __channelId__ === 'string' && __channelId__
}

function jsonStringifyReplacer (k, p) {
  switch (typof(p)) {
    case 'Function':
      return 'function() { [native code] }'
    default :
      return p
  }
}

function log (type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key]
  }
  console[type].apply(console, args)
}

function formatLog () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key]
  }
  var type = args.shift()
  if (isDebugMode()) {
    args.push(args.pop().replace('at ', 'uni-app:///'))
    return console[type].apply(console, args)
  }

  var msgs = args.map(function (v) {
    var type = Object.prototype.toString.call(v).toLowerCase()

    if (type === '[object object]' || type === '[object array]') {
      try {
        v = '---BEGIN:JSON---' + JSON.stringify(v, jsonStringifyReplacer) + '---END:JSON---'
      } catch (e) {
        v = type
      }
    } else {
      if (v === null) {
        v = '---NULL---'
      } else if (v === undefined) {
        v = '---UNDEFINED---'
      } else {
        var vType = typof(v).toUpperCase()

        if (vType === 'NUMBER' || vType === 'BOOLEAN') {
          v = '---BEGIN:' + vType + '---' + v + '---END:' + vType + '---'
        } else {
          v = String(v)
        }
      }
    }

    return v
  })
  var msg = ''

  if (msgs.length > 1) {
    var lastMsg = msgs.pop()
    msg = msgs.join('---COMMA---')

    if (lastMsg.indexOf(' at ') === 0) {
      msg += lastMsg
    } else {
      msg += '---COMMA---' + lastMsg
    }
  } else {
    msg = msgs[0]
  }

  console[type](msg)
}


/***/ }),
/* 8 */
/*!*************************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/utils/mqttjs3/mqtt.js ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, wx, __f__) {var require;var require;(function (f) {if (true) {module.exports = f();} else { var g; }})(function () {var define, module, exports;return function () {function r(e, n, t) {function o(i, f) {if (!n[i]) {if (!e[i]) {var c = \"function\" == typeof require && require;if (!f && c) return require(i, !0);if (u) return u(i, !0);var a = new Error(\"Cannot find module '\" + i + \"'\");throw a.code = \"MODULE_NOT_FOUND\", a;}var p = n[i] = { exports: {} };e[i][0].call(p.exports, function (r) {var n = e[i][1][r];return o(n || r);}, p, p.exports, r, e, n, t);}return n[i].exports;}for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {o(t[i]);}return o;}return r;}()({ 1: [function (require, module, exports) {\n      (function (process, global) {\n        'use strict';\n\n        /**\n                       * Module dependencies\n                       */\n        var events = require('events');\n        var Store = require('./store');\n        var mqttPacket = require('mqtt-packet');\n        var Writable = require('readable-stream').Writable;\n        var inherits = require('inherits');\n        var reInterval = require('reinterval');\n        var validations = require('./validations');\n        var xtend = require('xtend');\n        var setImmediate = global.setImmediate || function (callback) {\n          // works in node v0.8\n          process.nextTick(callback);\n        };\n        var defaultConnectOptions = {\n          keepalive: 60,\n          reschedulePings: true,\n          protocolId: 'MQTT',\n          protocolVersion: 4,\n          reconnectPeriod: 1000,\n          connectTimeout: 30 * 1000,\n          clean: true,\n          resubscribe: true };\n\n        var errors = {\n          0: '',\n          1: 'Unacceptable protocol version',\n          2: 'Identifier rejected',\n          3: 'Server unavailable',\n          4: 'Bad username or password',\n          5: 'Not authorized',\n          16: 'No matching subscribers',\n          17: 'No subscription existed',\n          128: 'Unspecified error',\n          129: 'Malformed Packet',\n          130: 'Protocol Error',\n          131: 'Implementation specific error',\n          132: 'Unsupported Protocol Version',\n          133: 'Client Identifier not valid',\n          134: 'Bad User Name or Password',\n          135: 'Not authorized',\n          136: 'Server unavailable',\n          137: 'Server busy',\n          138: 'Banned',\n          139: 'Server shutting down',\n          140: 'Bad authentication method',\n          141: 'Keep Alive timeout',\n          142: 'Session taken over',\n          143: 'Topic Filter invalid',\n          144: 'Topic Name invalid',\n          145: 'Packet identifier in use',\n          146: 'Packet Identifier not found',\n          147: 'Receive Maximum exceeded',\n          148: 'Topic Alias invalid',\n          149: 'Packet too large',\n          150: 'Message rate too high',\n          151: 'Quota exceeded',\n          152: 'Administrative action',\n          153: 'Payload format invalid',\n          154: 'Retain not supported',\n          155: 'QoS not supported',\n          156: 'Use another server',\n          157: 'Server moved',\n          158: 'Shared Subscriptions not supported',\n          159: 'Connection rate exceeded',\n          160: 'Maximum connect time',\n          161: 'Subscription Identifiers not supported',\n          162: 'Wildcard Subscriptions not supported' };\n\n\n        function defaultId() {\n          return 'mqttjs_' + Math.random().toString(16).substr(2, 8);\n        }\n\n        function sendPacket(client, packet, cb) {\n          client.emit('packetsend', packet);\n\n          var result = mqttPacket.writeToStream(packet, client.stream, client.options);\n\n          if (!result && cb) {\n            client.stream.once('drain', cb);\n          } else if (cb) {\n            cb();\n          }\n        }\n\n        function flush(queue) {\n          if (queue) {\n            Object.keys(queue).forEach(function (messageId) {\n              if (typeof queue[messageId].cb === 'function') {\n                queue[messageId].cb(new Error('Connection closed'));\n                delete queue[messageId];\n              }\n            });\n          }\n        }\n\n        function flushVolatile(queue) {\n          if (queue) {\n            Object.keys(queue).forEach(function (messageId) {\n              if (queue[messageId].volatile && typeof queue[messageId].cb === 'function') {\n                queue[messageId].cb(new Error('Connection closed'));\n                delete queue[messageId];\n              }\n            });\n          }\n        }\n\n        function storeAndSend(client, packet, cb, cbStorePut) {\n          client.outgoingStore.put(packet, function storedPacket(err) {\n            if (err) {\n              return cb && cb(err);\n            }\n            cbStorePut();\n            sendPacket(client, packet, cb);\n          });\n        }\n\n        function nop() {}\n\n        /**\n                           * MqttClient constructor\n                           *\n                           * @param {Stream} stream - stream\n                           * @param {Object} [options] - connection options\n                           * (see Connection#connect)\n                           */\n        function MqttClient(streamBuilder, options) {\n          var k;\n          var that = this;\n\n          if (!(this instanceof MqttClient)) {\n            return new MqttClient(streamBuilder, options);\n          }\n\n          this.options = options || {};\n\n          // Defaults\n          for (k in defaultConnectOptions) {\n            if (typeof this.options[k] === 'undefined') {\n              this.options[k] = defaultConnectOptions[k];\n            } else {\n              this.options[k] = options[k];\n            }\n          }\n\n          this.options.clientId = typeof options.clientId === 'string' ? options.clientId : defaultId();\n\n          this.options.customHandleAcks = options.protocolVersion === 5 && options.customHandleAcks ? options.customHandleAcks : function () {arguments[3](0);};\n\n          this.streamBuilder = streamBuilder;\n\n          // Inflight message storages\n          this.outgoingStore = options.outgoingStore || new Store();\n          this.incomingStore = options.incomingStore || new Store();\n\n          // Should QoS zero messages be queued when the connection is broken?\n          this.queueQoSZero = options.queueQoSZero === undefined ? true : options.queueQoSZero;\n\n          // map of subscribed topics to support reconnection\n          this._resubscribeTopics = {};\n\n          // map of a subscribe messageId and a topic\n          this.messageIdToTopic = {};\n\n          // Ping timer, setup in _setupPingTimer\n          this.pingTimer = null;\n          // Is the client connected?\n          this.connected = false;\n          // Are we disconnecting?\n          this.disconnecting = false;\n          // Packet queue\n          this.queue = [];\n          // connack timer\n          this.connackTimer = null;\n          // Reconnect timer\n          this.reconnectTimer = null;\n          // Is processing store?\n          this._storeProcessing = false;\n          // Packet Ids are put into the store during store processing\n          this._packetIdsDuringStoreProcessing = {};\n          /**\n                                                      * MessageIDs starting with 1\n                                                      * ensure that nextId is min. 1, see https://github.com/mqttjs/MQTT.js/issues/810\n                                                      */\n          this.nextId = Math.max(1, Math.floor(Math.random() * 65535));\n\n          // Inflight callbacks\n          this.outgoing = {};\n\n          // True if connection is first time.\n          this._firstConnection = true;\n\n          // Mark disconnected on stream close\n          this.on('close', function () {\n            this.connected = false;\n            clearTimeout(this.connackTimer);\n          });\n\n          // Send queued packets\n          this.on('connect', function () {\n            var queue = this.queue;\n\n            function deliver() {\n              var entry = queue.shift();\n              var packet = null;\n\n              if (!entry) {\n                return;\n              }\n\n              packet = entry.packet;\n\n              that._sendPacket(\n              packet,\n              function (err) {\n                if (entry.cb) {\n                  entry.cb(err);\n                }\n                deliver();\n              });\n\n            }\n\n            deliver();\n          });\n\n          // Clear ping timer\n          this.on('close', function () {\n            if (that.pingTimer !== null) {\n              that.pingTimer.clear();\n              that.pingTimer = null;\n            }\n          });\n\n          // Setup reconnect timer on disconnect\n          this.on('close', this._setupReconnect);\n\n          events.EventEmitter.call(this);\n\n          this._setupStream();\n        }\n        inherits(MqttClient, events.EventEmitter);\n\n        /**\n                                                    * setup the event handlers in the inner stream.\n                                                    *\n                                                    * @api private\n                                                    */\n        MqttClient.prototype._setupStream = function () {\n          var connectPacket;\n          var that = this;\n          var writable = new Writable();\n          var parser = mqttPacket.parser(this.options);\n          var completeParse = null;\n          var packets = [];\n\n          this._clearReconnect();\n\n          this.stream = this.streamBuilder(this);\n\n          parser.on('packet', function (packet) {\n            packets.push(packet);\n          });\n\n          function nextTickWork() {\n            if (packets.length) {\n              process.nextTick(work);\n            } else {\n              var done = completeParse;\n              completeParse = null;\n              done();\n            }\n          }\n\n          function work() {\n            var packet = packets.shift();\n\n            if (packet) {\n              that._handlePacket(packet, nextTickWork);\n            } else {\n              var done = completeParse;\n              completeParse = null;\n              if (done) done();\n            }\n          }\n\n          writable._write = function (buf, enc, done) {\n            completeParse = done;\n            parser.parse(buf);\n            work();\n          };\n\n          this.stream.pipe(writable);\n\n          // Suppress connection errors\n          this.stream.on('error', nop);\n\n          // Echo stream close\n          this.stream.on('close', function () {\n            flushVolatile(that.outgoing);\n            that.emit('close');\n          });\n\n          // Send a connect packet\n          connectPacket = Object.create(this.options);\n          connectPacket.cmd = 'connect';\n          // avoid message queue\n          sendPacket(this, connectPacket);\n\n          // Echo connection errors\n          parser.on('error', this.emit.bind(this, 'error'));\n\n          // auth\n          if (this.options.properties) {\n            if (!this.options.properties.authenticationMethod && this.options.properties.authenticationData) {\n              this.emit('error', new Error('Packet has no Authentication Method'));\n              return this;\n            }\n            if (this.options.properties.authenticationMethod && this.options.authPacket && typeof this.options.authPacket === 'object') {\n              var authPacket = xtend({ cmd: 'auth', reasonCode: 0 }, this.options.authPacket);\n              sendPacket(this, authPacket);\n            }\n          }\n\n          // many drain listeners are needed for qos 1 callbacks if the connection is intermittent\n          this.stream.setMaxListeners(1000);\n\n          clearTimeout(this.connackTimer);\n          this.connackTimer = setTimeout(function () {\n            that._cleanUp(true);\n          }, this.options.connectTimeout);\n        };\n\n        MqttClient.prototype._handlePacket = function (packet, done) {\n          var options = this.options;\n\n          if (options.protocolVersion === 5 && options.properties && options.properties.maximumPacketSize && options.properties.maximumPacketSize < packet.length) {\n            this.emit('error', new Error('exceeding packets size ' + packet.cmd));\n            this.end({ reasonCode: 149, properties: { reasonString: 'Maximum packet size was exceeded' } });\n            return this;\n          }\n\n          this.emit('packetreceive', packet);\n\n          switch (packet.cmd) {\n            case 'publish':\n              this._handlePublish(packet, done);\n              break;\n            case 'puback':\n            case 'pubrec':\n            case 'pubcomp':\n            case 'suback':\n            case 'unsuback':\n              this._handleAck(packet);\n              done();\n              break;\n            case 'pubrel':\n              this._handlePubrel(packet, done);\n              break;\n            case 'connack':\n              this._handleConnack(packet);\n              done();\n              break;\n            case 'pingresp':\n              this._handlePingresp(packet);\n              done();\n              break;\n            case 'disconnect':\n              this._handleDisconnect(packet);\n              done();\n              break;\n            default:\n              // do nothing\n              // maybe we should do an error handling\n              // or just log it\n              break;}\n\n        };\n\n        MqttClient.prototype._checkDisconnecting = function (callback) {\n          if (this.disconnecting) {\n            if (callback) {\n              callback(new Error('client disconnecting'));\n            } else {\n              this.emit('error', new Error('client disconnecting'));\n            }\n          }\n          return this.disconnecting;\n        };\n\n        /**\n            * publish - publish <message> to <topic>\n            *\n            * @param {String} topic - topic to publish to\n            * @param {String, Buffer} message - message to publish\n            * @param {Object} [opts] - publish options, includes:\n            *    {Number} qos - qos level to publish on\n            *    {Boolean} retain - whether or not to retain the message\n            *    {Boolean} dup - whether or not mark a message as duplicate\n            *    {Function} cbStorePut - function(){} called when message is put into `outgoingStore`\n            * @param {Function} [callback] - function(err){}\n            *    called when publish succeeds or fails\n            * @returns {MqttClient} this - for chaining\n            * @api public\n            *\n            * @example client.publish('topic', 'message');\n            * @example\n            *     client.publish('topic', 'message', {qos: 1, retain: true, dup: true});\n            * @example client.publish('topic', 'message', console.log);\n            */\n        MqttClient.prototype.publish = function (topic, message, opts, callback) {\n          var packet;\n          var options = this.options;\n\n          // .publish(topic, payload, cb);\n          if (typeof opts === 'function') {\n            callback = opts;\n            opts = null;\n          }\n\n          // default opts\n          var defaultOpts = { qos: 0, retain: false, dup: false };\n          opts = xtend(defaultOpts, opts);\n\n          if (this._checkDisconnecting(callback)) {\n            return this;\n          }\n\n          packet = {\n            cmd: 'publish',\n            topic: topic,\n            payload: message,\n            qos: opts.qos,\n            retain: opts.retain,\n            messageId: this._nextId(),\n            dup: opts.dup };\n\n\n          if (options.protocolVersion === 5) {\n            packet.properties = opts.properties;\n            if (!options.properties && packet.properties && packet.properties.topicAlias || opts.properties && options.properties && (\n            opts.properties.topicAlias && options.properties.topicAliasMaximum && opts.properties.topicAlias > options.properties.topicAliasMaximum ||\n            !options.properties.topicAliasMaximum && opts.properties.topicAlias)) {\n              /*\n                                                                                   if we are don`t setup topic alias or\n                                                                                   topic alias maximum less than topic alias or\n                                                                                   server don`t give topic alias maximum,\n                                                                                   we are removing topic alias from packet\n                                                                                   */\n              delete packet.properties.topicAlias;\n            }\n          }\n\n          switch (opts.qos) {\n            case 1:\n            case 2:\n              // Add to callbacks\n              this.outgoing[packet.messageId] = {\n                volatile: false,\n                cb: callback || nop };\n\n              if (this._storeProcessing) {\n                this._packetIdsDuringStoreProcessing[packet.messageId] = false;\n                this._storePacket(packet, undefined, opts.cbStorePut);\n              } else {\n                this._sendPacket(packet, undefined, opts.cbStorePut);\n              }\n              break;\n            default:\n              if (this._storeProcessing) {\n                this._storePacket(packet, callback, opts.cbStorePut);\n              } else {\n                this._sendPacket(packet, callback, opts.cbStorePut);\n              }\n              break;}\n\n\n          return this;\n        };\n\n        /**\n            * subscribe - subscribe to <topic>\n            *\n            * @param {String, Array, Object} topic - topic(s) to subscribe to, supports objects in the form {'topic': qos}\n            * @param {Object} [opts] - optional subscription options, includes:\n            *    {Number} qos - subscribe qos level\n            * @param {Function} [callback] - function(err, granted){} where:\n            *    {Error} err - subscription error (none at the moment!)\n            *    {Array} granted - array of {topic: 't', qos: 0}\n            * @returns {MqttClient} this - for chaining\n            * @api public\n            * @example client.subscribe('topic');\n            * @example client.subscribe('topic', {qos: 1});\n            * @example client.subscribe({'topic': {qos: 0}, 'topic2': {qos: 1}}, console.log);\n            * @example client.subscribe('topic', console.log);\n            */\n        MqttClient.prototype.subscribe = function () {\n          var packet;\n          var args = new Array(arguments.length);\n          for (var i = 0; i < arguments.length; i++) {\n            args[i] = arguments[i];\n          }\n          var subs = [];\n          var obj = args.shift();\n          var resubscribe = obj.resubscribe;\n          var callback = args.pop() || nop;\n          var opts = args.pop();\n          var invalidTopic;\n          var that = this;\n          var version = this.options.protocolVersion;\n\n          delete obj.resubscribe;\n\n          if (typeof obj === 'string') {\n            obj = [obj];\n          }\n\n          if (typeof callback !== 'function') {\n            opts = callback;\n            callback = nop;\n          }\n\n          invalidTopic = validations.validateTopics(obj);\n          if (invalidTopic !== null) {\n            setImmediate(callback, new Error('Invalid topic ' + invalidTopic));\n            return this;\n          }\n\n          if (this._checkDisconnecting(callback)) {\n            return this;\n          }\n\n          var defaultOpts = {\n            qos: 0 };\n\n          if (version === 5) {\n            defaultOpts.nl = false;\n            defaultOpts.rap = false;\n            defaultOpts.rh = 0;\n          }\n          opts = xtend(defaultOpts, opts);\n\n          if (Array.isArray(obj)) {\n            obj.forEach(function (topic) {\n              if (!that._resubscribeTopics.hasOwnProperty(topic) ||\n              that._resubscribeTopics[topic].qos < opts.qos ||\n              resubscribe) {\n                var currentOpts = {\n                  topic: topic,\n                  qos: opts.qos };\n\n                if (version === 5) {\n                  currentOpts.nl = opts.nl;\n                  currentOpts.rap = opts.rap;\n                  currentOpts.rh = opts.rh;\n                  currentOpts.properties = opts.properties;\n                }\n                subs.push(currentOpts);\n              }\n            });\n          } else {\n            Object.\n            keys(obj).\n            forEach(function (k) {\n              if (!that._resubscribeTopics.hasOwnProperty(k) ||\n              that._resubscribeTopics[k].qos < obj[k].qos ||\n              resubscribe) {\n                var currentOpts = {\n                  topic: k,\n                  qos: obj[k].qos };\n\n                if (version === 5) {\n                  currentOpts.nl = obj[k].nl;\n                  currentOpts.rap = obj[k].rap;\n                  currentOpts.rh = obj[k].rh;\n                  currentOpts.properties = opts.properties;\n                }\n                subs.push(currentOpts);\n              }\n            });\n          }\n\n          packet = {\n            cmd: 'subscribe',\n            subscriptions: subs,\n            qos: 1,\n            retain: false,\n            dup: false,\n            messageId: this._nextId() };\n\n\n          if (opts.properties) {\n            packet.properties = opts.properties;\n          }\n\n          if (!subs.length) {\n            callback(null, []);\n            return;\n          }\n\n          // subscriptions to resubscribe to in case of disconnect\n          if (this.options.resubscribe) {\n            var topics = [];\n            subs.forEach(function (sub) {\n              if (that.options.reconnectPeriod > 0) {\n                var topic = { qos: sub.qos };\n                if (version === 5) {\n                  topic.nl = sub.nl || false;\n                  topic.rap = sub.rap || false;\n                  topic.rh = sub.rh || 0;\n                  topic.properties = sub.properties;\n                }\n                that._resubscribeTopics[sub.topic] = topic;\n                topics.push(sub.topic);\n              }\n            });\n            that.messageIdToTopic[packet.messageId] = topics;\n          }\n\n          this.outgoing[packet.messageId] = {\n            volatile: true,\n            cb: function cb(err, packet) {\n              if (!err) {\n                var granted = packet.granted;\n                for (var i = 0; i < granted.length; i += 1) {\n                  subs[i].qos = granted[i];\n                }\n              }\n\n              callback(err, subs);\n            } };\n\n\n          this._sendPacket(packet);\n\n          return this;\n        };\n\n        /**\n            * unsubscribe - unsubscribe from topic(s)\n            *\n            * @param {String, Array} topic - topics to unsubscribe from\n            * @param {Object} [opts] - optional subscription options, includes:\n            *    {Object} properties - properties of unsubscribe packet\n            * @param {Function} [callback] - callback fired on unsuback\n            * @returns {MqttClient} this - for chaining\n            * @api public\n            * @example client.unsubscribe('topic');\n            * @example client.unsubscribe('topic', console.log);\n            */\n        MqttClient.prototype.unsubscribe = function () {\n          var packet = {\n            cmd: 'unsubscribe',\n            qos: 1,\n            messageId: this._nextId() };\n\n          var that = this;\n          var args = new Array(arguments.length);\n          for (var i = 0; i < arguments.length; i++) {\n            args[i] = arguments[i];\n          }\n          var topic = args.shift();\n          var callback = args.pop() || nop;\n          var opts = args.pop();\n\n          if (typeof topic === 'string') {\n            topic = [topic];\n          }\n\n          if (typeof callback !== 'function') {\n            opts = callback;\n            callback = nop;\n          }\n\n          if (this._checkDisconnecting(callback)) {\n            return this;\n          }\n\n          if (typeof topic === 'string') {\n            packet.unsubscriptions = [topic];\n          } else if (typeof topic === 'object' && topic.length) {\n            packet.unsubscriptions = topic;\n          }\n\n          if (this.options.resubscribe) {\n            packet.unsubscriptions.forEach(function (topic) {\n              delete that._resubscribeTopics[topic];\n            });\n          }\n\n          if (typeof opts === 'object' && opts.properties) {\n            packet.properties = opts.properties;\n          }\n\n          this.outgoing[packet.messageId] = {\n            volatile: true,\n            cb: callback };\n\n\n          this._sendPacket(packet);\n\n          return this;\n        };\n\n        /**\n            * end - close connection\n            *\n            * @returns {MqttClient} this - for chaining\n            * @param {Boolean} force - do not wait for all in-flight messages to be acked\n            * @param {Function} cb - called when the client has been closed\n            *\n            * @api public\n            */\n        MqttClient.prototype.end = function () {\n          var that = this;\n\n          var force = arguments[0];\n          var opts = arguments[1];\n          var cb = arguments[2];\n\n          if (force == null || typeof force !== 'boolean') {\n            cb = opts || nop;\n            opts = force;\n            force = false;\n            if (typeof opts !== 'object') {\n              cb = opts;\n              opts = null;\n              if (typeof cb !== 'function') {\n                cb = nop;\n              }\n            }\n          }\n\n          if (typeof opts !== 'object') {\n            cb = opts;\n            opts = null;\n          }\n\n          cb = cb || nop;\n\n          function closeStores() {\n            that.disconnected = true;\n            that.incomingStore.close(function () {\n              that.outgoingStore.close(function () {\n                if (cb) {\n                  cb.apply(null, arguments);\n                }\n                that.emit('end');\n              });\n            });\n            if (that._deferredReconnect) {\n              that._deferredReconnect();\n            }\n          }\n\n          function finish() {\n            // defer closesStores of an I/O cycle,\n            // just to make sure things are\n            // ok for websockets\n            that._cleanUp(force, setImmediate.bind(null, closeStores), opts);\n          }\n\n          if (this.disconnecting) {\n            return this;\n          }\n\n          this._clearReconnect();\n\n          this.disconnecting = true;\n\n          if (!force && Object.keys(this.outgoing).length > 0) {\n            // wait 10ms, just to be sure we received all of it\n            this.once('outgoingEmpty', setTimeout.bind(null, finish, 10));\n          } else {\n            finish();\n          }\n\n          return this;\n        };\n\n        /**\n            * removeOutgoingMessage - remove a message in outgoing store\n            * the outgoing callback will be called withe Error('Message removed') if the message is removed\n            *\n            * @param {Number} mid - messageId to remove message\n            * @returns {MqttClient} this - for chaining\n            * @api public\n            *\n            * @example client.removeOutgoingMessage(client.getLastMessageId());\n            */\n        MqttClient.prototype.removeOutgoingMessage = function (mid) {\n          var cb = this.outgoing[mid] ? this.outgoing[mid].cb : null;\n          delete this.outgoing[mid];\n          this.outgoingStore.del({ messageId: mid }, function () {\n            cb(new Error('Message removed'));\n          });\n          return this;\n        };\n\n        /**\n            * reconnect - connect again using the same options as connect()\n            *\n            * @param {Object} [opts] - optional reconnect options, includes:\n            *    {Store} incomingStore - a store for the incoming packets\n            *    {Store} outgoingStore - a store for the outgoing packets\n            *    if opts is not given, current stores are used\n            * @returns {MqttClient} this - for chaining\n            *\n            * @api public\n            */\n        MqttClient.prototype.reconnect = function (opts) {\n          var that = this;\n          var f = function f() {\n            if (opts) {\n              that.options.incomingStore = opts.incomingStore;\n              that.options.outgoingStore = opts.outgoingStore;\n            } else {\n              that.options.incomingStore = null;\n              that.options.outgoingStore = null;\n            }\n            that.incomingStore = that.options.incomingStore || new Store();\n            that.outgoingStore = that.options.outgoingStore || new Store();\n            that.disconnecting = false;\n            that.disconnected = false;\n            that._deferredReconnect = null;\n            that._reconnect();\n          };\n\n          if (this.disconnecting && !this.disconnected) {\n            this._deferredReconnect = f;\n          } else {\n            f();\n          }\n          return this;\n        };\n\n        /**\n            * _reconnect - implement reconnection\n            * @api privateish\n            */\n        MqttClient.prototype._reconnect = function () {\n          this.emit('reconnect');\n          this._setupStream();\n        };\n\n        /**\n            * _setupReconnect - setup reconnect timer\n            */\n        MqttClient.prototype._setupReconnect = function () {\n          var that = this;\n\n          if (!that.disconnecting && !that.reconnectTimer && that.options.reconnectPeriod > 0) {\n            if (!this.reconnecting) {\n              this.emit('offline');\n              this.reconnecting = true;\n            }\n            that.reconnectTimer = setInterval(function () {\n              that._reconnect();\n            }, that.options.reconnectPeriod);\n          }\n        };\n\n        /**\n            * _clearReconnect - clear the reconnect timer\n            */\n        MqttClient.prototype._clearReconnect = function () {\n          if (this.reconnectTimer) {\n            clearInterval(this.reconnectTimer);\n            this.reconnectTimer = null;\n          }\n        };\n\n        /**\n            * _cleanUp - clean up on connection end\n            * @api private\n            */\n        MqttClient.prototype._cleanUp = function (forced, done) {\n          var opts = arguments[2];\n          if (done) {\n            this.stream.on('close', done);\n          }\n\n          if (forced) {\n            if (this.options.reconnectPeriod === 0 && this.options.clean) {\n              flush(this.outgoing);\n            }\n            this.stream.destroy();\n          } else {\n            var packet = xtend({ cmd: 'disconnect' }, opts);\n            this._sendPacket(\n            packet,\n            setImmediate.bind(\n            null,\n            this.stream.end.bind(this.stream)));\n\n\n          }\n\n          if (!this.disconnecting) {\n            this._clearReconnect();\n            this._setupReconnect();\n          }\n\n          if (this.pingTimer !== null) {\n            this.pingTimer.clear();\n            this.pingTimer = null;\n          }\n\n          if (done && !this.connected) {\n            this.stream.removeListener('close', done);\n            done();\n          }\n        };\n\n        /**\n            * _sendPacket - send or queue a packet\n            * @param {String} type - packet type (see `protocol`)\n            * @param {Object} packet - packet options\n            * @param {Function} cb - callback when the packet is sent\n            * @param {Function} cbStorePut - called when message is put into outgoingStore\n            * @api private\n            */\n        MqttClient.prototype._sendPacket = function (packet, cb, cbStorePut) {\n          cbStorePut = cbStorePut || nop;\n\n          if (!this.connected) {\n            this._storePacket(packet, cb, cbStorePut);\n            return;\n          }\n\n          // When sending a packet, reschedule the ping timer\n          this._shiftPingInterval();\n\n          switch (packet.cmd) {\n            case 'publish':\n              break;\n            case 'pubrel':\n              storeAndSend(this, packet, cb, cbStorePut);\n              return;\n            default:\n              sendPacket(this, packet, cb);\n              return;}\n\n\n          switch (packet.qos) {\n            case 2:\n            case 1:\n              storeAndSend(this, packet, cb, cbStorePut);\n              break;\n            /**\n                      * no need of case here since it will be caught by default\n                      * and jshint comply that before default it must be a break\n                      * anyway it will result in -1 evaluation\n                      */\n            case 0:\n            /* falls through */\n            default:\n              sendPacket(this, packet, cb);\n              break;}\n\n        };\n\n        /**\n            * _storePacket - queue a packet\n            * @param {String} type - packet type (see `protocol`)\n            * @param {Object} packet - packet options\n            * @param {Function} cb - callback when the packet is sent\n            * @param {Function} cbStorePut - called when message is put into outgoingStore\n            * @api private\n            */\n        MqttClient.prototype._storePacket = function (packet, cb, cbStorePut) {\n          cbStorePut = cbStorePut || nop;\n\n          if ((packet.qos || 0) === 0 && this.queueQoSZero || packet.cmd !== 'publish') {\n            this.queue.push({ packet: packet, cb: cb });\n          } else if (packet.qos > 0) {\n            cb = this.outgoing[packet.messageId] ? this.outgoing[packet.messageId].cb : null;\n            this.outgoingStore.put(packet, function (err) {\n              if (err) {\n                return cb && cb(err);\n              }\n              cbStorePut();\n            });\n          } else if (cb) {\n            cb(new Error('No connection to broker'));\n          }\n        };\n\n        /**\n            * _setupPingTimer - setup the ping timer\n            *\n            * @api private\n            */\n        MqttClient.prototype._setupPingTimer = function () {\n          var that = this;\n\n          if (!this.pingTimer && this.options.keepalive) {\n            this.pingResp = true;\n            this.pingTimer = reInterval(function () {\n              that._checkPing();\n            }, this.options.keepalive * 1000);\n          }\n        };\n\n        /**\n            * _shiftPingInterval - reschedule the ping interval\n            *\n            * @api private\n            */\n        MqttClient.prototype._shiftPingInterval = function () {\n          if (this.pingTimer && this.options.keepalive && this.options.reschedulePings) {\n            this.pingTimer.reschedule(this.options.keepalive * 1000);\n          }\n        };\n        /**\n            * _checkPing - check if a pingresp has come back, and ping the server again\n            *\n            * @api private\n            */\n        MqttClient.prototype._checkPing = function () {\n          if (this.pingResp) {\n            this.pingResp = false;\n            this._sendPacket({ cmd: 'pingreq' });\n          } else {\n            // do a forced cleanup since socket will be in bad shape\n            this._cleanUp(true);\n          }\n        };\n\n        /**\n            * _handlePingresp - handle a pingresp\n            *\n            * @api private\n            */\n        MqttClient.prototype._handlePingresp = function () {\n          this.pingResp = true;\n        };\n\n        /**\n            * _handleConnack\n            *\n            * @param {Object} packet\n            * @api private\n            */\n\n        MqttClient.prototype._handleConnack = function (packet) {\n          var options = this.options;\n          var version = options.protocolVersion;\n          var rc = version === 5 ? packet.reasonCode : packet.returnCode;\n\n          clearTimeout(this.connackTimer);\n\n          if (packet.properties) {\n            if (packet.properties.topicAliasMaximum) {\n              if (!options.properties) {options.properties = {};}\n              options.properties.topicAliasMaximum = packet.properties.topicAliasMaximum;\n            }\n            if (packet.properties.serverKeepAlive && options.keepalive) {\n              options.keepalive = packet.properties.serverKeepAlive;\n              this._shiftPingInterval();\n            }\n            if (packet.properties.maximumPacketSize) {\n              if (!options.properties) {options.properties = {};}\n              options.properties.maximumPacketSize = packet.properties.maximumPacketSize;\n            }\n          }\n\n          if (rc === 0) {\n            this.reconnecting = false;\n            this._onConnect(packet);\n          } else if (rc > 0) {\n            var err = new Error('Connection refused: ' + errors[rc]);\n            err.code = rc;\n            this.emit('error', err);\n          }\n        };\n\n        /**\n            * _handlePublish\n            *\n            * @param {Object} packet\n            * @api private\n            */\n        /*\n               those late 2 case should be rewrite to comply with coding style:\n               \n               case 1:\n               case 0:\n                 // do not wait sending a puback\n                 // no callback passed\n                 if (1 === qos) {\n                   this._sendPacket({\n                     cmd: 'puback',\n                     messageId: mid\n                   });\n                 }\n                 // emit the message event for both qos 1 and 0\n                 this.emit('message', topic, message, packet);\n                 this.handleMessage(packet, done);\n                 break;\n               default:\n                 // do nothing but every switch mus have a default\n                 // log or throw an error about unknown qos\n                 break;\n               \n               for now i just suppressed the warnings\n               */\n        MqttClient.prototype._handlePublish = function (packet, done) {\n          done = typeof done !== 'undefined' ? done : nop;\n          var topic = packet.topic.toString();\n          var message = packet.payload;\n          var qos = packet.qos;\n          var mid = packet.messageId;\n          var that = this;\n          var options = this.options;\n          var validReasonCodes = [0, 16, 128, 131, 135, 144, 145, 151, 153];\n\n          switch (qos) {\n            case 2:{\n                options.customHandleAcks(topic, message, packet, function (error, code) {\n                  if (!(error instanceof Error)) {\n                    code = error;\n                    error = null;\n                  }\n                  if (error) {return that.emit('error', error);}\n                  if (validReasonCodes.indexOf(code) === -1) {return that.emit('error', new Error('Wrong reason code for pubrec'));}\n                  if (code) {\n                    that._sendPacket({ cmd: 'pubrec', messageId: mid, reasonCode: code }, done);\n                  } else {\n                    that.incomingStore.put(packet, function () {\n                      that._sendPacket({ cmd: 'pubrec', messageId: mid }, done);\n                    });\n                  }\n                });\n                break;\n              }\n            case 1:{\n                // emit the message event\n                options.customHandleAcks(topic, message, packet, function (error, code) {\n                  if (!(error instanceof Error)) {\n                    code = error;\n                    error = null;\n                  }\n                  if (error) {return that.emit('error', error);}\n                  if (validReasonCodes.indexOf(code) === -1) {return that.emit('error', new Error('Wrong reason code for puback'));}\n                  if (!code) {that.emit('message', topic, message, packet);}\n                  that.handleMessage(packet, function (err) {\n                    if (err) {\n                      return done && done(err);\n                    }\n                    that._sendPacket({ cmd: 'puback', messageId: mid, reasonCode: code }, done);\n                  });\n                });\n                break;\n              }\n            case 0:\n              // emit the message event\n              this.emit('message', topic, message, packet);\n              this.handleMessage(packet, done);\n              break;\n            default:\n              // do nothing\n              // log or throw an error about unknown qos\n              break;}\n\n        };\n\n        /**\n            * Handle messages with backpressure support, one at a time.\n            * Override at will.\n            *\n            * @param Packet packet the packet\n            * @param Function callback call when finished\n            * @api public\n            */\n        MqttClient.prototype.handleMessage = function (packet, callback) {\n          callback();\n        };\n\n        /**\n            * _handleAck\n            *\n            * @param {Object} packet\n            * @api private\n            */\n\n        MqttClient.prototype._handleAck = function (packet) {\n          /* eslint no-fallthrough: \"off\" */\n          var mid = packet.messageId;\n          var type = packet.cmd;\n          var response = null;\n          var cb = this.outgoing[mid] ? this.outgoing[mid].cb : null;\n          var that = this;\n          var err;\n\n          if (!cb) {\n            // Server sent an ack in error, ignore it.\n            return;\n          }\n\n          // Process\n          switch (type) {\n            case 'pubcomp':\n            // same thing as puback for QoS 2\n            case 'puback':\n              var pubackRC = packet.reasonCode;\n              // Callback - we're done\n              if (pubackRC && pubackRC > 0 && pubackRC !== 16) {\n                err = new Error('Publish error: ' + errors[pubackRC]);\n                err.code = pubackRC;\n                cb(err, packet);\n              }\n              delete this.outgoing[mid];\n              this.outgoingStore.del(packet, cb);\n              break;\n            case 'pubrec':\n              response = {\n                cmd: 'pubrel',\n                qos: 2,\n                messageId: mid };\n\n              var pubrecRC = packet.reasonCode;\n\n              if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {\n                err = new Error('Publish error: ' + errors[pubrecRC]);\n                err.code = pubrecRC;\n                cb(err, packet);\n              } else {\n                this._sendPacket(response);\n              }\n              break;\n            case 'suback':\n              delete this.outgoing[mid];\n              for (var grantedI = 0; grantedI < packet.granted.length; grantedI++) {\n                if ((packet.granted[grantedI] & 0x80) !== 0) {\n                  // suback with Failure status\n                  var topics = this.messageIdToTopic[mid];\n                  if (topics) {\n                    topics.forEach(function (topic) {\n                      delete that._resubscribeTopics[topic];\n                    });\n                  }\n                }\n              }\n              cb(null, packet);\n              break;\n            case 'unsuback':\n              delete this.outgoing[mid];\n              cb(null);\n              break;\n            default:\n              that.emit('error', new Error('unrecognized packet type'));}\n\n\n          if (this.disconnecting &&\n          Object.keys(this.outgoing).length === 0) {\n            this.emit('outgoingEmpty');\n          }\n        };\n\n        /**\n            * _handlePubrel\n            *\n            * @param {Object} packet\n            * @api private\n            */\n        MqttClient.prototype._handlePubrel = function (packet, callback) {\n          callback = typeof callback !== 'undefined' ? callback : nop;\n          var mid = packet.messageId;\n          var that = this;\n\n          var comp = { cmd: 'pubcomp', messageId: mid };\n\n          that.incomingStore.get(packet, function (err, pub) {\n            if (!err) {\n              that.emit('message', pub.topic, pub.payload, pub);\n              that.handleMessage(pub, function (err) {\n                if (err) {\n                  return callback(err);\n                }\n                that.incomingStore.del(pub, nop);\n                that._sendPacket(comp, callback);\n              });\n            } else {\n              that._sendPacket(comp, callback);\n            }\n          });\n        };\n\n        /**\n            * _handleDisconnect\n            *\n            * @param {Object} packet\n            * @api private\n            */\n        MqttClient.prototype._handleDisconnect = function (packet) {\n          this.emit('disconnect', packet);\n        };\n\n        /**\n            * _nextId\n            * @return unsigned int\n            */\n        MqttClient.prototype._nextId = function () {\n          // id becomes current state of this.nextId and increments afterwards\n          var id = this.nextId++;\n          // Ensure 16 bit unsigned int (max 65535, nextId got one higher)\n          if (this.nextId === 65536) {\n            this.nextId = 1;\n          }\n          return id;\n        };\n\n        /**\n            * getLastMessageId\n            * @return unsigned int\n            */\n        MqttClient.prototype.getLastMessageId = function () {\n          return this.nextId === 1 ? 65535 : this.nextId - 1;\n        };\n\n        /**\n            * _resubscribe\n            * @api private\n            */\n        MqttClient.prototype._resubscribe = function (connack) {\n          var _resubscribeTopicsKeys = Object.keys(this._resubscribeTopics);\n          if (!this._firstConnection && (\n          this.options.clean || this.options.protocolVersion === 5 && !connack.sessionPresent) &&\n          _resubscribeTopicsKeys.length > 0) {\n            if (this.options.resubscribe) {\n              if (this.options.protocolVersion === 5) {\n                for (var topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++) {\n                  var resubscribeTopic = {};\n                  resubscribeTopic[_resubscribeTopicsKeys[topicI]] = this._resubscribeTopics[_resubscribeTopicsKeys[topicI]];\n                  resubscribeTopic.resubscribe = true;\n                  this.subscribe(resubscribeTopic, { properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]].properties });\n                }\n              } else {\n                this._resubscribeTopics.resubscribe = true;\n                this.subscribe(this._resubscribeTopics);\n              }\n            } else {\n              this._resubscribeTopics = {};\n            }\n          }\n\n          this._firstConnection = false;\n        };\n\n        /**\n            * _onConnect\n            *\n            * @api private\n            */\n        MqttClient.prototype._onConnect = function (packet) {\n          if (this.disconnected) {\n            this.emit('connect', packet);\n            return;\n          }\n\n          var that = this;\n\n          this._setupPingTimer();\n          this._resubscribe(packet);\n\n          this.connected = true;\n\n          function startStreamProcess() {\n            var outStore = that.outgoingStore.createStream();\n\n            function clearStoreProcessing() {\n              that._storeProcessing = false;\n              that._packetIdsDuringStoreProcessing = {};\n            }\n\n            that.once('close', remove);\n            outStore.on('error', function (err) {\n              clearStoreProcessing();\n              that.removeListener('close', remove);\n              that.emit('error', err);\n            });\n\n            function remove() {\n              outStore.destroy();\n              outStore = null;\n              clearStoreProcessing();\n            }\n\n            function storeDeliver() {\n              // edge case, we wrapped this twice\n              if (!outStore) {\n                return;\n              }\n              that._storeProcessing = true;\n\n              var packet = outStore.read(1);\n\n              var _cb;\n\n              if (!packet) {\n                // read when data is available in the future\n                outStore.once('readable', storeDeliver);\n                return;\n              }\n\n              // Skip already processed store packets\n              if (that._packetIdsDuringStoreProcessing[packet.messageId]) {\n                storeDeliver();\n                return;\n              }\n\n              // Avoid unnecessary stream read operations when disconnected\n              if (!that.disconnecting && !that.reconnectTimer) {\n                _cb = that.outgoing[packet.messageId] ? that.outgoing[packet.messageId].cb : null;\n                that.outgoing[packet.messageId] = {\n                  volatile: false,\n                  cb: function cb(err, status) {\n                    // Ensure that the original callback passed in to publish gets invoked\n                    if (_cb) {\n                      _cb(err, status);\n                    }\n\n                    storeDeliver();\n                  } };\n\n                that._packetIdsDuringStoreProcessing[packet.messageId] = true;\n                that._sendPacket(packet);\n              } else if (outStore.destroy) {\n                outStore.destroy();\n              }\n            }\n\n            outStore.on('end', function () {\n              var allProcessed = true;\n              for (var id in that._packetIdsDuringStoreProcessing) {\n                if (!that._packetIdsDuringStoreProcessing[id]) {\n                  allProcessed = false;\n                  break;\n                }\n              }\n              if (allProcessed) {\n                clearStoreProcessing();\n                that.removeListener('close', remove);\n                that.emit('connect', packet);\n              } else {\n                startStreamProcess();\n              }\n            });\n            storeDeliver();\n          }\n          // start flowing\n          startStreamProcess();\n        };\n\n        module.exports = MqttClient;\n\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, { \"./store\": 7, \"./validations\": 8, \"_process\": 92, \"events\": 13, \"inherits\": 80, \"mqtt-packet\": 84, \"readable-stream\": 108, \"reinterval\": 109, \"xtend\": 121 }], 2: [function (require, module, exports) {\n      (function (Buffer) {\n        'use strict';\n\n        var Transform = require('readable-stream').Transform;\n        var duplexify = require('duplexify');\n        var base64 = require('base64-js');\n\n        /* global FileReader */\n        var my;\n        var proxy;\n        var stream;\n        var isInitialized = false;\n\n        function buildProxy() {\n          var proxy = new Transform();\n          proxy._write = function (chunk, encoding, next) {\n            my.sendSocketMessage({\n              data: chunk.buffer,\n              success: function success() {\n                next();\n              },\n              fail: function fail() {\n                next(new Error());\n              } });\n\n          };\n          proxy._flush = function socketEnd(done) {\n            my.closeSocket({\n              success: function success() {\n                done();\n              } });\n\n          };\n\n          return proxy;\n        }\n\n        function setDefaultOpts(opts) {\n          if (!opts.hostname) {\n            opts.hostname = 'localhost';\n          }\n          if (!opts.path) {\n            opts.path = '/';\n          }\n\n          if (!opts.wsOptions) {\n            opts.wsOptions = {};\n          }\n        }\n\n        function buildUrl(opts, client) {\n          var protocol = opts.protocol === 'alis' ? 'wss' : 'ws';\n          var url = protocol + '://' + opts.hostname + opts.path;\n          if (opts.port && opts.port !== 80 && opts.port !== 443) {\n            url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n          }\n          if (typeof opts.transformWsUrl === 'function') {\n            url = opts.transformWsUrl(url, opts, client);\n          }\n          return url;\n        }\n\n        function bindEventHandler() {\n          if (isInitialized) return;\n\n          isInitialized = true;\n\n          my.onSocketOpen(function () {\n            stream.setReadable(proxy);\n            stream.setWritable(proxy);\n            stream.emit('connect');\n          });\n\n          my.onSocketMessage(function (res) {\n            if (typeof res.data === 'string') {\n              var array = base64.toByteArray(res.data);\n              var buffer = Buffer.from(array);\n              proxy.push(buffer);\n            } else {\n              var reader = new FileReader();\n              reader.addEventListener('load', function () {\n                var data = reader.result;\n\n                if (data instanceof ArrayBuffer) data = Buffer.from(data);else\n                data = Buffer.from(data, 'utf8');\n                proxy.push(data);\n              });\n              reader.readAsArrayBuffer(res.data);\n            }\n          });\n\n          my.onSocketClose(function () {\n            stream.end();\n            stream.destroy();\n          });\n\n          my.onSocketError(function (res) {\n            stream.destroy(res);\n          });\n        }\n\n        function buildStream(client, opts) {\n          opts.hostname = opts.hostname || opts.host;\n\n          if (!opts.hostname) {\n            throw new Error('Could not determine host. Specify host manually.');\n          }\n\n          var websocketSubProtocol =\n          opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ?\n          'mqttv3.1' :\n          'mqtt';\n\n          setDefaultOpts(opts);\n\n          var url = buildUrl(opts, client);\n          my = opts.my;\n          my.connectSocket({\n            url: url,\n            protocols: websocketSubProtocol });\n\n\n          proxy = buildProxy();\n          stream = duplexify.obj();\n\n          bindEventHandler();\n\n          return stream;\n        }\n\n        module.exports = buildStream;\n\n      }).call(this, require(\"buffer\").Buffer);\n    }, { \"base64-js\": 10, \"buffer\": 12, \"duplexify\": 17, \"readable-stream\": 108 }], 3: [function (require, module, exports) {\n      'use strict';\n      var net = require('net');\n\n      /*\n                                  variables port and host can be removed since\n                                  you have all required information in opts object\n                                */\n      function buildBuilder(client, opts) {\n        var port, host;\n        opts.port = opts.port || 1883;\n        opts.hostname = opts.hostname || opts.host || 'localhost';\n\n        port = opts.port;\n        host = opts.hostname;\n\n        return net.createConnection(port, host);\n      }\n\n      module.exports = buildBuilder;\n\n    }, { \"net\": 11 }], 4: [function (require, module, exports) {\n      'use strict';\n      var tls = require('tls');\n\n      function buildBuilder(mqttClient, opts) {\n        var connection;\n        opts.port = opts.port || 8883;\n        opts.host = opts.hostname || opts.host || 'localhost';\n\n        opts.rejectUnauthorized = opts.rejectUnauthorized !== false;\n\n        delete opts.path;\n\n        connection = tls.connect(opts);\n        /* eslint no-use-before-define: [2, \"nofunc\"] */\n        connection.on('secureConnect', function () {\n          if (opts.rejectUnauthorized && !connection.authorized) {\n            connection.emit('error', new Error('TLS not authorized'));\n          } else {\n            connection.removeListener('error', handleTLSerrors);\n          }\n        });\n\n        function handleTLSerrors(err) {\n          // How can I get verify this error is a tls error?\n          if (opts.rejectUnauthorized) {\n            mqttClient.emit('error', err);\n          }\n\n          // close this connection to match the behaviour of net\n          // otherwise all we get is an error from the connection\n          // and close event doesn't fire. This is a work around\n          // to enable the reconnect code to work the same as with\n          // net.createConnection\n          connection.end();\n        }\n\n        connection.on('error', handleTLSerrors);\n        return connection;\n      }\n\n      module.exports = buildBuilder;\n\n    }, { \"tls\": 11 }], 5: [function (require, module, exports) {\n      (function (process) {\n        'use strict';\n\n        var websocket = require('websocket-stream');\n        var urlModule = require('url');\n        var WSS_OPTIONS = [\n        'rejectUnauthorized',\n        'ca',\n        'cert',\n        'key',\n        'pfx',\n        'passphrase'];\n\n        var IS_BROWSER = process.title === 'browser';\n\n        function buildUrl(opts, client) {\n          var url = opts.protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n          if (typeof opts.transformWsUrl === 'function') {\n            url = opts.transformWsUrl(url, opts, client);\n          }\n          return url;\n        }\n\n        function setDefaultOpts(opts) {\n          if (!opts.hostname) {\n            opts.hostname = 'localhost';\n          }\n          if (!opts.port) {\n            if (opts.protocol === 'wss') {\n              opts.port = 443;\n            } else {\n              opts.port = 80;\n            }\n          }\n          if (!opts.path) {\n            opts.path = '/';\n          }\n\n          if (!opts.wsOptions) {\n            opts.wsOptions = {};\n          }\n          if (!IS_BROWSER && opts.protocol === 'wss') {\n            // Add cert/key/ca etc options\n            WSS_OPTIONS.forEach(function (prop) {\n              if (opts.hasOwnProperty(prop) && !opts.wsOptions.hasOwnProperty(prop)) {\n                opts.wsOptions[prop] = opts[prop];\n              }\n            });\n          }\n        }\n\n        function createWebSocket(client, opts) {\n          var websocketSubProtocol =\n          opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ?\n          'mqttv3.1' :\n          'mqtt';\n\n          setDefaultOpts(opts);\n          var url = buildUrl(opts, client);\n          return websocket(url, [websocketSubProtocol], opts.wsOptions);\n        }\n\n        function buildBuilder(client, opts) {\n          return createWebSocket(client, opts);\n        }\n\n        function buildBuilderBrowser(client, opts) {\n          if (!opts.hostname) {\n            opts.hostname = opts.host;\n          }\n\n          if (!opts.hostname) {\n            // Throwing an error in a Web Worker if no `hostname` is given, because we\n            // can not determine the `hostname` automatically.  If connecting to\n            // localhost, please supply the `hostname` as an argument.\n            if (typeof document === 'undefined') {\n              throw new Error('Could not determine host. Specify host manually.');\n            }\n            var parsed = urlModule.parse(document.URL);\n            opts.hostname = parsed.hostname;\n\n            if (!opts.port) {\n              opts.port = parsed.port;\n            }\n          }\n          return createWebSocket(client, opts);\n        }\n\n        if (IS_BROWSER) {\n          module.exports = buildBuilderBrowser;\n        } else {\n          module.exports = buildBuilder;\n        }\n\n      }).call(this, require('_process'));\n    }, { \"_process\": 92, \"url\": 113, \"websocket-stream\": 118 }], 6: [function (require, module, exports) {\n      (function (process, Buffer) {\n        'use strict';\n\n        var Transform = require('readable-stream').Transform;\n        var duplexify = require('duplexify');\n\n        /* global wx */\n        var socketTask;\n        var proxy;\n        var stream;\n\n        function buildProxy() {\n          var proxy = new Transform();\n          proxy._write = function (chunk, encoding, next) {\n            socketTask.send({\n              data: chunk.buffer,\n              success: function success() {\n                next();\n              },\n              fail: function fail(errMsg) {\n                next(new Error(errMsg));\n              } });\n\n          };\n          proxy._flush = function socketEnd(done) {\n            socketTask.close({\n              success: function success() {\n                done();\n              } });\n\n          };\n\n          return proxy;\n        }\n\n        function setDefaultOpts(opts) {\n          if (!opts.hostname) {\n            opts.hostname = 'localhost';\n          }\n          if (!opts.path) {\n            opts.path = '/';\n          }\n\n          if (!opts.wsOptions) {\n            opts.wsOptions = {};\n          }\n        }\n\n        function buildUrl(opts, client) {\n          var protocol = opts.protocol === 'wxs' ? 'wss' : 'ws';\n          var url = protocol + '://' + opts.hostname + opts.path;\n          if (opts.port && opts.port !== 80 && opts.port !== 443) {\n            url = protocol + '://' + opts.hostname + ':' + opts.port + opts.path;\n          }\n          if (typeof opts.transformWsUrl === 'function') {\n            url = opts.transformWsUrl(url, opts, client);\n          }\n          return url;\n        }\n\n        function bindEventHandler() {\n          socketTask.onOpen(function () {\n            stream.setReadable(proxy);\n            stream.setWritable(proxy);\n            stream.emit('connect');\n          });\n\n          socketTask.onMessage(function (res) {\n            var data = res.data;\n\n            if (data instanceof ArrayBuffer) data = Buffer.from(data);else\n            data = Buffer.from(data, 'utf8');\n            proxy.push(data);\n          });\n\n          socketTask.onClose(function () {\n            stream.end();\n            stream.destroy();\n          });\n\n          socketTask.onError(function (res) {\n            stream.destroy(new Error(res.errMsg));\n          });\n        }\n\n        function buildStream(client, opts) {\n          opts.hostname = opts.hostname || opts.host;\n\n          if (!opts.hostname) {\n            throw new Error('Could not determine host. Specify host manually.');\n          }\n\n          var websocketSubProtocol =\n          opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3 ?\n          'mqttv3.1' :\n          'mqtt';\n\n          setDefaultOpts(opts);\n\n          var url = buildUrl(opts, client);\n          socketTask = wx.connectSocket({\n            url: url,\n            protocols: websocketSubProtocol });\n\n\n          proxy = buildProxy();\n          stream = duplexify.obj();\n          stream._destroy = function (err, cb) {\n            socketTask.close({\n              success: function success() {\n                cb && cb(err);\n              } });\n\n          };\n\n          var destroyRef = stream.destroy;\n          stream.destroy = function () {\n            stream.destroy = destroyRef;\n\n            var self = this;\n            process.nextTick(function () {\n              socketTask.close({\n                fail: function fail() {\n                  self._destroy(new Error());\n                } });\n\n            });\n          }.bind(stream);\n\n          bindEventHandler();\n\n          return stream;\n        }\n\n        module.exports = buildStream;\n\n      }).call(this, require('_process'), require(\"buffer\").Buffer);\n    }, { \"_process\": 92, \"buffer\": 12, \"duplexify\": 17, \"readable-stream\": 108 }], 7: [function (require, module, exports) {\n      (function (process) {\n        'use strict';\n\n        /**\n                       * Module dependencies\n                       */\n        var xtend = require('xtend');\n\n        var Readable = require('readable-stream').Readable;\n        var streamsOpts = { objectMode: true };\n        var defaultStoreOptions = {\n          clean: true };\n\n\n        /**\n                          * es6-map can preserve insertion order even if ES version is older.\n                          *\n                          * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map#Description\n                          * It should be noted that a Map which is a map of an object, especially\n                          * a dictionary of dictionaries, will only map to the object's insertion\n                          * order. In ES2015 this is ordered for objects but for older versions of\n                          * ES, this may be random and not ordered.\n                          *\n                          */\n        var Map = require('es6-map');\n\n        /**\n                                       * In-memory implementation of the message store\n                                       * This can actually be saved into files.\n                                       *\n                                       * @param {Object} [options] - store options\n                                       */\n        function Store(options) {\n          if (!(this instanceof Store)) {\n            return new Store(options);\n          }\n\n          this.options = options || {};\n\n          // Defaults\n          this.options = xtend(defaultStoreOptions, options);\n\n          this._inflights = new Map();\n        }\n\n        /**\n           * Adds a packet to the store, a packet is\n           * anything that has a messageId property.\n           *\n           */\n        Store.prototype.put = function (packet, cb) {\n          this._inflights.set(packet.messageId, packet);\n\n          if (cb) {\n            cb();\n          }\n\n          return this;\n        };\n\n        /**\n            * Creates a stream with all the packets in the store\n            *\n            */\n        Store.prototype.createStream = function () {\n          var stream = new Readable(streamsOpts);\n          var destroyed = false;\n          var values = [];\n          var i = 0;\n\n          this._inflights.forEach(function (value, key) {\n            values.push(value);\n          });\n\n          stream._read = function () {\n            if (!destroyed && i < values.length) {\n              this.push(values[i++]);\n            } else {\n              this.push(null);\n            }\n          };\n\n          stream.destroy = function () {\n            if (destroyed) {\n              return;\n            }\n\n            var self = this;\n\n            destroyed = true;\n\n            process.nextTick(function () {\n              self.emit('close');\n            });\n          };\n\n          return stream;\n        };\n\n        /**\n            * deletes a packet from the store.\n            */\n        Store.prototype.del = function (packet, cb) {\n          packet = this._inflights.get(packet.messageId);\n          if (packet) {\n            this._inflights.delete(packet.messageId);\n            cb(null, packet);\n          } else if (cb) {\n            cb(new Error('missing packet'));\n          }\n\n          return this;\n        };\n\n        /**\n            * get a packet from the store.\n            */\n        Store.prototype.get = function (packet, cb) {\n          packet = this._inflights.get(packet.messageId);\n          if (packet) {\n            cb(null, packet);\n          } else if (cb) {\n            cb(new Error('missing packet'));\n          }\n\n          return this;\n        };\n\n        /**\n            * Close the store\n            */\n        Store.prototype.close = function (cb) {\n          if (this.options.clean) {\n            this._inflights = null;\n          }\n          if (cb) {\n            cb();\n          }\n        };\n\n        module.exports = Store;\n\n      }).call(this, require('_process'));\n    }, { \"_process\": 92, \"es6-map\": 67, \"readable-stream\": 108, \"xtend\": 121 }], 8: [function (require, module, exports) {\n      'use strict';\n\n      /**\n                     * Validate a topic to see if it's valid or not.\n                     * A topic is valid if it follow below rules:\n                     * - Rule #1: If any part of the topic is not `+` or `#`, then it must not contain `+` and '#'\n                     * - Rule #2: Part `#` must be located at the end of the mailbox\n                     *\n                     * @param {String} topic - A topic\n                     * @returns {Boolean} If the topic is valid, returns true. Otherwise, returns false.\n                     */\n      function validateTopic(topic) {\n        var parts = topic.split('/');\n\n        for (var i = 0; i < parts.length; i++) {\n          if (parts[i] === '+') {\n            continue;\n          }\n\n          if (parts[i] === '#') {\n            // for Rule #2\n            return i === parts.length - 1;\n          }\n\n          if (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      /**\n         * Validate an array of topics to see if any of them is valid or not\n          * @param {Array} topics - Array of topics\n         * @returns {String} If the topics is valid, returns null. Otherwise, returns the invalid one\n         */\n      function validateTopics(topics) {\n        if (topics.length === 0) {\n          return 'empty_topic_list';\n        }\n        for (var i = 0; i < topics.length; i++) {\n          if (!validateTopic(topics[i])) {\n            return topics[i];\n          }\n        }\n        return null;\n      }\n\n      module.exports = {\n        validateTopics: validateTopics };\n\n\n    }, {}], 9: [function (require, module, exports) {\n      (function (process) {\n        'use strict';\n\n        var MqttClient = require('../client');\n        var Store = require('../store');\n        var url = require('url');\n        var xtend = require('xtend');\n        var protocols = {};\n\n        if (process.title !== 'browser') {\n          protocols.mqtt = require('./tcp');\n          protocols.tcp = require('./tcp');\n          protocols.ssl = require('./tls');\n          protocols.tls = require('./tls');\n          protocols.mqtts = require('./tls');\n        } else {\n          protocols.wx = require('./wx');\n          protocols.wxs = require('./wx');\n\n          protocols.ali = require('./ali');\n          protocols.alis = require('./ali');\n        }\n\n        protocols.ws = require('./ws');\n        protocols.wss = require('./ws');\n\n        /**\n                                          * Parse the auth attribute and merge username and password in the options object.\n                                          *\n                                          * @param {Object} [opts] option object\n                                          */\n        function parseAuthOptions(opts) {\n          var matches;\n          if (opts.auth) {\n            matches = opts.auth.match(/^(.+):(.+)$/);\n            if (matches) {\n              opts.username = matches[1];\n              opts.password = matches[2];\n            } else {\n              opts.username = opts.auth;\n            }\n          }\n        }\n\n        /**\n           * connect - connect to an MQTT broker.\n           *\n           * @param {String} [brokerUrl] - url of the broker, optional\n           * @param {Object} opts - see MqttClient#constructor\n           */\n        function connect(brokerUrl, opts) {\n          if (typeof brokerUrl === 'object' && !opts) {\n            opts = brokerUrl;\n            brokerUrl = null;\n          }\n\n          opts = opts || {};\n\n          if (brokerUrl) {\n            var parsed = url.parse(brokerUrl, true);\n            if (parsed.port != null) {\n              parsed.port = Number(parsed.port);\n            }\n\n            opts = xtend(parsed, opts);\n\n            if (opts.protocol === null) {\n              throw new Error('Missing protocol');\n            }\n            opts.protocol = opts.protocol.replace(/:$/, '');\n          }\n\n          // merge in the auth options if supplied\n          parseAuthOptions(opts);\n\n          // support clientId passed in the query string of the url\n          if (opts.query && typeof opts.query.clientId === 'string') {\n            opts.clientId = opts.query.clientId;\n          }\n\n          if (opts.cert && opts.key) {\n            if (opts.protocol) {\n              if (['mqtts', 'wss', 'wxs', 'alis'].indexOf(opts.protocol) === -1) {\n                switch (opts.protocol) {\n                  case 'mqtt':\n                    opts.protocol = 'mqtts';\n                    break;\n                  case 'ws':\n                    opts.protocol = 'wss';\n                    break;\n                  case 'wx':\n                    opts.protocol = 'wxs';\n                    break;\n                  case 'ali':\n                    opts.protocol = 'alis';\n                    break;\n                  default:\n                    throw new Error('Unknown protocol for secure connection: \"' + opts.protocol + '\"!');}\n\n              }\n            } else {\n              // don't know what protocol he want to use, mqtts or wss\n              throw new Error('Missing secure protocol key');\n            }\n          }\n\n          if (!protocols[opts.protocol]) {\n            var isSecure = ['mqtts', 'wss'].indexOf(opts.protocol) !== -1;\n            opts.protocol = [\n            'mqtt',\n            'mqtts',\n            'ws',\n            'wss',\n            'wx',\n            'wxs',\n            'ali',\n            'alis'].\n            filter(function (key, index) {\n              if (isSecure && index % 2 === 0) {\n                // Skip insecure protocols when requesting a secure one.\n                return false;\n              }\n              return typeof protocols[key] === 'function';\n            })[0];\n          }\n\n          if (opts.clean === false && !opts.clientId) {\n            throw new Error('Missing clientId for unclean clients');\n          }\n\n          if (opts.protocol) {\n            opts.defaultProtocol = opts.protocol;\n          }\n\n          function wrapper(client) {\n            if (opts.servers) {\n              if (!client._reconnectCount || client._reconnectCount === opts.servers.length) {\n                client._reconnectCount = 0;\n              }\n\n              opts.host = opts.servers[client._reconnectCount].host;\n              opts.port = opts.servers[client._reconnectCount].port;\n              opts.protocol = !opts.servers[client._reconnectCount].protocol ? opts.defaultProtocol : opts.servers[client._reconnectCount].protocol;\n              opts.hostname = opts.host;\n\n              client._reconnectCount++;\n            }\n\n            return protocols[opts.protocol](client, opts);\n          }\n\n          return new MqttClient(wrapper, opts);\n        }\n\n        module.exports = connect;\n        module.exports.connect = connect;\n        module.exports.MqttClient = MqttClient;\n        module.exports.Store = Store;\n\n      }).call(this, require('_process'));\n    }, { \"../client\": 1, \"../store\": 7, \"./ali\": 2, \"./tcp\": 3, \"./tls\": 4, \"./ws\": 5, \"./wx\": 6, \"_process\": 92, \"url\": 113, \"xtend\": 121 }], 10: [function (require, module, exports) {\n      'use strict';\n\n      exports.byteLength = byteLength;\n      exports.toByteArray = toByteArray;\n      exports.fromByteArray = fromByteArray;\n\n      var lookup = [];\n      var revLookup = [];\n      var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n\n      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n      for (var i = 0, len = code.length; i < len; ++i) {\n        lookup[i] = code[i];\n        revLookup[code.charCodeAt(i)] = i;\n      }\n\n      // Support decoding URL-safe base64 strings, as Node.js does.\n      // See: https://en.wikipedia.org/wiki/Base64#URL_applications\n      revLookup['-'.charCodeAt(0)] = 62;\n      revLookup['_'.charCodeAt(0)] = 63;\n\n      function getLens(b64) {\n        var len = b64.length;\n\n        if (len % 4 > 0) {\n          throw new Error('Invalid string. Length must be a multiple of 4');\n        }\n\n        // Trim off extra bytes after placeholder bytes are found\n        // See: https://github.com/beatgammit/base64-js/issues/42\n        var validLen = b64.indexOf('=');\n        if (validLen === -1) validLen = len;\n\n        var placeHoldersLen = validLen === len ?\n        0 :\n        4 - validLen % 4;\n\n        return [validLen, placeHoldersLen];\n      }\n\n      // base64 is 4/3 + up to two characters of the original data\n      function byteLength(b64) {\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n\n      function _byteLength(b64, validLen, placeHoldersLen) {\n        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n      }\n\n      function toByteArray(b64) {\n        var tmp;\n        var lens = getLens(b64);\n        var validLen = lens[0];\n        var placeHoldersLen = lens[1];\n\n        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n\n        var curByte = 0;\n\n        // if there are placeholders, only get up to the last complete 4 chars\n        var len = placeHoldersLen > 0 ?\n        validLen - 4 :\n        validLen;\n\n        for (var i = 0; i < len; i += 4) {\n          tmp =\n          revLookup[b64.charCodeAt(i)] << 18 |\n          revLookup[b64.charCodeAt(i + 1)] << 12 |\n          revLookup[b64.charCodeAt(i + 2)] << 6 |\n          revLookup[b64.charCodeAt(i + 3)];\n          arr[curByte++] = tmp >> 16 & 0xFF;\n          arr[curByte++] = tmp >> 8 & 0xFF;\n          arr[curByte++] = tmp & 0xFF;\n        }\n\n        if (placeHoldersLen === 2) {\n          tmp =\n          revLookup[b64.charCodeAt(i)] << 2 |\n          revLookup[b64.charCodeAt(i + 1)] >> 4;\n          arr[curByte++] = tmp & 0xFF;\n        }\n\n        if (placeHoldersLen === 1) {\n          tmp =\n          revLookup[b64.charCodeAt(i)] << 10 |\n          revLookup[b64.charCodeAt(i + 1)] << 4 |\n          revLookup[b64.charCodeAt(i + 2)] >> 2;\n          arr[curByte++] = tmp >> 8 & 0xFF;\n          arr[curByte++] = tmp & 0xFF;\n        }\n\n        return arr;\n      }\n\n      function tripletToBase64(num) {\n        return lookup[num >> 18 & 0x3F] +\n        lookup[num >> 12 & 0x3F] +\n        lookup[num >> 6 & 0x3F] +\n        lookup[num & 0x3F];\n      }\n\n      function encodeChunk(uint8, start, end) {\n        var tmp;\n        var output = [];\n        for (var i = start; i < end; i += 3) {\n          tmp =\n          (uint8[i] << 16 & 0xFF0000) + (\n          uint8[i + 1] << 8 & 0xFF00) + (\n          uint8[i + 2] & 0xFF);\n          output.push(tripletToBase64(tmp));\n        }\n        return output.join('');\n      }\n\n      function fromByteArray(uint8) {\n        var tmp;\n        var len = uint8.length;\n        var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n        var parts = [];\n        var maxChunkLength = 16383; // must be multiple of 3\n\n        // go through the array every three bytes, we'll deal with trailing stuff later\n        for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n          parts.push(encodeChunk(\n          uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n\n        }\n\n        // pad the end with zeros, but make sure to not forget the extra bytes\n        if (extraBytes === 1) {\n          tmp = uint8[len - 1];\n          parts.push(\n          lookup[tmp >> 2] +\n          lookup[tmp << 4 & 0x3F] +\n          '==');\n\n        } else if (extraBytes === 2) {\n          tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n          parts.push(\n          lookup[tmp >> 10] +\n          lookup[tmp >> 4 & 0x3F] +\n          lookup[tmp << 2 & 0x3F] +\n          '=');\n\n        }\n\n        return parts.join('');\n      }\n\n    }, {}], 11: [function (require, module, exports) {\n\n    }, {}], 12: [function (require, module, exports) {\n      /*!\n                                                       * The buffer module from node.js, for the browser.\n                                                       *\n                                                       * @author   Feross Aboukhadijeh <https://feross.org>\n                                                       * @license  MIT\n                                                       */\n      /* eslint-disable no-proto */\n\n      'use strict';\n\n      var base64 = require('base64-js');\n      var ieee754 = require('ieee754');\n\n      exports.Buffer = Buffer;\n      exports.SlowBuffer = SlowBuffer;\n      exports.INSPECT_MAX_BYTES = 50;\n\n      var K_MAX_LENGTH = 0x7fffffff;\n      exports.kMaxLength = K_MAX_LENGTH;\n\n      /**\n                                          * If `Buffer.TYPED_ARRAY_SUPPORT`:\n                                          *   === true    Use Uint8Array implementation (fastest)\n                                          *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n                                          *               implementation (most compatible, even IE6)\n                                          *\n                                          * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n                                          * Opera 11.6+, iOS 4.2+.\n                                          *\n                                          * We report that the browser does not support typed arrays if the are not subclassable\n                                          * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n                                          * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n                                          * for __proto__ and has a buggy typed array implementation.\n                                          */\n      Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n\n      if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n      typeof console.error === 'function') {\n        __f__(\"error\",\n        'This browser lacks typed array (Uint8Array) support which is required by ' +\n        '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.', \" at utils/mqttjs3/mqtt.js:2450\");\n\n      }\n\n      function typedArraySupport() {\n        // Can typed array instances can be augmented?\n        try {\n          var arr = new Uint8Array(1);\n          arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function foo() {return 42;} };\n          return arr.foo() === 42;\n        } catch (e) {\n          return false;\n        }\n      }\n\n      Object.defineProperty(Buffer.prototype, 'parent', {\n        enumerable: true,\n        get: function get() {\n          if (!Buffer.isBuffer(this)) return undefined;\n          return this.buffer;\n        } });\n\n\n      Object.defineProperty(Buffer.prototype, 'offset', {\n        enumerable: true,\n        get: function get() {\n          if (!Buffer.isBuffer(this)) return undefined;\n          return this.byteOffset;\n        } });\n\n\n      function createBuffer(length) {\n        if (length > K_MAX_LENGTH) {\n          throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n        }\n        // Return an augmented `Uint8Array` instance\n        var buf = new Uint8Array(length);\n        buf.__proto__ = Buffer.prototype;\n        return buf;\n      }\n\n      /**\n         * The Buffer constructor returns instances of `Uint8Array` that have their\n         * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n         * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n         * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n         * returns a single octet.\n         *\n         * The `Uint8Array` prototype remains unmodified.\n         */\n\n      function Buffer(arg, encodingOrOffset, length) {\n        // Common case.\n        if (typeof arg === 'number') {\n          if (typeof encodingOrOffset === 'string') {\n            throw new TypeError(\n            'The \"string\" argument must be of type string. Received type number');\n\n          }\n          return allocUnsafe(arg);\n        }\n        return from(arg, encodingOrOffset, length);\n      }\n\n      // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n      if (typeof Symbol !== 'undefined' && Symbol.species != null &&\n      Buffer[Symbol.species] === Buffer) {\n        Object.defineProperty(Buffer, Symbol.species, {\n          value: null,\n          configurable: true,\n          enumerable: false,\n          writable: false });\n\n      }\n\n      Buffer.poolSize = 8192; // not used by this implementation\n\n      function from(value, encodingOrOffset, length) {\n        if (typeof value === 'string') {\n          return fromString(value, encodingOrOffset);\n        }\n\n        if (ArrayBuffer.isView(value)) {\n          return fromArrayLike(value);\n        }\n\n        if (value == null) {\n          throw TypeError(\n          'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n          'or Array-like Object. Received type ' + typeof value);\n\n        }\n\n        if (isInstance(value, ArrayBuffer) ||\n        value && isInstance(value.buffer, ArrayBuffer)) {\n          return fromArrayBuffer(value, encodingOrOffset, length);\n        }\n\n        if (typeof value === 'number') {\n          throw new TypeError(\n          'The \"value\" argument must not be of type number. Received type number');\n\n        }\n\n        var valueOf = value.valueOf && value.valueOf();\n        if (valueOf != null && valueOf !== value) {\n          return Buffer.from(valueOf, encodingOrOffset, length);\n        }\n\n        var b = fromObject(value);\n        if (b) return b;\n\n        if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n        typeof value[Symbol.toPrimitive] === 'function') {\n          return Buffer.from(\n          value[Symbol.toPrimitive]('string'), encodingOrOffset, length);\n\n        }\n\n        throw new TypeError(\n        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n        'or Array-like Object. Received type ' + typeof value);\n\n      }\n\n      /**\n         * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n         * if value is a number.\n         * Buffer.from(str[, encoding])\n         * Buffer.from(array)\n         * Buffer.from(buffer)\n         * Buffer.from(arrayBuffer[, byteOffset[, length]])\n         **/\n      Buffer.from = function (value, encodingOrOffset, length) {\n        return from(value, encodingOrOffset, length);\n      };\n\n      // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n      // https://github.com/feross/buffer/pull/148\n      Buffer.prototype.__proto__ = Uint8Array.prototype;\n      Buffer.__proto__ = Uint8Array;\n\n      function assertSize(size) {\n        if (typeof size !== 'number') {\n          throw new TypeError('\"size\" argument must be of type number');\n        } else if (size < 0) {\n          throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n        }\n      }\n\n      function alloc(size, fill, encoding) {\n        assertSize(size);\n        if (size <= 0) {\n          return createBuffer(size);\n        }\n        if (fill !== undefined) {\n          // Only pay attention to encoding if it's a string. This\n          // prevents accidentally sending in a number that would\n          // be interpretted as a start offset.\n          return typeof encoding === 'string' ?\n          createBuffer(size).fill(fill, encoding) :\n          createBuffer(size).fill(fill);\n        }\n        return createBuffer(size);\n      }\n\n      /**\n         * Creates a new filled Buffer instance.\n         * alloc(size[, fill[, encoding]])\n         **/\n      Buffer.alloc = function (size, fill, encoding) {\n        return alloc(size, fill, encoding);\n      };\n\n      function allocUnsafe(size) {\n        assertSize(size);\n        return createBuffer(size < 0 ? 0 : checked(size) | 0);\n      }\n\n      /**\n         * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n         * */\n      Buffer.allocUnsafe = function (size) {\n        return allocUnsafe(size);\n      };\n      /**\n          * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n          */\n      Buffer.allocUnsafeSlow = function (size) {\n        return allocUnsafe(size);\n      };\n\n      function fromString(string, encoding) {\n        if (typeof encoding !== 'string' || encoding === '') {\n          encoding = 'utf8';\n        }\n\n        if (!Buffer.isEncoding(encoding)) {\n          throw new TypeError('Unknown encoding: ' + encoding);\n        }\n\n        var length = byteLength(string, encoding) | 0;\n        var buf = createBuffer(length);\n\n        var actual = buf.write(string, encoding);\n\n        if (actual !== length) {\n          // Writing a hex string, for example, that contains invalid characters will\n          // cause everything after the first invalid character to be ignored. (e.g.\n          // 'abxxcd' will be treated as 'ab')\n          buf = buf.slice(0, actual);\n        }\n\n        return buf;\n      }\n\n      function fromArrayLike(array) {\n        var length = array.length < 0 ? 0 : checked(array.length) | 0;\n        var buf = createBuffer(length);\n        for (var i = 0; i < length; i += 1) {\n          buf[i] = array[i] & 255;\n        }\n        return buf;\n      }\n\n      function fromArrayBuffer(array, byteOffset, length) {\n        if (byteOffset < 0 || array.byteLength < byteOffset) {\n          throw new RangeError('\"offset\" is outside of buffer bounds');\n        }\n\n        if (array.byteLength < byteOffset + (length || 0)) {\n          throw new RangeError('\"length\" is outside of buffer bounds');\n        }\n\n        var buf;\n        if (byteOffset === undefined && length === undefined) {\n          buf = new Uint8Array(array);\n        } else if (length === undefined) {\n          buf = new Uint8Array(array, byteOffset);\n        } else {\n          buf = new Uint8Array(array, byteOffset, length);\n        }\n\n        // Return an augmented `Uint8Array` instance\n        buf.__proto__ = Buffer.prototype;\n        return buf;\n      }\n\n      function fromObject(obj) {\n        if (Buffer.isBuffer(obj)) {\n          var len = checked(obj.length) | 0;\n          var buf = createBuffer(len);\n\n          if (buf.length === 0) {\n            return buf;\n          }\n\n          obj.copy(buf, 0, 0, len);\n          return buf;\n        }\n\n        if (obj.length !== undefined) {\n          if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n            return createBuffer(0);\n          }\n          return fromArrayLike(obj);\n        }\n\n        if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n          return fromArrayLike(obj.data);\n        }\n      }\n\n      function checked(length) {\n        // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n        // length is NaN (which is otherwise coerced to zero.)\n        if (length >= K_MAX_LENGTH) {\n          throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n          'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n        }\n        return length | 0;\n      }\n\n      function SlowBuffer(length) {\n        if (+length != length) {// eslint-disable-line eqeqeq\n          length = 0;\n        }\n        return Buffer.alloc(+length);\n      }\n\n      Buffer.isBuffer = function isBuffer(b) {\n        return b != null && b._isBuffer === true &&\n        b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n      };\n\n      Buffer.compare = function compare(a, b) {\n        if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n        if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n        if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n          throw new TypeError(\n          'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n\n        }\n\n        if (a === b) return 0;\n\n        var x = a.length;\n        var y = b.length;\n\n        for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n          if (a[i] !== b[i]) {\n            x = a[i];\n            y = b[i];\n            break;\n          }\n        }\n\n        if (x < y) return -1;\n        if (y < x) return 1;\n        return 0;\n      };\n\n      Buffer.isEncoding = function isEncoding(encoding) {\n        switch (String(encoding).toLowerCase()) {\n          case 'hex':\n          case 'utf8':\n          case 'utf-8':\n          case 'ascii':\n          case 'latin1':\n          case 'binary':\n          case 'base64':\n          case 'ucs2':\n          case 'ucs-2':\n          case 'utf16le':\n          case 'utf-16le':\n            return true;\n          default:\n            return false;}\n\n      };\n\n      Buffer.concat = function concat(list, length) {\n        if (!Array.isArray(list)) {\n          throw new TypeError('\"list\" argument must be an Array of Buffers');\n        }\n\n        if (list.length === 0) {\n          return Buffer.alloc(0);\n        }\n\n        var i;\n        if (length === undefined) {\n          length = 0;\n          for (i = 0; i < list.length; ++i) {\n            length += list[i].length;\n          }\n        }\n\n        var buffer = Buffer.allocUnsafe(length);\n        var pos = 0;\n        for (i = 0; i < list.length; ++i) {\n          var buf = list[i];\n          if (isInstance(buf, Uint8Array)) {\n            buf = Buffer.from(buf);\n          }\n          if (!Buffer.isBuffer(buf)) {\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          }\n          buf.copy(buffer, pos);\n          pos += buf.length;\n        }\n        return buffer;\n      };\n\n      function byteLength(string, encoding) {\n        if (Buffer.isBuffer(string)) {\n          return string.length;\n        }\n        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n          return string.byteLength;\n        }\n        if (typeof string !== 'string') {\n          throw new TypeError(\n          'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n          'Received type ' + typeof string);\n\n        }\n\n        var len = string.length;\n        var mustMatch = arguments.length > 2 && arguments[2] === true;\n        if (!mustMatch && len === 0) return 0;\n\n        // Use a for loop to avoid recursion\n        var loweredCase = false;\n        for (;;) {\n          switch (encoding) {\n            case 'ascii':\n            case 'latin1':\n            case 'binary':\n              return len;\n            case 'utf8':\n            case 'utf-8':\n              return utf8ToBytes(string).length;\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n              return len * 2;\n            case 'hex':\n              return len >>> 1;\n            case 'base64':\n              return base64ToBytes(string).length;\n            default:\n              if (loweredCase) {\n                return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n              }\n              encoding = ('' + encoding).toLowerCase();\n              loweredCase = true;}\n\n        }\n      }\n      Buffer.byteLength = byteLength;\n\n      function slowToString(encoding, start, end) {\n        var loweredCase = false;\n\n        // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n        // property of a typed array.\n\n        // This behaves neither like String nor Uint8Array in that we set start/end\n        // to their upper/lower bounds if the value passed is out of range.\n        // undefined is handled specially as per ECMA-262 6th Edition,\n        // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n        if (start === undefined || start < 0) {\n          start = 0;\n        }\n        // Return early if start > this.length. Done here to prevent potential uint32\n        // coercion fail below.\n        if (start > this.length) {\n          return '';\n        }\n\n        if (end === undefined || end > this.length) {\n          end = this.length;\n        }\n\n        if (end <= 0) {\n          return '';\n        }\n\n        // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n        end >>>= 0;\n        start >>>= 0;\n\n        if (end <= start) {\n          return '';\n        }\n\n        if (!encoding) encoding = 'utf8';\n\n        while (true) {\n          switch (encoding) {\n            case 'hex':\n              return hexSlice(this, start, end);\n\n            case 'utf8':\n            case 'utf-8':\n              return utf8Slice(this, start, end);\n\n            case 'ascii':\n              return asciiSlice(this, start, end);\n\n            case 'latin1':\n            case 'binary':\n              return latin1Slice(this, start, end);\n\n            case 'base64':\n              return base64Slice(this, start, end);\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n              return utf16leSlice(this, start, end);\n\n            default:\n              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n              encoding = (encoding + '').toLowerCase();\n              loweredCase = true;}\n\n        }\n      }\n\n      // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n      // to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n      // reliably in a browserify context because there could be multiple different\n      // copies of the 'buffer' package in use. This method works even for Buffer\n      // instances that were created from another copy of the `buffer` package.\n      // See: https://github.com/feross/buffer/issues/154\n      Buffer.prototype._isBuffer = true;\n\n      function swap(b, n, m) {\n        var i = b[n];\n        b[n] = b[m];\n        b[m] = i;\n      }\n\n      Buffer.prototype.swap16 = function swap16() {\n        var len = this.length;\n        if (len % 2 !== 0) {\n          throw new RangeError('Buffer size must be a multiple of 16-bits');\n        }\n        for (var i = 0; i < len; i += 2) {\n          swap(this, i, i + 1);\n        }\n        return this;\n      };\n\n      Buffer.prototype.swap32 = function swap32() {\n        var len = this.length;\n        if (len % 4 !== 0) {\n          throw new RangeError('Buffer size must be a multiple of 32-bits');\n        }\n        for (var i = 0; i < len; i += 4) {\n          swap(this, i, i + 3);\n          swap(this, i + 1, i + 2);\n        }\n        return this;\n      };\n\n      Buffer.prototype.swap64 = function swap64() {\n        var len = this.length;\n        if (len % 8 !== 0) {\n          throw new RangeError('Buffer size must be a multiple of 64-bits');\n        }\n        for (var i = 0; i < len; i += 8) {\n          swap(this, i, i + 7);\n          swap(this, i + 1, i + 6);\n          swap(this, i + 2, i + 5);\n          swap(this, i + 3, i + 4);\n        }\n        return this;\n      };\n\n      Buffer.prototype.toString = function toString() {\n        var length = this.length;\n        if (length === 0) return '';\n        if (arguments.length === 0) return utf8Slice(this, 0, length);\n        return slowToString.apply(this, arguments);\n      };\n\n      Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n\n      Buffer.prototype.equals = function equals(b) {\n        if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n        if (this === b) return true;\n        return Buffer.compare(this, b) === 0;\n      };\n\n      Buffer.prototype.inspect = function inspect() {\n        var str = '';\n        var max = exports.INSPECT_MAX_BYTES;\n        str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n        if (this.length > max) str += ' ... ';\n        return '<Buffer ' + str + '>';\n      };\n\n      Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n        if (isInstance(target, Uint8Array)) {\n          target = Buffer.from(target, target.offset, target.byteLength);\n        }\n        if (!Buffer.isBuffer(target)) {\n          throw new TypeError(\n          'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n          'Received type ' + typeof target);\n\n        }\n\n        if (start === undefined) {\n          start = 0;\n        }\n        if (end === undefined) {\n          end = target ? target.length : 0;\n        }\n        if (thisStart === undefined) {\n          thisStart = 0;\n        }\n        if (thisEnd === undefined) {\n          thisEnd = this.length;\n        }\n\n        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n          throw new RangeError('out of range index');\n        }\n\n        if (thisStart >= thisEnd && start >= end) {\n          return 0;\n        }\n        if (thisStart >= thisEnd) {\n          return -1;\n        }\n        if (start >= end) {\n          return 1;\n        }\n\n        start >>>= 0;\n        end >>>= 0;\n        thisStart >>>= 0;\n        thisEnd >>>= 0;\n\n        if (this === target) return 0;\n\n        var x = thisEnd - thisStart;\n        var y = end - start;\n        var len = Math.min(x, y);\n\n        var thisCopy = this.slice(thisStart, thisEnd);\n        var targetCopy = target.slice(start, end);\n\n        for (var i = 0; i < len; ++i) {\n          if (thisCopy[i] !== targetCopy[i]) {\n            x = thisCopy[i];\n            y = targetCopy[i];\n            break;\n          }\n        }\n\n        if (x < y) return -1;\n        if (y < x) return 1;\n        return 0;\n      };\n\n      // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n      // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n      //\n      // Arguments:\n      // - buffer - a Buffer to search\n      // - val - a string, Buffer, or number\n      // - byteOffset - an index into `buffer`; will be clamped to an int32\n      // - encoding - an optional encoding, relevant is val is a string\n      // - dir - true for indexOf, false for lastIndexOf\n      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n        // Empty buffer means no match\n        if (buffer.length === 0) return -1;\n\n        // Normalize byteOffset\n        if (typeof byteOffset === 'string') {\n          encoding = byteOffset;\n          byteOffset = 0;\n        } else if (byteOffset > 0x7fffffff) {\n          byteOffset = 0x7fffffff;\n        } else if (byteOffset < -0x80000000) {\n          byteOffset = -0x80000000;\n        }\n        byteOffset = +byteOffset; // Coerce to Number.\n        if (numberIsNaN(byteOffset)) {\n          // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n          byteOffset = dir ? 0 : buffer.length - 1;\n        }\n\n        // Normalize byteOffset: negative offsets start from the end of the buffer\n        if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n        if (byteOffset >= buffer.length) {\n          if (dir) return -1;else\n          byteOffset = buffer.length - 1;\n        } else if (byteOffset < 0) {\n          if (dir) byteOffset = 0;else\n          return -1;\n        }\n\n        // Normalize val\n        if (typeof val === 'string') {\n          val = Buffer.from(val, encoding);\n        }\n\n        // Finally, search either indexOf (if dir is true) or lastIndexOf\n        if (Buffer.isBuffer(val)) {\n          // Special case: looking for empty string/buffer always fails\n          if (val.length === 0) {\n            return -1;\n          }\n          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n        } else if (typeof val === 'number') {\n          val = val & 0xFF; // Search for a byte value [0-255]\n          if (typeof Uint8Array.prototype.indexOf === 'function') {\n            if (dir) {\n              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n            } else {\n              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n            }\n          }\n          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n        }\n\n        throw new TypeError('val must be string, number or Buffer');\n      }\n\n      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n        var indexSize = 1;\n        var arrLength = arr.length;\n        var valLength = val.length;\n\n        if (encoding !== undefined) {\n          encoding = String(encoding).toLowerCase();\n          if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n          encoding === 'utf16le' || encoding === 'utf-16le') {\n            if (arr.length < 2 || val.length < 2) {\n              return -1;\n            }\n            indexSize = 2;\n            arrLength /= 2;\n            valLength /= 2;\n            byteOffset /= 2;\n          }\n        }\n\n        function read(buf, i) {\n          if (indexSize === 1) {\n            return buf[i];\n          } else {\n            return buf.readUInt16BE(i * indexSize);\n          }\n        }\n\n        var i;\n        if (dir) {\n          var foundIndex = -1;\n          for (i = byteOffset; i < arrLength; i++) {\n            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n              if (foundIndex === -1) foundIndex = i;\n              if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n            } else {\n              if (foundIndex !== -1) i -= i - foundIndex;\n              foundIndex = -1;\n            }\n          }\n        } else {\n          if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n          for (i = byteOffset; i >= 0; i--) {\n            var found = true;\n            for (var j = 0; j < valLength; j++) {\n              if (read(arr, i + j) !== read(val, j)) {\n                found = false;\n                break;\n              }\n            }\n            if (found) return i;\n          }\n        }\n\n        return -1;\n      }\n\n      Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n        return this.indexOf(val, byteOffset, encoding) !== -1;\n      };\n\n      Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n      };\n\n      Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n      };\n\n      function hexWrite(buf, string, offset, length) {\n        offset = Number(offset) || 0;\n        var remaining = buf.length - offset;\n        if (!length) {\n          length = remaining;\n        } else {\n          length = Number(length);\n          if (length > remaining) {\n            length = remaining;\n          }\n        }\n\n        var strLen = string.length;\n\n        if (length > strLen / 2) {\n          length = strLen / 2;\n        }\n        for (var i = 0; i < length; ++i) {\n          var parsed = parseInt(string.substr(i * 2, 2), 16);\n          if (numberIsNaN(parsed)) return i;\n          buf[offset + i] = parsed;\n        }\n        return i;\n      }\n\n      function utf8Write(buf, string, offset, length) {\n        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n      }\n\n      function asciiWrite(buf, string, offset, length) {\n        return blitBuffer(asciiToBytes(string), buf, offset, length);\n      }\n\n      function latin1Write(buf, string, offset, length) {\n        return asciiWrite(buf, string, offset, length);\n      }\n\n      function base64Write(buf, string, offset, length) {\n        return blitBuffer(base64ToBytes(string), buf, offset, length);\n      }\n\n      function ucs2Write(buf, string, offset, length) {\n        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n      }\n\n      Buffer.prototype.write = function write(string, offset, length, encoding) {\n        // Buffer#write(string)\n        if (offset === undefined) {\n          encoding = 'utf8';\n          length = this.length;\n          offset = 0;\n          // Buffer#write(string, encoding)\n        } else if (length === undefined && typeof offset === 'string') {\n          encoding = offset;\n          length = this.length;\n          offset = 0;\n          // Buffer#write(string, offset[, length][, encoding])\n        } else if (isFinite(offset)) {\n          offset = offset >>> 0;\n          if (isFinite(length)) {\n            length = length >>> 0;\n            if (encoding === undefined) encoding = 'utf8';\n          } else {\n            encoding = length;\n            length = undefined;\n          }\n        } else {\n          throw new Error(\n          'Buffer.write(string, encoding, offset[, length]) is no longer supported');\n\n        }\n\n        var remaining = this.length - offset;\n        if (length === undefined || length > remaining) length = remaining;\n\n        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n          throw new RangeError('Attempt to write outside buffer bounds');\n        }\n\n        if (!encoding) encoding = 'utf8';\n\n        var loweredCase = false;\n        for (;;) {\n          switch (encoding) {\n            case 'hex':\n              return hexWrite(this, string, offset, length);\n\n            case 'utf8':\n            case 'utf-8':\n              return utf8Write(this, string, offset, length);\n\n            case 'ascii':\n              return asciiWrite(this, string, offset, length);\n\n            case 'latin1':\n            case 'binary':\n              return latin1Write(this, string, offset, length);\n\n            case 'base64':\n              // Warning: maxLength not taken into account in base64Write\n              return base64Write(this, string, offset, length);\n\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n              return ucs2Write(this, string, offset, length);\n\n            default:\n              if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n              encoding = ('' + encoding).toLowerCase();\n              loweredCase = true;}\n\n        }\n      };\n\n      Buffer.prototype.toJSON = function toJSON() {\n        return {\n          type: 'Buffer',\n          data: Array.prototype.slice.call(this._arr || this, 0) };\n\n      };\n\n      function base64Slice(buf, start, end) {\n        if (start === 0 && end === buf.length) {\n          return base64.fromByteArray(buf);\n        } else {\n          return base64.fromByteArray(buf.slice(start, end));\n        }\n      }\n\n      function utf8Slice(buf, start, end) {\n        end = Math.min(buf.length, end);\n        var res = [];\n\n        var i = start;\n        while (i < end) {\n          var firstByte = buf[i];\n          var codePoint = null;\n          var bytesPerSequence = firstByte > 0xEF ? 4 :\n          firstByte > 0xDF ? 3 :\n          firstByte > 0xBF ? 2 :\n          1;\n\n          if (i + bytesPerSequence <= end) {\n            var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n            switch (bytesPerSequence) {\n              case 1:\n                if (firstByte < 0x80) {\n                  codePoint = firstByte;\n                }\n                break;\n              case 2:\n                secondByte = buf[i + 1];\n                if ((secondByte & 0xC0) === 0x80) {\n                  tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n                  if (tempCodePoint > 0x7F) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 3:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                  tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n                  if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                    codePoint = tempCodePoint;\n                  }\n                }\n                break;\n              case 4:\n                secondByte = buf[i + 1];\n                thirdByte = buf[i + 2];\n                fourthByte = buf[i + 3];\n                if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                  tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n                  if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                    codePoint = tempCodePoint;\n                  }\n                }}\n\n          }\n\n          if (codePoint === null) {\n            // we did not generate a valid codePoint so insert a\n            // replacement char (U+FFFD) and advance only 1 byte\n            codePoint = 0xFFFD;\n            bytesPerSequence = 1;\n          } else if (codePoint > 0xFFFF) {\n            // encode to utf16 (surrogate pair dance)\n            codePoint -= 0x10000;\n            res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n            codePoint = 0xDC00 | codePoint & 0x3FF;\n          }\n\n          res.push(codePoint);\n          i += bytesPerSequence;\n        }\n\n        return decodeCodePointsArray(res);\n      }\n\n      // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n      // the lowest limit is Chrome, with 0x10000 args.\n      // We go 1 magnitude less, for safety\n      var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n      function decodeCodePointsArray(codePoints) {\n        var len = codePoints.length;\n        if (len <= MAX_ARGUMENTS_LENGTH) {\n          return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n        }\n\n        // Decode in chunks to avoid \"call stack size exceeded\".\n        var res = '';\n        var i = 0;\n        while (i < len) {\n          res += String.fromCharCode.apply(\n          String,\n          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n\n        }\n        return res;\n      }\n\n      function asciiSlice(buf, start, end) {\n        var ret = '';\n        end = Math.min(buf.length, end);\n\n        for (var i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i] & 0x7F);\n        }\n        return ret;\n      }\n\n      function latin1Slice(buf, start, end) {\n        var ret = '';\n        end = Math.min(buf.length, end);\n\n        for (var i = start; i < end; ++i) {\n          ret += String.fromCharCode(buf[i]);\n        }\n        return ret;\n      }\n\n      function hexSlice(buf, start, end) {\n        var len = buf.length;\n\n        if (!start || start < 0) start = 0;\n        if (!end || end < 0 || end > len) end = len;\n\n        var out = '';\n        for (var i = start; i < end; ++i) {\n          out += toHex(buf[i]);\n        }\n        return out;\n      }\n\n      function utf16leSlice(buf, start, end) {\n        var bytes = buf.slice(start, end);\n        var res = '';\n        for (var i = 0; i < bytes.length; i += 2) {\n          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n        }\n        return res;\n      }\n\n      Buffer.prototype.slice = function slice(start, end) {\n        var len = this.length;\n        start = ~~start;\n        end = end === undefined ? len : ~~end;\n\n        if (start < 0) {\n          start += len;\n          if (start < 0) start = 0;\n        } else if (start > len) {\n          start = len;\n        }\n\n        if (end < 0) {\n          end += len;\n          if (end < 0) end = 0;\n        } else if (end > len) {\n          end = len;\n        }\n\n        if (end < start) end = start;\n\n        var newBuf = this.subarray(start, end);\n        // Return an augmented `Uint8Array` instance\n        newBuf.__proto__ = Buffer.prototype;\n        return newBuf;\n      };\n\n      /*\n          * Need to make sure that buffer isn't trying to write out of bounds.\n          */\n      function checkOffset(offset, ext, length) {\n        if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n        if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n      }\n\n      Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n        var val = this[offset];\n        var mul = 1;\n        var i = 0;\n        while (++i < byteLength && (mul *= 0x100)) {\n          val += this[offset + i] * mul;\n        }\n\n        return val;\n      };\n\n      Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n          checkOffset(offset, byteLength, this.length);\n        }\n\n        var val = this[offset + --byteLength];\n        var mul = 1;\n        while (byteLength > 0 && (mul *= 0x100)) {\n          val += this[offset + --byteLength] * mul;\n        }\n\n        return val;\n      };\n\n      Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 1, this.length);\n        return this[offset];\n      };\n\n      Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        return this[offset] | this[offset + 1] << 8;\n      };\n\n      Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        return this[offset] << 8 | this[offset + 1];\n      };\n\n      Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n\n        return (this[offset] |\n        this[offset + 1] << 8 |\n        this[offset + 2] << 16) +\n        this[offset + 3] * 0x1000000;\n      };\n\n      Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n\n        return this[offset] * 0x1000000 + (\n        this[offset + 1] << 16 |\n        this[offset + 2] << 8 |\n        this[offset + 3]);\n      };\n\n      Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n        var val = this[offset];\n        var mul = 1;\n        var i = 0;\n        while (++i < byteLength && (mul *= 0x100)) {\n          val += this[offset + i] * mul;\n        }\n        mul *= 0x80;\n\n        if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n        return val;\n      };\n\n      Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n        var i = byteLength;\n        var mul = 1;\n        var val = this[offset + --i];\n        while (i > 0 && (mul *= 0x100)) {\n          val += this[offset + --i] * mul;\n        }\n        mul *= 0x80;\n\n        if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n        return val;\n      };\n\n      Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 1, this.length);\n        if (!(this[offset] & 0x80)) return this[offset];\n        return (0xff - this[offset] + 1) * -1;\n      };\n\n      Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        var val = this[offset] | this[offset + 1] << 8;\n        return val & 0x8000 ? val | 0xFFFF0000 : val;\n      };\n\n      Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 2, this.length);\n        var val = this[offset + 1] | this[offset] << 8;\n        return val & 0x8000 ? val | 0xFFFF0000 : val;\n      };\n\n      Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n\n        return this[offset] |\n        this[offset + 1] << 8 |\n        this[offset + 2] << 16 |\n        this[offset + 3] << 24;\n      };\n\n      Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n\n        return this[offset] << 24 |\n        this[offset + 1] << 16 |\n        this[offset + 2] << 8 |\n        this[offset + 3];\n      };\n\n      Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, true, 23, 4);\n      };\n\n      Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 4, this.length);\n        return ieee754.read(this, offset, false, 23, 4);\n      };\n\n      Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, true, 52, 8);\n      };\n\n      Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n        offset = offset >>> 0;\n        if (!noAssert) checkOffset(offset, 8, this.length);\n        return ieee754.read(this, offset, false, 52, 8);\n      };\n\n      function checkInt(buf, value, offset, ext, max, min) {\n        if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n        if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n        if (offset + ext > buf.length) throw new RangeError('Index out of range');\n      }\n\n      Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n          var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n          checkInt(this, value, offset, byteLength, maxBytes, 0);\n        }\n\n        var mul = 1;\n        var i = 0;\n        this[offset] = value & 0xFF;\n        while (++i < byteLength && (mul *= 0x100)) {\n          this[offset + i] = value / mul & 0xFF;\n        }\n\n        return offset + byteLength;\n      };\n\n      Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        byteLength = byteLength >>> 0;\n        if (!noAssert) {\n          var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n          checkInt(this, value, offset, byteLength, maxBytes, 0);\n        }\n\n        var i = byteLength - 1;\n        var mul = 1;\n        this[offset + i] = value & 0xFF;\n        while (--i >= 0 && (mul *= 0x100)) {\n          this[offset + i] = value / mul & 0xFF;\n        }\n\n        return offset + byteLength;\n      };\n\n      Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n        this[offset] = value & 0xff;\n        return offset + 1;\n      };\n\n      Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n\n      Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 0xff;\n        return offset + 2;\n      };\n\n      Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n        this[offset + 3] = value >>> 24;\n        this[offset + 2] = value >>> 16;\n        this[offset + 1] = value >>> 8;\n        this[offset] = value & 0xff;\n        return offset + 4;\n      };\n\n      Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 0xff;\n        return offset + 4;\n      };\n\n      Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          var limit = Math.pow(2, 8 * byteLength - 1);\n\n          checkInt(this, value, offset, byteLength, limit - 1, -limit);\n        }\n\n        var i = 0;\n        var mul = 1;\n        var sub = 0;\n        this[offset] = value & 0xFF;\n        while (++i < byteLength && (mul *= 0x100)) {\n          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n        }\n\n        return offset + byteLength;\n      };\n\n      Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          var limit = Math.pow(2, 8 * byteLength - 1);\n\n          checkInt(this, value, offset, byteLength, limit - 1, -limit);\n        }\n\n        var i = byteLength - 1;\n        var mul = 1;\n        var sub = 0;\n        this[offset + i] = value & 0xFF;\n        while (--i >= 0 && (mul *= 0x100)) {\n          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n            sub = 1;\n          }\n          this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n        }\n\n        return offset + byteLength;\n      };\n\n      Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n        if (value < 0) value = 0xff + value + 1;\n        this[offset] = value & 0xff;\n        return offset + 1;\n      };\n\n      Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        return offset + 2;\n      };\n\n      Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n        this[offset] = value >>> 8;\n        this[offset + 1] = value & 0xff;\n        return offset + 2;\n      };\n\n      Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n        this[offset] = value & 0xff;\n        this[offset + 1] = value >>> 8;\n        this[offset + 2] = value >>> 16;\n        this[offset + 3] = value >>> 24;\n        return offset + 4;\n      };\n\n      Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n        if (value < 0) value = 0xffffffff + value + 1;\n        this[offset] = value >>> 24;\n        this[offset + 1] = value >>> 16;\n        this[offset + 2] = value >>> 8;\n        this[offset + 3] = value & 0xff;\n        return offset + 4;\n      };\n\n      function checkIEEE754(buf, value, offset, ext, max, min) {\n        if (offset + ext > buf.length) throw new RangeError('Index out of range');\n        if (offset < 0) throw new RangeError('Index out of range');\n      }\n\n      function writeFloat(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 23, 4);\n        return offset + 4;\n      }\n\n      Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, true, noAssert);\n      };\n\n      Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n        return writeFloat(this, value, offset, false, noAssert);\n      };\n\n      function writeDouble(buf, value, offset, littleEndian, noAssert) {\n        value = +value;\n        offset = offset >>> 0;\n        if (!noAssert) {\n          checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);\n        }\n        ieee754.write(buf, value, offset, littleEndian, 52, 8);\n        return offset + 8;\n      }\n\n      Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, true, noAssert);\n      };\n\n      Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n        return writeDouble(this, value, offset, false, noAssert);\n      };\n\n      // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n      Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n        if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');\n        if (!start) start = 0;\n        if (!end && end !== 0) end = this.length;\n        if (targetStart >= target.length) targetStart = target.length;\n        if (!targetStart) targetStart = 0;\n        if (end > 0 && end < start) end = start;\n\n        // Copy 0 bytes; we're done\n        if (end === start) return 0;\n        if (target.length === 0 || this.length === 0) return 0;\n\n        // Fatal error conditions\n        if (targetStart < 0) {\n          throw new RangeError('targetStart out of bounds');\n        }\n        if (start < 0 || start >= this.length) throw new RangeError('Index out of range');\n        if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n        // Are we oob?\n        if (end > this.length) end = this.length;\n        if (target.length - targetStart < end - start) {\n          end = target.length - targetStart + start;\n        }\n\n        var len = end - start;\n\n        if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n          // Use built-in when available, missing from IE11\n          this.copyWithin(targetStart, start, end);\n        } else if (this === target && start < targetStart && targetStart < end) {\n          // descending copy from end\n          for (var i = len - 1; i >= 0; --i) {\n            target[i + targetStart] = this[i + start];\n          }\n        } else {\n          Uint8Array.prototype.set.call(\n          target,\n          this.subarray(start, end),\n          targetStart);\n\n        }\n\n        return len;\n      };\n\n      // Usage:\n      //    buffer.fill(number[, offset[, end]])\n      //    buffer.fill(buffer[, offset[, end]])\n      //    buffer.fill(string[, offset[, end]][, encoding])\n      Buffer.prototype.fill = function fill(val, start, end, encoding) {\n        // Handle string cases:\n        if (typeof val === 'string') {\n          if (typeof start === 'string') {\n            encoding = start;\n            start = 0;\n            end = this.length;\n          } else if (typeof end === 'string') {\n            encoding = end;\n            end = this.length;\n          }\n          if (encoding !== undefined && typeof encoding !== 'string') {\n            throw new TypeError('encoding must be a string');\n          }\n          if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n            throw new TypeError('Unknown encoding: ' + encoding);\n          }\n          if (val.length === 1) {\n            var code = val.charCodeAt(0);\n            if (encoding === 'utf8' && code < 128 ||\n            encoding === 'latin1') {\n              // Fast path: If `val` fits into a single byte, use that numeric value.\n              val = code;\n            }\n          }\n        } else if (typeof val === 'number') {\n          val = val & 255;\n        }\n\n        // Invalid ranges are not set to a default, so can range check early.\n        if (start < 0 || this.length < start || this.length < end) {\n          throw new RangeError('Out of range index');\n        }\n\n        if (end <= start) {\n          return this;\n        }\n\n        start = start >>> 0;\n        end = end === undefined ? this.length : end >>> 0;\n\n        if (!val) val = 0;\n\n        var i;\n        if (typeof val === 'number') {\n          for (i = start; i < end; ++i) {\n            this[i] = val;\n          }\n        } else {\n          var bytes = Buffer.isBuffer(val) ?\n          val :\n          Buffer.from(val, encoding);\n          var len = bytes.length;\n          if (len === 0) {\n            throw new TypeError('The value \"' + val +\n            '\" is invalid for argument \"value\"');\n          }\n          for (i = 0; i < end - start; ++i) {\n            this[i + start] = bytes[i % len];\n          }\n        }\n\n        return this;\n      };\n\n      // HELPER FUNCTIONS\n      // ================\n\n      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n\n      function base64clean(str) {\n        // Node takes equal signs as end of the Base64 encoding\n        str = str.split('=')[0];\n        // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n        str = str.trim().replace(INVALID_BASE64_RE, '');\n        // Node converts strings with length < 2 to ''\n        if (str.length < 2) return '';\n        // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n        while (str.length % 4 !== 0) {\n          str = str + '=';\n        }\n        return str;\n      }\n\n      function toHex(n) {\n        if (n < 16) return '0' + n.toString(16);\n        return n.toString(16);\n      }\n\n      function utf8ToBytes(string, units) {\n        units = units || Infinity;\n        var codePoint;\n        var length = string.length;\n        var leadSurrogate = null;\n        var bytes = [];\n\n        for (var i = 0; i < length; ++i) {\n          codePoint = string.charCodeAt(i);\n\n          // is surrogate component\n          if (codePoint > 0xD7FF && codePoint < 0xE000) {\n            // last char was a lead\n            if (!leadSurrogate) {\n              // no lead yet\n              if (codePoint > 0xDBFF) {\n                // unexpected trail\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                continue;\n              } else if (i + 1 === length) {\n                // unpaired lead\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                continue;\n              }\n\n              // valid lead\n              leadSurrogate = codePoint;\n\n              continue;\n            }\n\n            // 2 leads in a row\n            if (codePoint < 0xDC00) {\n              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n              leadSurrogate = codePoint;\n              continue;\n            }\n\n            // valid surrogate pair\n            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n          } else if (leadSurrogate) {\n            // valid bmp char, but last char was a lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          }\n\n          leadSurrogate = null;\n\n          // encode utf8\n          if (codePoint < 0x80) {\n            if ((units -= 1) < 0) break;\n            bytes.push(codePoint);\n          } else if (codePoint < 0x800) {\n            if ((units -= 2) < 0) break;\n            bytes.push(\n            codePoint >> 0x6 | 0xC0,\n            codePoint & 0x3F | 0x80);\n\n          } else if (codePoint < 0x10000) {\n            if ((units -= 3) < 0) break;\n            bytes.push(\n            codePoint >> 0xC | 0xE0,\n            codePoint >> 0x6 & 0x3F | 0x80,\n            codePoint & 0x3F | 0x80);\n\n          } else if (codePoint < 0x110000) {\n            if ((units -= 4) < 0) break;\n            bytes.push(\n            codePoint >> 0x12 | 0xF0,\n            codePoint >> 0xC & 0x3F | 0x80,\n            codePoint >> 0x6 & 0x3F | 0x80,\n            codePoint & 0x3F | 0x80);\n\n          } else {\n            throw new Error('Invalid code point');\n          }\n        }\n\n        return bytes;\n      }\n\n      function asciiToBytes(str) {\n        var byteArray = [];\n        for (var i = 0; i < str.length; ++i) {\n          // Node's code seems to be doing this and not & 0x7F..\n          byteArray.push(str.charCodeAt(i) & 0xFF);\n        }\n        return byteArray;\n      }\n\n      function utf16leToBytes(str, units) {\n        var c, hi, lo;\n        var byteArray = [];\n        for (var i = 0; i < str.length; ++i) {\n          if ((units -= 2) < 0) break;\n\n          c = str.charCodeAt(i);\n          hi = c >> 8;\n          lo = c % 256;\n          byteArray.push(lo);\n          byteArray.push(hi);\n        }\n\n        return byteArray;\n      }\n\n      function base64ToBytes(str) {\n        return base64.toByteArray(base64clean(str));\n      }\n\n      function blitBuffer(src, dst, offset, length) {\n        for (var i = 0; i < length; ++i) {\n          if (i + offset >= dst.length || i >= src.length) break;\n          dst[i + offset] = src[i];\n        }\n        return i;\n      }\n\n      // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n      // the `instanceof` check but they should be treated as of that type.\n      // See: https://github.com/feross/buffer/issues/166\n      function isInstance(obj, type) {\n        return obj instanceof type ||\n        obj != null && obj.constructor != null && obj.constructor.name != null &&\n        obj.constructor.name === type.name;\n      }\n      function numberIsNaN(obj) {\n        // For IE11 support\n        return obj !== obj; // eslint-disable-line no-self-compare\n      }\n\n    }, { \"base64-js\": 10, \"ieee754\": 79 }], 13: [function (require, module, exports) {\n      // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      var objectCreate = Object.create || objectCreatePolyfill;\n      var objectKeys = Object.keys || objectKeysPolyfill;\n      var bind = Function.prototype.bind || functionBindPolyfill;\n\n      function EventEmitter() {\n        if (!this._events || !Object.prototype.hasOwnProperty.call(this, '_events')) {\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n        }\n\n        this._maxListeners = this._maxListeners || undefined;\n      }\n      module.exports = EventEmitter;\n\n      // Backwards-compat with node 0.10.x\n      EventEmitter.EventEmitter = EventEmitter;\n\n      EventEmitter.prototype._events = undefined;\n      EventEmitter.prototype._maxListeners = undefined;\n\n      // By default EventEmitters will print a warning if more than 10 listeners are\n      // added to it. This is a useful default which helps finding memory leaks.\n      var defaultMaxListeners = 10;\n\n      var hasDefineProperty;\n      try {\n        var o = {};\n        if (Object.defineProperty) Object.defineProperty(o, 'x', { value: 0 });\n        hasDefineProperty = o.x === 0;\n      } catch (err) {hasDefineProperty = false;}\n      if (hasDefineProperty) {\n        Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n          enumerable: true,\n          get: function get() {\n            return defaultMaxListeners;\n          },\n          set: function set(arg) {\n            // check whether the input is a positive number (whose value is zero or\n            // greater and not a NaN).\n            if (typeof arg !== 'number' || arg < 0 || arg !== arg)\n            throw new TypeError('\"defaultMaxListeners\" must be a positive number');\n            defaultMaxListeners = arg;\n          } });\n\n      } else {\n        EventEmitter.defaultMaxListeners = defaultMaxListeners;\n      }\n\n      // Obviously not all Emitters should be limited to 10. This function allows\n      // that to be increased. Set to zero for unlimited.\n      EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n        if (typeof n !== 'number' || n < 0 || isNaN(n))\n        throw new TypeError('\"n\" argument must be a positive number');\n        this._maxListeners = n;\n        return this;\n      };\n\n      function $getMaxListeners(that) {\n        if (that._maxListeners === undefined)\n        return EventEmitter.defaultMaxListeners;\n        return that._maxListeners;\n      }\n\n      EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n        return $getMaxListeners(this);\n      };\n\n      // These standalone emit* functions are used to optimize calling of event\n      // handlers for fast cases because emit() itself often has a variable number of\n      // arguments and can be deoptimized because of that. These functions always have\n      // the same number of arguments and thus do not get deoptimized, so the code\n      // inside them can execute faster.\n      function emitNone(handler, isFn, self) {\n        if (isFn)\n        handler.call(self);else\n        {\n          var len = handler.length;\n          var listeners = arrayClone(handler, len);\n          for (var i = 0; i < len; ++i) {\n            listeners[i].call(self);}\n        }\n      }\n      function emitOne(handler, isFn, self, arg1) {\n        if (isFn)\n        handler.call(self, arg1);else\n        {\n          var len = handler.length;\n          var listeners = arrayClone(handler, len);\n          for (var i = 0; i < len; ++i) {\n            listeners[i].call(self, arg1);}\n        }\n      }\n      function emitTwo(handler, isFn, self, arg1, arg2) {\n        if (isFn)\n        handler.call(self, arg1, arg2);else\n        {\n          var len = handler.length;\n          var listeners = arrayClone(handler, len);\n          for (var i = 0; i < len; ++i) {\n            listeners[i].call(self, arg1, arg2);}\n        }\n      }\n      function emitThree(handler, isFn, self, arg1, arg2, arg3) {\n        if (isFn)\n        handler.call(self, arg1, arg2, arg3);else\n        {\n          var len = handler.length;\n          var listeners = arrayClone(handler, len);\n          for (var i = 0; i < len; ++i) {\n            listeners[i].call(self, arg1, arg2, arg3);}\n        }\n      }\n\n      function emitMany(handler, isFn, self, args) {\n        if (isFn)\n        handler.apply(self, args);else\n        {\n          var len = handler.length;\n          var listeners = arrayClone(handler, len);\n          for (var i = 0; i < len; ++i) {\n            listeners[i].apply(self, args);}\n        }\n      }\n\n      EventEmitter.prototype.emit = function emit(type) {\n        var er, handler, len, args, i, events;\n        var doError = type === 'error';\n\n        events = this._events;\n        if (events)\n        doError = doError && events.error == null;else\n        if (!doError)\n        return false;\n\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n          if (arguments.length > 1)\n          er = arguments[1];\n          if (er instanceof Error) {\n            throw er; // Unhandled 'error' event\n          } else {\n            // At least give some kind of context to the user\n            var err = new Error('Unhandled \"error\" event. (' + er + ')');\n            err.context = er;\n            throw err;\n          }\n          return false;\n        }\n\n        handler = events[type];\n\n        if (!handler)\n        return false;\n\n        var isFn = typeof handler === 'function';\n        len = arguments.length;\n        switch (len) {\n          // fast cases\n          case 1:\n            emitNone(handler, isFn, this);\n            break;\n          case 2:\n            emitOne(handler, isFn, this, arguments[1]);\n            break;\n          case 3:\n            emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n            break;\n          case 4:\n            emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n            break;\n          // slower\n          default:\n            args = new Array(len - 1);\n            for (i = 1; i < len; i++) {\n              args[i - 1] = arguments[i];}\n            emitMany(handler, isFn, this, args);}\n\n\n        return true;\n      };\n\n      function _addListener(target, type, listener, prepend) {\n        var m;\n        var events;\n        var existing;\n\n        if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n        events = target._events;\n        if (!events) {\n          events = target._events = objectCreate(null);\n          target._eventsCount = 0;\n        } else {\n          // To avoid recursion in the case that type === \"newListener\"! Before\n          // adding it to the listeners, first emit \"newListener\".\n          if (events.newListener) {\n            target.emit('newListener', type,\n            listener.listener ? listener.listener : listener);\n\n            // Re-assign `events` because a newListener handler could have caused the\n            // this._events to be assigned to a new object\n            events = target._events;\n          }\n          existing = events[type];\n        }\n\n        if (!existing) {\n          // Optimize the case of one listener. Don't need the extra array object.\n          existing = events[type] = listener;\n          ++target._eventsCount;\n        } else {\n          if (typeof existing === 'function') {\n            // Adding the second element, need to change to array.\n            existing = events[type] =\n            prepend ? [listener, existing] : [existing, listener];\n          } else {\n            // If we've already got an array, just append.\n            if (prepend) {\n              existing.unshift(listener);\n            } else {\n              existing.push(listener);\n            }\n          }\n\n          // Check for listener leak\n          if (!existing.warned) {\n            m = $getMaxListeners(target);\n            if (m && m > 0 && existing.length > m) {\n              existing.warned = true;\n              var w = new Error('Possible EventEmitter memory leak detected. ' +\n              existing.length + ' \"' + String(type) + '\" listeners ' +\n              'added. Use emitter.setMaxListeners() to ' +\n              'increase limit.');\n              w.name = 'MaxListenersExceededWarning';\n              w.emitter = target;\n              w.type = type;\n              w.count = existing.length;\n              if (typeof console === 'object' && console.warn) {\n                __f__(\"warn\", '%s: %s', w.name, w.message, \" at utils/mqttjs3/mqtt.js:4451\");\n              }\n            }\n          }\n        }\n\n        return target;\n      }\n\n      EventEmitter.prototype.addListener = function addListener(type, listener) {\n        return _addListener(this, type, listener, false);\n      };\n\n      EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\n      EventEmitter.prototype.prependListener =\n      function prependListener(type, listener) {\n        return _addListener(this, type, listener, true);\n      };\n\n      function onceWrapper() {\n        if (!this.fired) {\n          this.target.removeListener(this.type, this.wrapFn);\n          this.fired = true;\n          switch (arguments.length) {\n            case 0:\n              return this.listener.call(this.target);\n            case 1:\n              return this.listener.call(this.target, arguments[0]);\n            case 2:\n              return this.listener.call(this.target, arguments[0], arguments[1]);\n            case 3:\n              return this.listener.call(this.target, arguments[0], arguments[1],\n              arguments[2]);\n            default:\n              var args = new Array(arguments.length);\n              for (var i = 0; i < args.length; ++i) {\n                args[i] = arguments[i];}\n              this.listener.apply(this.target, args);}\n\n        }\n      }\n\n      function _onceWrap(target, type, listener) {\n        var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n        var wrapped = bind.call(onceWrapper, state);\n        wrapped.listener = listener;\n        state.wrapFn = wrapped;\n        return wrapped;\n      }\n\n      EventEmitter.prototype.once = function once(type, listener) {\n        if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n        this.on(type, _onceWrap(this, type, listener));\n        return this;\n      };\n\n      EventEmitter.prototype.prependOnceListener =\n      function prependOnceListener(type, listener) {\n        if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n        this.prependListener(type, _onceWrap(this, type, listener));\n        return this;\n      };\n\n      // Emits a 'removeListener' event if and only if the listener was removed.\n      EventEmitter.prototype.removeListener =\n      function removeListener(type, listener) {\n        var list, events, position, i, originalListener;\n\n        if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n        events = this._events;\n        if (!events)\n        return this;\n\n        list = events[type];\n        if (!list)\n        return this;\n\n        if (list === listener || list.listener === listener) {\n          if (--this._eventsCount === 0)\n          this._events = objectCreate(null);else\n          {\n            delete events[type];\n            if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n          }\n        } else if (typeof list !== 'function') {\n          position = -1;\n\n          for (i = list.length - 1; i >= 0; i--) {\n            if (list[i] === listener || list[i].listener === listener) {\n              originalListener = list[i].listener;\n              position = i;\n              break;\n            }\n          }\n\n          if (position < 0)\n          return this;\n\n          if (position === 0)\n          list.shift();else\n\n          spliceOne(list, position);\n\n          if (list.length === 1)\n          events[type] = list[0];\n\n          if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n        }\n\n        return this;\n      };\n\n      EventEmitter.prototype.removeAllListeners =\n      function removeAllListeners(type) {\n        var listeners, events, i;\n\n        events = this._events;\n        if (!events)\n        return this;\n\n        // not listening for removeListener, no need to emit\n        if (!events.removeListener) {\n          if (arguments.length === 0) {\n            this._events = objectCreate(null);\n            this._eventsCount = 0;\n          } else if (events[type]) {\n            if (--this._eventsCount === 0)\n            this._events = objectCreate(null);else\n\n            delete events[type];\n          }\n          return this;\n        }\n\n        // emit removeListener for all listeners on all events\n        if (arguments.length === 0) {\n          var keys = objectKeys(events);\n          var key;\n          for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n            if (key === 'removeListener') continue;\n            this.removeAllListeners(key);\n          }\n          this.removeAllListeners('removeListener');\n          this._events = objectCreate(null);\n          this._eventsCount = 0;\n          return this;\n        }\n\n        listeners = events[type];\n\n        if (typeof listeners === 'function') {\n          this.removeListener(type, listeners);\n        } else if (listeners) {\n          // LIFO order\n          for (i = listeners.length - 1; i >= 0; i--) {\n            this.removeListener(type, listeners[i]);\n          }\n        }\n\n        return this;\n      };\n\n      function _listeners(target, type, unwrap) {\n        var events = target._events;\n\n        if (!events)\n        return [];\n\n        var evlistener = events[type];\n        if (!evlistener)\n        return [];\n\n        if (typeof evlistener === 'function')\n        return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n      }\n\n      EventEmitter.prototype.listeners = function listeners(type) {\n        return _listeners(this, type, true);\n      };\n\n      EventEmitter.prototype.rawListeners = function rawListeners(type) {\n        return _listeners(this, type, false);\n      };\n\n      EventEmitter.listenerCount = function (emitter, type) {\n        if (typeof emitter.listenerCount === 'function') {\n          return emitter.listenerCount(type);\n        } else {\n          return listenerCount.call(emitter, type);\n        }\n      };\n\n      EventEmitter.prototype.listenerCount = listenerCount;\n      function listenerCount(type) {\n        var events = this._events;\n\n        if (events) {\n          var evlistener = events[type];\n\n          if (typeof evlistener === 'function') {\n            return 1;\n          } else if (evlistener) {\n            return evlistener.length;\n          }\n        }\n\n        return 0;\n      }\n\n      EventEmitter.prototype.eventNames = function eventNames() {\n        return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n      };\n\n      // About 1.5x faster than the two-arg version of Array#splice().\n      function spliceOne(list, index) {\n        for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n          list[i] = list[k];}\n        list.pop();\n      }\n\n      function arrayClone(arr, n) {\n        var copy = new Array(n);\n        for (var i = 0; i < n; ++i) {\n          copy[i] = arr[i];}\n        return copy;\n      }\n\n      function unwrapListeners(arr) {\n        var ret = new Array(arr.length);\n        for (var i = 0; i < ret.length; ++i) {\n          ret[i] = arr[i].listener || arr[i];\n        }\n        return ret;\n      }\n\n      function objectCreatePolyfill(proto) {\n        var F = function F() {};\n        F.prototype = proto;\n        return new F();\n      }\n      function objectKeysPolyfill(obj) {\n        var keys = [];\n        for (var k in obj) {if (Object.prototype.hasOwnProperty.call(obj, k)) {\n            keys.push(k);\n          }}\n        return k;\n      }\n      function functionBindPolyfill(context) {\n        var fn = this;\n        return function () {\n          return fn.apply(context, arguments);\n        };\n      }\n\n    }, {}], 14: [function (require, module, exports) {\n      (function (Buffer) {\n        // Copyright Joyent, Inc. and other Node contributors.\n        //\n        // Permission is hereby granted, free of charge, to any person obtaining a\n        // copy of this software and associated documentation files (the\n        // \"Software\"), to deal in the Software without restriction, including\n        // without limitation the rights to use, copy, modify, merge, publish,\n        // distribute, sublicense, and/or sell copies of the Software, and to permit\n        // persons to whom the Software is furnished to do so, subject to the\n        // following conditions:\n        //\n        // The above copyright notice and this permission notice shall be included\n        // in all copies or substantial portions of the Software.\n        //\n        // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n        // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n        // NOTE: These type checking functions intentionally don't use `instanceof`\n        // because it is fragile and can be easily faked with `Object.create()`.\n\n        function isArray(arg) {\n          if (Array.isArray) {\n            return Array.isArray(arg);\n          }\n          return objectToString(arg) === '[object Array]';\n        }\n        exports.isArray = isArray;\n\n        function isBoolean(arg) {\n          return typeof arg === 'boolean';\n        }\n        exports.isBoolean = isBoolean;\n\n        function isNull(arg) {\n          return arg === null;\n        }\n        exports.isNull = isNull;\n\n        function isNullOrUndefined(arg) {\n          return arg == null;\n        }\n        exports.isNullOrUndefined = isNullOrUndefined;\n\n        function isNumber(arg) {\n          return typeof arg === 'number';\n        }\n        exports.isNumber = isNumber;\n\n        function isString(arg) {\n          return typeof arg === 'string';\n        }\n        exports.isString = isString;\n\n        function isSymbol(arg) {\n          return typeof arg === 'symbol';\n        }\n        exports.isSymbol = isSymbol;\n\n        function isUndefined(arg) {\n          return arg === void 0;\n        }\n        exports.isUndefined = isUndefined;\n\n        function isRegExp(re) {\n          return objectToString(re) === '[object RegExp]';\n        }\n        exports.isRegExp = isRegExp;\n\n        function isObject(arg) {\n          return typeof arg === 'object' && arg !== null;\n        }\n        exports.isObject = isObject;\n\n        function isDate(d) {\n          return objectToString(d) === '[object Date]';\n        }\n        exports.isDate = isDate;\n\n        function isError(e) {\n          return objectToString(e) === '[object Error]' || e instanceof Error;\n        }\n        exports.isError = isError;\n\n        function isFunction(arg) {\n          return typeof arg === 'function';\n        }\n        exports.isFunction = isFunction;\n\n        function isPrimitive(arg) {\n          return arg === null ||\n          typeof arg === 'boolean' ||\n          typeof arg === 'number' ||\n          typeof arg === 'string' ||\n          typeof arg === 'symbol' || // ES6 symbol\n          typeof arg === 'undefined';\n        }\n        exports.isPrimitive = isPrimitive;\n\n        exports.isBuffer = Buffer.isBuffer;\n\n        function objectToString(o) {\n          return Object.prototype.toString.call(o);\n        }\n\n      }).call(this, { \"isBuffer\": require(\"../../is-buffer/index.js\") });\n    }, { \"../../is-buffer/index.js\": 81 }], 15: [function (require, module, exports) {\n      'use strict';\n\n      var copy = require('es5-ext/object/copy'),\n      normalizeOptions = require('es5-ext/object/normalize-options'),\n      ensureCallable = require('es5-ext/object/valid-callable'),\n      map = require('es5-ext/object/map'),\n      callable = require('es5-ext/object/valid-callable'),\n      validValue = require('es5-ext/object/valid-value'),\n\n      bind = Function.prototype.bind,defineProperty = Object.defineProperty,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      define;\n\n      define = function define(name, desc, options) {\n        var value = validValue(desc) && callable(desc.value),dgs;\n        dgs = copy(desc);\n        delete dgs.writable;\n        delete dgs.value;\n        dgs.get = function () {\n          if (!options.overwriteDefinition && hasOwnProperty.call(this, name)) return value;\n          desc.value = bind.call(value, options.resolveContext ? options.resolveContext(this) : this);\n          defineProperty(this, name, desc);\n          return this[name];\n        };\n        return dgs;\n      };\n\n      module.exports = function (props /*, options*/) {\n        var options = normalizeOptions(arguments[1]);\n        if (options.resolveContext != null) ensureCallable(options.resolveContext);\n        return map(props, function (desc, name) {return define(name, desc, options);});\n      };\n\n    }, { \"es5-ext/object/copy\": 39, \"es5-ext/object/map\": 48, \"es5-ext/object/normalize-options\": 49, \"es5-ext/object/valid-callable\": 54, \"es5-ext/object/valid-value\": 55 }], 16: [function (require, module, exports) {\n      'use strict';\n\n      var assign = require('es5-ext/object/assign'),\n      normalizeOpts = require('es5-ext/object/normalize-options'),\n      isCallable = require('es5-ext/object/is-callable'),\n      contains = require('es5-ext/string/#/contains'),\n\n      d;\n\n      d = module.exports = function (dscr, value /*, options*/) {\n        var c, e, w, options, desc;\n        if (arguments.length < 2 || typeof dscr !== 'string') {\n          options = value;\n          value = dscr;\n          dscr = null;\n        } else {\n          options = arguments[2];\n        }\n        if (dscr == null) {\n          c = w = true;\n          e = false;\n        } else {\n          c = contains.call(dscr, 'c');\n          e = contains.call(dscr, 'e');\n          w = contains.call(dscr, 'w');\n        }\n\n        desc = { value: value, configurable: c, enumerable: e, writable: w };\n        return !options ? desc : assign(normalizeOpts(options), desc);\n      };\n\n      d.gs = function (dscr, get, set /*, options*/) {\n        var c, e, options, desc;\n        if (typeof dscr !== 'string') {\n          options = set;\n          set = get;\n          get = dscr;\n          dscr = null;\n        } else {\n          options = arguments[3];\n        }\n        if (get == null) {\n          get = undefined;\n        } else if (!isCallable(get)) {\n          options = get;\n          get = set = undefined;\n        } else if (set == null) {\n          set = undefined;\n        } else if (!isCallable(set)) {\n          options = set;\n          set = undefined;\n        }\n        if (dscr == null) {\n          c = true;\n          e = false;\n        } else {\n          c = contains.call(dscr, 'c');\n          e = contains.call(dscr, 'e');\n        }\n\n        desc = { get: get, set: set, configurable: c, enumerable: e };\n        return !options ? desc : assign(normalizeOpts(options), desc);\n      };\n\n    }, { \"es5-ext/object/assign\": 36, \"es5-ext/object/is-callable\": 42, \"es5-ext/object/normalize-options\": 49, \"es5-ext/string/#/contains\": 56 }], 17: [function (require, module, exports) {\n      (function (process, Buffer) {\n        var stream = require('readable-stream');\n        var eos = require('end-of-stream');\n        var inherits = require('inherits');\n        var shift = require('stream-shift');\n\n        var SIGNAL_FLUSH = Buffer.from && Buffer.from !== Uint8Array.from ?\n        Buffer.from([0]) :\n        new Buffer([0]);\n\n        var onuncork = function onuncork(self, fn) {\n          if (self._corked) self.once('uncork', fn);else\n          fn();\n        };\n\n        var autoDestroy = function autoDestroy(self, err) {\n          if (self._autoDestroy) self.destroy(err);\n        };\n\n        var destroyer = function destroyer(self, end) {\n          return function (err) {\n            if (err) autoDestroy(self, err.message === 'premature close' ? null : err);else\n            if (end && !self._ended) self.end();\n          };\n        };\n\n        var end = function end(ws, fn) {\n          if (!ws) return fn();\n          if (ws._writableState && ws._writableState.finished) return fn();\n          if (ws._writableState) return ws.end(fn);\n          ws.end();\n          fn();\n        };\n\n        var toStreams2 = function toStreams2(rs) {\n          return new stream.Readable({ objectMode: true, highWaterMark: 16 }).wrap(rs);\n        };\n\n        var Duplexify = function Duplexify(writable, readable, opts) {\n          if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts);\n          stream.Duplex.call(this, opts);\n\n          this._writable = null;\n          this._readable = null;\n          this._readable2 = null;\n\n          this._autoDestroy = !opts || opts.autoDestroy !== false;\n          this._forwardDestroy = !opts || opts.destroy !== false;\n          this._forwardEnd = !opts || opts.end !== false;\n          this._corked = 1; // start corked\n          this._ondrain = null;\n          this._drained = false;\n          this._forwarding = false;\n          this._unwrite = null;\n          this._unread = null;\n          this._ended = false;\n\n          this.destroyed = false;\n\n          if (writable) this.setWritable(writable);\n          if (readable) this.setReadable(readable);\n        };\n\n        inherits(Duplexify, stream.Duplex);\n\n        Duplexify.obj = function (writable, readable, opts) {\n          if (!opts) opts = {};\n          opts.objectMode = true;\n          opts.highWaterMark = 16;\n          return new Duplexify(writable, readable, opts);\n        };\n\n        Duplexify.prototype.cork = function () {\n          if (++this._corked === 1) this.emit('cork');\n        };\n\n        Duplexify.prototype.uncork = function () {\n          if (this._corked && --this._corked === 0) this.emit('uncork');\n        };\n\n        Duplexify.prototype.setWritable = function (writable) {\n          if (this._unwrite) this._unwrite();\n\n          if (this.destroyed) {\n            if (writable && writable.destroy) writable.destroy();\n            return;\n          }\n\n          if (writable === null || writable === false) {\n            this.end();\n            return;\n          }\n\n          var self = this;\n          var unend = eos(writable, { writable: true, readable: false }, destroyer(this, this._forwardEnd));\n\n          var ondrain = function ondrain() {\n            var ondrain = self._ondrain;\n            self._ondrain = null;\n            if (ondrain) ondrain();\n          };\n\n          var clear = function clear() {\n            self._writable.removeListener('drain', ondrain);\n            unend();\n          };\n\n          if (this._unwrite) process.nextTick(ondrain); // force a drain on stream reset to avoid livelocks\n\n          this._writable = writable;\n          this._writable.on('drain', ondrain);\n          this._unwrite = clear;\n\n          this.uncork(); // always uncork setWritable\n        };\n\n        Duplexify.prototype.setReadable = function (readable) {\n          if (this._unread) this._unread();\n\n          if (this.destroyed) {\n            if (readable && readable.destroy) readable.destroy();\n            return;\n          }\n\n          if (readable === null || readable === false) {\n            this.push(null);\n            this.resume();\n            return;\n          }\n\n          var self = this;\n          var unend = eos(readable, { writable: false, readable: true }, destroyer(this));\n\n          var onreadable = function onreadable() {\n            self._forward();\n          };\n\n          var onend = function onend() {\n            self.push(null);\n          };\n\n          var clear = function clear() {\n            self._readable2.removeListener('readable', onreadable);\n            self._readable2.removeListener('end', onend);\n            unend();\n          };\n\n          this._drained = true;\n          this._readable = readable;\n          this._readable2 = readable._readableState ? readable : toStreams2(readable);\n          this._readable2.on('readable', onreadable);\n          this._readable2.on('end', onend);\n          this._unread = clear;\n\n          this._forward();\n        };\n\n        Duplexify.prototype._read = function () {\n          this._drained = true;\n          this._forward();\n        };\n\n        Duplexify.prototype._forward = function () {\n          if (this._forwarding || !this._readable2 || !this._drained) return;\n          this._forwarding = true;\n\n          var data;\n\n          while (this._drained && (data = shift(this._readable2)) !== null) {\n            if (this.destroyed) continue;\n            this._drained = this.push(data);\n          }\n\n          this._forwarding = false;\n        };\n\n        Duplexify.prototype.destroy = function (err) {\n          if (this.destroyed) return;\n          this.destroyed = true;\n\n          var self = this;\n          process.nextTick(function () {\n            self._destroy(err);\n          });\n        };\n\n        Duplexify.prototype._destroy = function (err) {\n          if (err) {\n            var ondrain = this._ondrain;\n            this._ondrain = null;\n            if (ondrain) ondrain(err);else\n            this.emit('error', err);\n          }\n\n          if (this._forwardDestroy) {\n            if (this._readable && this._readable.destroy) this._readable.destroy();\n            if (this._writable && this._writable.destroy) this._writable.destroy();\n          }\n\n          this.emit('close');\n        };\n\n        Duplexify.prototype._write = function (data, enc, cb) {\n          if (this.destroyed) return cb();\n          if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb));\n          if (data === SIGNAL_FLUSH) return this._finish(cb);\n          if (!this._writable) return cb();\n\n          if (this._writable.write(data) === false) this._ondrain = cb;else\n          cb();\n        };\n\n        Duplexify.prototype._finish = function (cb) {\n          var self = this;\n          this.emit('preend');\n          onuncork(this, function () {\n            end(self._forwardEnd && self._writable, function () {\n              // haxx to not emit prefinish twice\n              if (self._writableState.prefinished === false) self._writableState.prefinished = true;\n              self.emit('prefinish');\n              onuncork(self, cb);\n            });\n          });\n        };\n\n        Duplexify.prototype.end = function (data, enc, cb) {\n          if (typeof data === 'function') return this.end(null, null, data);\n          if (typeof enc === 'function') return this.end(data, null, enc);\n          this._ended = true;\n          if (data) this.write(data);\n          if (!this._writableState.ending) this.write(SIGNAL_FLUSH);\n          return stream.Writable.prototype.end.call(this, cb);\n        };\n\n        module.exports = Duplexify;\n\n      }).call(this, require('_process'), require(\"buffer\").Buffer);\n    }, { \"_process\": 92, \"buffer\": 12, \"end-of-stream\": 18, \"inherits\": 80, \"readable-stream\": 108, \"stream-shift\": 111 }], 18: [function (require, module, exports) {\n      var once = require('once');\n\n      var noop = function noop() {};\n\n      var isRequest = function isRequest(stream) {\n        return stream.setHeader && typeof stream.abort === 'function';\n      };\n\n      var isChildProcess = function isChildProcess(stream) {\n        return stream.stdio && Array.isArray(stream.stdio) && stream.stdio.length === 3;\n      };\n\n      var eos = function eos(stream, opts, callback) {\n        if (typeof opts === 'function') return eos(stream, null, opts);\n        if (!opts) opts = {};\n\n        callback = once(callback || noop);\n\n        var ws = stream._writableState;\n        var rs = stream._readableState;\n        var readable = opts.readable || opts.readable !== false && stream.readable;\n        var writable = opts.writable || opts.writable !== false && stream.writable;\n\n        var onlegacyfinish = function onlegacyfinish() {\n          if (!stream.writable) onfinish();\n        };\n\n        var onfinish = function onfinish() {\n          writable = false;\n          if (!readable) callback.call(stream);\n        };\n\n        var onend = function onend() {\n          readable = false;\n          if (!writable) callback.call(stream);\n        };\n\n        var onexit = function onexit(exitCode) {\n          callback.call(stream, exitCode ? new Error('exited with error code: ' + exitCode) : null);\n        };\n\n        var onerror = function onerror(err) {\n          callback.call(stream, err);\n        };\n\n        var onclose = function onclose() {\n          if (readable && !(rs && rs.ended)) return callback.call(stream, new Error('premature close'));\n          if (writable && !(ws && ws.ended)) return callback.call(stream, new Error('premature close'));\n        };\n\n        var onrequest = function onrequest() {\n          stream.req.on('finish', onfinish);\n        };\n\n        if (isRequest(stream)) {\n          stream.on('complete', onfinish);\n          stream.on('abort', onclose);\n          if (stream.req) onrequest();else\n          stream.on('request', onrequest);\n        } else if (writable && !ws) {// legacy streams\n          stream.on('end', onlegacyfinish);\n          stream.on('close', onlegacyfinish);\n        }\n\n        if (isChildProcess(stream)) stream.on('exit', onexit);\n\n        stream.on('end', onend);\n        stream.on('finish', onfinish);\n        if (opts.error !== false) stream.on('error', onerror);\n        stream.on('close', onclose);\n\n        return function () {\n          stream.removeListener('complete', onfinish);\n          stream.removeListener('abort', onclose);\n          stream.removeListener('request', onrequest);\n          if (stream.req) stream.req.removeListener('finish', onfinish);\n          stream.removeListener('end', onlegacyfinish);\n          stream.removeListener('close', onlegacyfinish);\n          stream.removeListener('finish', onfinish);\n          stream.removeListener('exit', onexit);\n          stream.removeListener('end', onend);\n          stream.removeListener('error', onerror);\n          stream.removeListener('close', onclose);\n        };\n      };\n\n      module.exports = eos;\n\n    }, { \"once\": 90 }], 19: [function (require, module, exports) {\n      // Inspired by Google Closure:\n      // http://closure-library.googlecode.com/svn/docs/\n      // closure_goog_array_array.js.html#goog.array.clear\n\n      \"use strict\";\n\n      var value = require(\"../../object/valid-value\");\n\n      module.exports = function () {\n        value(this).length = 0;\n        return this;\n      };\n\n    }, { \"../../object/valid-value\": 55 }], 20: [function (require, module, exports) {\n      \"use strict\";\n\n      var numberIsNaN = require(\"../../number/is-nan\"),\n      toPosInt = require(\"../../number/to-pos-integer\"),\n      value = require(\"../../object/valid-value\"),\n      indexOf = Array.prototype.indexOf,\n      objHasOwnProperty = Object.prototype.hasOwnProperty,\n      abs = Math.abs,\n      floor = Math.floor;\n\n      module.exports = function (searchElement /*, fromIndex*/) {\n        var i, length, fromIndex, val;\n        if (!numberIsNaN(searchElement)) return indexOf.apply(this, arguments);\n\n        length = toPosInt(value(this).length);\n        fromIndex = arguments[1];\n        if (isNaN(fromIndex)) fromIndex = 0;else\n        if (fromIndex >= 0) fromIndex = floor(fromIndex);else\n        fromIndex = toPosInt(this.length) - floor(abs(fromIndex));\n\n        for (i = fromIndex; i < length; ++i) {\n          if (objHasOwnProperty.call(this, i)) {\n            val = this[i];\n            if (numberIsNaN(val)) return i; // Jslint: ignore\n          }\n        }\n        return -1;\n      };\n\n    }, { \"../../number/is-nan\": 30, \"../../number/to-pos-integer\": 34, \"../../object/valid-value\": 55 }], 21: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = require(\"./is-implemented\")() ?\n      Array.from :\n      require(\"./shim\");\n\n    }, { \"./is-implemented\": 22, \"./shim\": 23 }], 22: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function () {\n        var from = Array.from,arr,result;\n        if (typeof from !== \"function\") return false;\n        arr = [\"raz\", \"dwa\"];\n        result = from(arr);\n        return Boolean(result && result !== arr && result[1] === \"dwa\");\n      };\n\n    }, {}], 23: [function (require, module, exports) {\n      \"use strict\";\n\n      var iteratorSymbol = require(\"es6-symbol\").iterator,\n      isArguments = require(\"../../function/is-arguments\"),\n      isFunction = require(\"../../function/is-function\"),\n      toPosInt = require(\"../../number/to-pos-integer\"),\n      callable = require(\"../../object/valid-callable\"),\n      validValue = require(\"../../object/valid-value\"),\n      isValue = require(\"../../object/is-value\"),\n      isString = require(\"../../string/is-string\"),\n      isArray = Array.isArray,\n      call = Function.prototype.call,\n      desc = { configurable: true, enumerable: true, writable: true, value: null },\n      defineProperty = Object.defineProperty;\n\n      // eslint-disable-next-line complexity\n      module.exports = function (arrayLike /*, mapFn, thisArg*/) {\n        var mapFn = arguments[1],\n        thisArg = arguments[2],\n        Context,\n        i,\n        j,\n        arr,\n        length,\n        code,\n        iterator,\n        result,\n        getIterator,\n        value;\n\n        arrayLike = Object(validValue(arrayLike));\n\n        if (isValue(mapFn)) callable(mapFn);\n        if (!this || this === Array || !isFunction(this)) {\n          // Result: Plain array\n          if (!mapFn) {\n            if (isArguments(arrayLike)) {\n              // Source: Arguments\n              length = arrayLike.length;\n              if (length !== 1) return Array.apply(null, arrayLike);\n              arr = new Array(1);\n              arr[0] = arrayLike[0];\n              return arr;\n            }\n            if (isArray(arrayLike)) {\n              // Source: Array\n              arr = new Array(length = arrayLike.length);\n              for (i = 0; i < length; ++i) {arr[i] = arrayLike[i];}\n              return arr;\n            }\n          }\n          arr = [];\n        } else {\n          // Result: Non plain array\n          Context = this;\n        }\n\n        if (!isArray(arrayLike)) {\n          if ((getIterator = arrayLike[iteratorSymbol]) !== undefined) {\n            // Source: Iterator\n            iterator = callable(getIterator).call(arrayLike);\n            if (Context) arr = new Context();\n            result = iterator.next();\n            i = 0;\n            while (!result.done) {\n              value = mapFn ? call.call(mapFn, thisArg, result.value, i) : result.value;\n              if (Context) {\n                desc.value = value;\n                defineProperty(arr, i, desc);\n              } else {\n                arr[i] = value;\n              }\n              result = iterator.next();\n              ++i;\n            }\n            length = i;\n          } else if (isString(arrayLike)) {\n            // Source: String\n            length = arrayLike.length;\n            if (Context) arr = new Context();\n            for (i = 0, j = 0; i < length; ++i) {\n              value = arrayLike[i];\n              if (i + 1 < length) {\n                code = value.charCodeAt(0);\n                // eslint-disable-next-line max-depth\n                if (code >= 0xd800 && code <= 0xdbff) value += arrayLike[++i];\n              }\n              value = mapFn ? call.call(mapFn, thisArg, value, j) : value;\n              if (Context) {\n                desc.value = value;\n                defineProperty(arr, j, desc);\n              } else {\n                arr[j] = value;\n              }\n              ++j;\n            }\n            length = j;\n          }\n        }\n        if (length === undefined) {\n          // Source: array or array-like\n          length = toPosInt(arrayLike.length);\n          if (Context) arr = new Context(length);\n          for (i = 0; i < length; ++i) {\n            value = mapFn ? call.call(mapFn, thisArg, arrayLike[i], i) : arrayLike[i];\n            if (Context) {\n              desc.value = value;\n              defineProperty(arr, i, desc);\n            } else {\n              arr[i] = value;\n            }\n          }\n        }\n        if (Context) {\n          desc.value = null;\n          arr.length = length;\n        }\n        return arr;\n      };\n\n    }, { \"../../function/is-arguments\": 24, \"../../function/is-function\": 25, \"../../number/to-pos-integer\": 34, \"../../object/is-value\": 44, \"../../object/valid-callable\": 54, \"../../object/valid-value\": 55, \"../../string/is-string\": 59, \"es6-symbol\": 73 }], 24: [function (require, module, exports) {\n      \"use strict\";\n\n      var objToString = Object.prototype.toString,\n      id = objToString.call(\n      function () {\n        return arguments;\n      }());\n\n\n      module.exports = function (value) {\n        return objToString.call(value) === id;\n      };\n\n    }, {}], 25: [function (require, module, exports) {\n      \"use strict\";\n\n      var objToString = Object.prototype.toString,id = objToString.call(require(\"./noop\"));\n\n      module.exports = function (value) {\n        return typeof value === \"function\" && objToString.call(value) === id;\n      };\n\n    }, { \"./noop\": 26 }], 26: [function (require, module, exports) {\n      \"use strict\";\n\n      // eslint-disable-next-line no-empty-function\n      module.exports = function () {};\n\n    }, {}], 27: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = require(\"./is-implemented\")() ?\n      Math.sign :\n      require(\"./shim\");\n\n    }, { \"./is-implemented\": 28, \"./shim\": 29 }], 28: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function () {\n        var sign = Math.sign;\n        if (typeof sign !== \"function\") return false;\n        return sign(10) === 1 && sign(-20) === -1;\n      };\n\n    }, {}], 29: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function (value) {\n        value = Number(value);\n        if (isNaN(value) || value === 0) return value;\n        return value > 0 ? 1 : -1;\n      };\n\n    }, {}], 30: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = require(\"./is-implemented\")() ?\n      Number.isNaN :\n      require(\"./shim\");\n\n    }, { \"./is-implemented\": 31, \"./shim\": 32 }], 31: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function () {\n        var numberIsNaN = Number.isNaN;\n        if (typeof numberIsNaN !== \"function\") return false;\n        return !numberIsNaN({}) && numberIsNaN(NaN) && !numberIsNaN(34);\n      };\n\n    }, {}], 32: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function (value) {\n        // eslint-disable-next-line no-self-compare\n        return value !== value;\n      };\n\n    }, {}], 33: [function (require, module, exports) {\n      \"use strict\";\n\n      var sign = require(\"../math/sign\"),\n\n      abs = Math.abs,floor = Math.floor;\n\n      module.exports = function (value) {\n        if (isNaN(value)) return 0;\n        value = Number(value);\n        if (value === 0 || !isFinite(value)) return value;\n        return sign(value) * floor(abs(value));\n      };\n\n    }, { \"../math/sign\": 27 }], 34: [function (require, module, exports) {\n      \"use strict\";\n\n      var toInteger = require(\"./to-integer\"),\n\n      max = Math.max;\n\n      module.exports = function (value) {\n        return max(0, toInteger(value));\n      };\n\n    }, { \"./to-integer\": 33 }], 35: [function (require, module, exports) {\n      // Internal method, used by iteration functions.\n      // Calls a function for each key-value pair found in object\n      // Optionally takes compareFn to iterate object in specific order\n\n      \"use strict\";\n\n      var callable = require(\"./valid-callable\"),\n      value = require(\"./valid-value\"),\n      bind = Function.prototype.bind,\n      call = Function.prototype.call,\n      keys = Object.keys,\n      objPropertyIsEnumerable = Object.prototype.propertyIsEnumerable;\n\n      module.exports = function (method, defVal) {\n        return function (obj, cb /*, thisArg, compareFn*/) {\n          var list,thisArg = arguments[2],compareFn = arguments[3];\n          obj = Object(value(obj));\n          callable(cb);\n\n          list = keys(obj);\n          if (compareFn) {\n            list.sort(typeof compareFn === \"function\" ? bind.call(compareFn, obj) : undefined);\n          }\n          if (typeof method !== \"function\") method = list[method];\n          return call.call(method, list, function (key, index) {\n            if (!objPropertyIsEnumerable.call(obj, key)) return defVal;\n            return call.call(cb, thisArg, obj[key], key, obj, index);\n          });\n        };\n      };\n\n    }, { \"./valid-callable\": 54, \"./valid-value\": 55 }], 36: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = require(\"./is-implemented\")() ?\n      Object.assign :\n      require(\"./shim\");\n\n    }, { \"./is-implemented\": 37, \"./shim\": 38 }], 37: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function () {\n        var assign = Object.assign,obj;\n        if (typeof assign !== \"function\") return false;\n        obj = { foo: \"raz\" };\n        assign(obj, { bar: \"dwa\" }, { trzy: \"trzy\" });\n        return obj.foo + obj.bar + obj.trzy === \"razdwatrzy\";\n      };\n\n    }, {}], 38: [function (require, module, exports) {\n      \"use strict\";\n\n      var keys = require(\"../keys\"),\n      value = require(\"../valid-value\"),\n      max = Math.max;\n\n      module.exports = function (dest, src /*, …srcn*/) {\n        var error,i,length = max(arguments.length, 2),assign;\n        dest = Object(value(dest));\n        assign = function assign(key) {\n          try {\n            dest[key] = src[key];\n          } catch (e) {\n            if (!error) error = e;\n          }\n        };\n        for (i = 1; i < length; ++i) {\n          src = arguments[i];\n          keys(src).forEach(assign);\n        }\n        if (error !== undefined) throw error;\n        return dest;\n      };\n\n    }, { \"../keys\": 45, \"../valid-value\": 55 }], 39: [function (require, module, exports) {\n      \"use strict\";\n\n      var aFrom = require(\"../array/from\"),\n      assign = require(\"./assign\"),\n      value = require(\"./valid-value\");\n\n      module.exports = function (obj /*, propertyNames, options*/) {\n        var copy = Object(value(obj)),propertyNames = arguments[1],options = Object(arguments[2]);\n        if (copy !== obj && !propertyNames) return copy;\n        var result = {};\n        if (propertyNames) {\n          aFrom(propertyNames, function (propertyName) {\n            if (options.ensure || propertyName in obj) result[propertyName] = obj[propertyName];\n          });\n        } else {\n          assign(result, obj);\n        }\n        return result;\n      };\n\n    }, { \"../array/from\": 21, \"./assign\": 36, \"./valid-value\": 55 }], 40: [function (require, module, exports) {\n      // Workaround for http://code.google.com/p/v8/issues/detail?id=2804\n\n      \"use strict\";\n\n      var create = Object.create,shim;\n\n      if (!require(\"./set-prototype-of/is-implemented\")()) {\n        shim = require(\"./set-prototype-of/shim\");\n      }\n\n      module.exports = function () {\n        var nullObject, polyProps, desc;\n        if (!shim) return create;\n        if (shim.level !== 1) return create;\n\n        nullObject = {};\n        polyProps = {};\n        desc = {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: undefined };\n\n        Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {\n          if (name === \"__proto__\") {\n            polyProps[name] = {\n              configurable: true,\n              enumerable: false,\n              writable: true,\n              value: undefined };\n\n            return;\n          }\n          polyProps[name] = desc;\n        });\n        Object.defineProperties(nullObject, polyProps);\n\n        Object.defineProperty(shim, \"nullPolyfill\", {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: nullObject });\n\n\n        return function (prototype, props) {\n          return create(prototype === null ? nullObject : prototype, props);\n        };\n      }();\n\n    }, { \"./set-prototype-of/is-implemented\": 52, \"./set-prototype-of/shim\": 53 }], 41: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = require(\"./_iterate\")(\"forEach\");\n\n    }, { \"./_iterate\": 35 }], 42: [function (require, module, exports) {\n      // Deprecated\n\n      \"use strict\";\n\n      module.exports = function (obj) {\n        return typeof obj === \"function\";\n      };\n\n    }, {}], 43: [function (require, module, exports) {\n      \"use strict\";\n\n      var isValue = require(\"./is-value\");\n\n      var map = { function: true, object: true };\n\n      module.exports = function (value) {\n        return isValue(value) && map[typeof value] || false;\n      };\n\n    }, { \"./is-value\": 44 }], 44: [function (require, module, exports) {\n      \"use strict\";\n\n      var _undefined = require(\"../function/noop\")(); // Support ES3 engines\n\n      module.exports = function (val) {\n        return val !== _undefined && val !== null;\n      };\n\n    }, { \"../function/noop\": 26 }], 45: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = require(\"./is-implemented\")() ? Object.keys : require(\"./shim\");\n\n    }, { \"./is-implemented\": 46, \"./shim\": 47 }], 46: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function () {\n        try {\n          Object.keys(\"primitive\");\n          return true;\n        } catch (e) {\n          return false;\n        }\n      };\n\n    }, {}], 47: [function (require, module, exports) {\n      \"use strict\";\n\n      var isValue = require(\"../is-value\");\n\n      var keys = Object.keys;\n\n      module.exports = function (object) {return keys(isValue(object) ? Object(object) : object);};\n\n    }, { \"../is-value\": 44 }], 48: [function (require, module, exports) {\n      \"use strict\";\n\n      var callable = require(\"./valid-callable\"),\n      forEach = require(\"./for-each\"),\n      call = Function.prototype.call;\n\n      module.exports = function (obj, cb /*, thisArg*/) {\n        var result = {},thisArg = arguments[2];\n        callable(cb);\n        forEach(obj, function (value, key, targetObj, index) {\n          result[key] = call.call(cb, thisArg, value, key, targetObj, index);\n        });\n        return result;\n      };\n\n    }, { \"./for-each\": 41, \"./valid-callable\": 54 }], 49: [function (require, module, exports) {\n      \"use strict\";\n\n      var isValue = require(\"./is-value\");\n\n      var forEach = Array.prototype.forEach,create = Object.create;\n\n      var process = function process(src, obj) {\n        var key;\n        for (key in src) {obj[key] = src[key];}\n      };\n\n      // eslint-disable-next-line no-unused-vars\n      module.exports = function (opts1 /*, …options*/) {\n        var result = create(null);\n        forEach.call(arguments, function (options) {\n          if (!isValue(options)) return;\n          process(Object(options), result);\n        });\n        return result;\n      };\n\n    }, { \"./is-value\": 44 }], 50: [function (require, module, exports) {\n      \"use strict\";\n\n      var forEach = Array.prototype.forEach,create = Object.create;\n\n      // eslint-disable-next-line no-unused-vars\n      module.exports = function (arg /*, …args*/) {\n        var set = create(null);\n        forEach.call(arguments, function (name) {\n          set[name] = true;\n        });\n        return set;\n      };\n\n    }, {}], 51: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = require(\"./is-implemented\")() ?\n      Object.setPrototypeOf :\n      require(\"./shim\");\n\n    }, { \"./is-implemented\": 52, \"./shim\": 53 }], 52: [function (require, module, exports) {\n      \"use strict\";\n\n      var create = Object.create,getPrototypeOf = Object.getPrototypeOf,plainObject = {};\n\n      module.exports = function () /* CustomCreate*/{\n        var setPrototypeOf = Object.setPrototypeOf,customCreate = arguments[0] || create;\n        if (typeof setPrototypeOf !== \"function\") return false;\n        return getPrototypeOf(setPrototypeOf(customCreate(null), plainObject)) === plainObject;\n      };\n\n    }, {}], 53: [function (require, module, exports) {\n      /* eslint no-proto: \"off\" */\n\n      // Big thanks to @WebReflection for sorting this out\n      // https://gist.github.com/WebReflection/5593554\n\n      \"use strict\";\n\n      var isObject = require(\"../is-object\"),\n      value = require(\"../valid-value\"),\n      objIsPrototypeOf = Object.prototype.isPrototypeOf,\n      defineProperty = Object.defineProperty,\n      nullDesc = {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: undefined },\n\n      validate;\n\n      validate = function validate(obj, prototype) {\n        value(obj);\n        if (prototype === null || isObject(prototype)) return obj;\n        throw new TypeError(\"Prototype must be null or an object\");\n      };\n\n      module.exports = function (status) {\n        var fn, set;\n        if (!status) return null;\n        if (status.level === 2) {\n          if (status.set) {\n            set = status.set;\n            fn = function fn(obj, prototype) {\n              set.call(validate(obj, prototype), prototype);\n              return obj;\n            };\n          } else {\n            fn = function fn(obj, prototype) {\n              validate(obj, prototype).__proto__ = prototype;\n              return obj;\n            };\n          }\n        } else {\n          fn = function self(obj, prototype) {\n            var isNullBase;\n            validate(obj, prototype);\n            isNullBase = objIsPrototypeOf.call(self.nullPolyfill, obj);\n            if (isNullBase) delete self.nullPolyfill.__proto__;\n            if (prototype === null) prototype = self.nullPolyfill;\n            obj.__proto__ = prototype;\n            if (isNullBase) defineProperty(self.nullPolyfill, \"__proto__\", nullDesc);\n            return obj;\n          };\n        }\n        return Object.defineProperty(fn, \"level\", {\n          configurable: false,\n          enumerable: false,\n          writable: false,\n          value: status.level });\n\n      }(\n      function () {\n        var tmpObj1 = Object.create(null),\n        tmpObj2 = {},\n        set,\n        desc = Object.getOwnPropertyDescriptor(Object.prototype, \"__proto__\");\n\n        if (desc) {\n          try {\n            set = desc.set; // Opera crashes at this point\n            set.call(tmpObj1, tmpObj2);\n          } catch (ignore) {}\n          if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { set: set, level: 2 };\n        }\n\n        tmpObj1.__proto__ = tmpObj2;\n        if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 2 };\n\n        tmpObj1 = {};\n        tmpObj1.__proto__ = tmpObj2;\n        if (Object.getPrototypeOf(tmpObj1) === tmpObj2) return { level: 1 };\n\n        return false;\n      }());\n\n\n      require(\"../create\");\n\n    }, { \"../create\": 40, \"../is-object\": 43, \"../valid-value\": 55 }], 54: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = function (fn) {\n        if (typeof fn !== \"function\") throw new TypeError(fn + \" is not a function\");\n        return fn;\n      };\n\n    }, {}], 55: [function (require, module, exports) {\n      \"use strict\";\n\n      var isValue = require(\"./is-value\");\n\n      module.exports = function (value) {\n        if (!isValue(value)) throw new TypeError(\"Cannot use null or undefined\");\n        return value;\n      };\n\n    }, { \"./is-value\": 44 }], 56: [function (require, module, exports) {\n      \"use strict\";\n\n      module.exports = require(\"./is-implemented\")() ?\n      String.prototype.contains :\n      require(\"./shim\");\n\n    }, { \"./is-implemented\": 57, \"./shim\": 58 }], 57: [function (require, module, exports) {\n      \"use strict\";\n\n      var str = \"razdwatrzy\";\n\n      module.exports = function () {\n        if (typeof str.contains !== \"function\") return false;\n        return str.contains(\"dwa\") === true && str.contains(\"foo\") === false;\n      };\n\n    }, {}], 58: [function (require, module, exports) {\n      \"use strict\";\n\n      var indexOf = String.prototype.indexOf;\n\n      module.exports = function (searchString /*, position*/) {\n        return indexOf.call(this, searchString, arguments[1]) > -1;\n      };\n\n    }, {}], 59: [function (require, module, exports) {\n      \"use strict\";\n\n      var objToString = Object.prototype.toString,id = objToString.call(\"\");\n\n      module.exports = function (value) {\n        return (\n          typeof value === \"string\" ||\n          value &&\n          typeof value === \"object\" && (\n          value instanceof String || objToString.call(value) === id) ||\n          false);\n\n      };\n\n    }, {}], 60: [function (require, module, exports) {\n      \"use strict\";\n\n      var setPrototypeOf = require(\"es5-ext/object/set-prototype-of\"),\n      contains = require(\"es5-ext/string/#/contains\"),\n      d = require(\"d\"),\n      Symbol = require(\"es6-symbol\"),\n      Iterator = require(\"./\");\n\n      var defineProperty = Object.defineProperty,ArrayIterator;\n\n      ArrayIterator = module.exports = function (arr, kind) {\n        if (!(this instanceof ArrayIterator)) throw new TypeError(\"Constructor requires 'new'\");\n        Iterator.call(this, arr);\n        if (!kind) kind = \"value\";else\n        if (contains.call(kind, \"key+value\")) kind = \"key+value\";else\n        if (contains.call(kind, \"key\")) kind = \"key\";else\n        kind = \"value\";\n        defineProperty(this, \"__kind__\", d(\"\", kind));\n      };\n      if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);\n\n      // Internal %ArrayIteratorPrototype% doesn't expose its constructor\n      delete ArrayIterator.prototype.constructor;\n\n      ArrayIterator.prototype = Object.create(Iterator.prototype, {\n        _resolve: d(function (i) {\n          if (this.__kind__ === \"value\") return this.__list__[i];\n          if (this.__kind__ === \"key+value\") return [i, this.__list__[i]];\n          return i;\n        }) });\n\n      defineProperty(ArrayIterator.prototype, Symbol.toStringTag, d(\"c\", \"Array Iterator\"));\n\n    }, { \"./\": 63, \"d\": 16, \"es5-ext/object/set-prototype-of\": 51, \"es5-ext/string/#/contains\": 56, \"es6-symbol\": 73 }], 61: [function (require, module, exports) {\n      \"use strict\";\n\n      var isArguments = require(\"es5-ext/function/is-arguments\"),\n      callable = require(\"es5-ext/object/valid-callable\"),\n      isString = require(\"es5-ext/string/is-string\"),\n      get = require(\"./get\");\n\n      var isArray = Array.isArray,call = Function.prototype.call,some = Array.prototype.some;\n\n      module.exports = function (iterable, cb /*, thisArg*/) {\n        var mode,thisArg = arguments[2],result,doBreak,broken,i,length,_char,code;\n        if (isArray(iterable) || isArguments(iterable)) mode = \"array\";else\n        if (isString(iterable)) mode = \"string\";else\n        iterable = get(iterable);\n\n        callable(cb);\n        doBreak = function doBreak() {\n          broken = true;\n        };\n        if (mode === \"array\") {\n          some.call(iterable, function (value) {\n            call.call(cb, thisArg, value, doBreak);\n            return broken;\n          });\n          return;\n        }\n        if (mode === \"string\") {\n          length = iterable.length;\n          for (i = 0; i < length; ++i) {\n            _char = iterable[i];\n            if (i + 1 < length) {\n              code = _char.charCodeAt(0);\n              if (code >= 0xd800 && code <= 0xdbff) _char += iterable[++i];\n            }\n            call.call(cb, thisArg, _char, doBreak);\n            if (broken) break;\n          }\n          return;\n        }\n        result = iterable.next();\n\n        while (!result.done) {\n          call.call(cb, thisArg, result.value, doBreak);\n          if (broken) return;\n          result = iterable.next();\n        }\n      };\n\n    }, { \"./get\": 62, \"es5-ext/function/is-arguments\": 24, \"es5-ext/object/valid-callable\": 54, \"es5-ext/string/is-string\": 59 }], 62: [function (require, module, exports) {\n      \"use strict\";\n\n      var isArguments = require(\"es5-ext/function/is-arguments\"),\n      isString = require(\"es5-ext/string/is-string\"),\n      ArrayIterator = require(\"./array\"),\n      StringIterator = require(\"./string\"),\n      iterable = require(\"./valid-iterable\"),\n      iteratorSymbol = require(\"es6-symbol\").iterator;\n\n      module.exports = function (obj) {\n        if (typeof iterable(obj)[iteratorSymbol] === \"function\") return obj[iteratorSymbol]();\n        if (isArguments(obj)) return new ArrayIterator(obj);\n        if (isString(obj)) return new StringIterator(obj);\n        return new ArrayIterator(obj);\n      };\n\n    }, { \"./array\": 60, \"./string\": 65, \"./valid-iterable\": 66, \"es5-ext/function/is-arguments\": 24, \"es5-ext/string/is-string\": 59, \"es6-symbol\": 73 }], 63: [function (require, module, exports) {\n      \"use strict\";\n\n      var clear = require(\"es5-ext/array/#/clear\"),\n      assign = require(\"es5-ext/object/assign\"),\n      callable = require(\"es5-ext/object/valid-callable\"),\n      value = require(\"es5-ext/object/valid-value\"),\n      d = require(\"d\"),\n      autoBind = require(\"d/auto-bind\"),\n      Symbol = require(\"es6-symbol\");\n\n      var defineProperty = Object.defineProperty,defineProperties = Object.defineProperties,_Iterator;\n\n      module.exports = _Iterator = function Iterator(list, context) {\n        if (!(this instanceof _Iterator)) throw new TypeError(\"Constructor requires 'new'\");\n        defineProperties(this, {\n          __list__: d(\"w\", value(list)),\n          __context__: d(\"w\", context),\n          __nextIndex__: d(\"w\", 0) });\n\n        if (!context) return;\n        callable(context.on);\n        context.on(\"_add\", this._onAdd);\n        context.on(\"_delete\", this._onDelete);\n        context.on(\"_clear\", this._onClear);\n      };\n\n      // Internal %IteratorPrototype% doesn't expose its constructor\n      delete _Iterator.prototype.constructor;\n\n      defineProperties(\n      _Iterator.prototype,\n      assign(\n      {\n        _next: d(function () {\n          var i;\n          if (!this.__list__) return undefined;\n          if (this.__redo__) {\n            i = this.__redo__.shift();\n            if (i !== undefined) return i;\n          }\n          if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;\n          this._unBind();\n          return undefined;\n        }),\n        next: d(function () {\n          return this._createResult(this._next());\n        }),\n        _createResult: d(function (i) {\n          if (i === undefined) return { done: true, value: undefined };\n          return { done: false, value: this._resolve(i) };\n        }),\n        _resolve: d(function (i) {\n          return this.__list__[i];\n        }),\n        _unBind: d(function () {\n          this.__list__ = null;\n          delete this.__redo__;\n          if (!this.__context__) return;\n          this.__context__.off(\"_add\", this._onAdd);\n          this.__context__.off(\"_delete\", this._onDelete);\n          this.__context__.off(\"_clear\", this._onClear);\n          this.__context__ = null;\n        }),\n        toString: d(function () {\n          return \"[object \" + (this[Symbol.toStringTag] || \"Object\") + \"]\";\n        }) },\n\n      autoBind({\n        _onAdd: d(function (index) {\n          if (index >= this.__nextIndex__) return;\n          ++this.__nextIndex__;\n          if (!this.__redo__) {\n            defineProperty(this, \"__redo__\", d(\"c\", [index]));\n            return;\n          }\n          this.__redo__.forEach(function (redo, i) {\n            if (redo >= index) this.__redo__[i] = ++redo;\n          }, this);\n          this.__redo__.push(index);\n        }),\n        _onDelete: d(function (index) {\n          var i;\n          if (index >= this.__nextIndex__) return;\n          --this.__nextIndex__;\n          if (!this.__redo__) return;\n          i = this.__redo__.indexOf(index);\n          if (i !== -1) this.__redo__.splice(i, 1);\n          this.__redo__.forEach(function (redo, j) {\n            if (redo > index) this.__redo__[j] = --redo;\n          }, this);\n        }),\n        _onClear: d(function () {\n          if (this.__redo__) clear.call(this.__redo__);\n          this.__nextIndex__ = 0;\n        }) })));\n\n\n\n\n      defineProperty(\n      _Iterator.prototype,\n      Symbol.iterator,\n      d(function () {\n        return this;\n      }));\n\n\n    }, { \"d\": 16, \"d/auto-bind\": 15, \"es5-ext/array/#/clear\": 19, \"es5-ext/object/assign\": 36, \"es5-ext/object/valid-callable\": 54, \"es5-ext/object/valid-value\": 55, \"es6-symbol\": 73 }], 64: [function (require, module, exports) {\n      \"use strict\";\n\n      var isArguments = require(\"es5-ext/function/is-arguments\"),\n      isValue = require(\"es5-ext/object/is-value\"),\n      isString = require(\"es5-ext/string/is-string\");\n\n      var iteratorSymbol = require(\"es6-symbol\").iterator,\n      isArray = Array.isArray;\n\n      module.exports = function (value) {\n        if (!isValue(value)) return false;\n        if (isArray(value)) return true;\n        if (isString(value)) return true;\n        if (isArguments(value)) return true;\n        return typeof value[iteratorSymbol] === \"function\";\n      };\n\n    }, { \"es5-ext/function/is-arguments\": 24, \"es5-ext/object/is-value\": 44, \"es5-ext/string/is-string\": 59, \"es6-symbol\": 73 }], 65: [function (require, module, exports) {\n      // Thanks @mathiasbynens\n      // http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols\n\n      \"use strict\";\n\n      var setPrototypeOf = require(\"es5-ext/object/set-prototype-of\"),\n      d = require(\"d\"),\n      Symbol = require(\"es6-symbol\"),\n      Iterator = require(\"./\");\n\n      var defineProperty = Object.defineProperty,StringIterator;\n\n      StringIterator = module.exports = function (str) {\n        if (!(this instanceof StringIterator)) throw new TypeError(\"Constructor requires 'new'\");\n        str = String(str);\n        Iterator.call(this, str);\n        defineProperty(this, \"__length__\", d(\"\", str.length));\n      };\n      if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);\n\n      // Internal %ArrayIteratorPrototype% doesn't expose its constructor\n      delete StringIterator.prototype.constructor;\n\n      StringIterator.prototype = Object.create(Iterator.prototype, {\n        _next: d(function () {\n          if (!this.__list__) return undefined;\n          if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;\n          this._unBind();\n          return undefined;\n        }),\n        _resolve: d(function (i) {\n          var _char2 = this.__list__[i],code;\n          if (this.__nextIndex__ === this.__length__) return _char2;\n          code = _char2.charCodeAt(0);\n          if (code >= 0xd800 && code <= 0xdbff) return _char2 + this.__list__[this.__nextIndex__++];\n          return _char2;\n        }) });\n\n      defineProperty(StringIterator.prototype, Symbol.toStringTag, d(\"c\", \"String Iterator\"));\n\n    }, { \"./\": 63, \"d\": 16, \"es5-ext/object/set-prototype-of\": 51, \"es6-symbol\": 73 }], 66: [function (require, module, exports) {\n      \"use strict\";\n\n      var isIterable = require(\"./is-iterable\");\n\n      module.exports = function (value) {\n        if (!isIterable(value)) throw new TypeError(value + \" is not iterable\");\n        return value;\n      };\n\n    }, { \"./is-iterable\": 64 }], 67: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = require('./is-implemented')() ? Map : require('./polyfill');\n\n    }, { \"./is-implemented\": 68, \"./polyfill\": 72 }], 68: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = function () {\n        var map, iterator, result;\n        if (typeof Map !== 'function') return false;\n        try {\n          // WebKit doesn't support arguments and crashes\n          map = new Map([['raz', 'one'], ['dwa', 'two'], ['trzy', 'three']]);\n        } catch (e) {\n          return false;\n        }\n        if (String(map) !== '[object Map]') return false;\n        if (map.size !== 3) return false;\n        if (typeof map.clear !== 'function') return false;\n        if (typeof map.delete !== 'function') return false;\n        if (typeof map.entries !== 'function') return false;\n        if (typeof map.forEach !== 'function') return false;\n        if (typeof map.get !== 'function') return false;\n        if (typeof map.has !== 'function') return false;\n        if (typeof map.keys !== 'function') return false;\n        if (typeof map.set !== 'function') return false;\n        if (typeof map.values !== 'function') return false;\n\n        iterator = map.entries();\n        result = iterator.next();\n        if (result.done !== false) return false;\n        if (!result.value) return false;\n        if (result.value[0] !== 'raz') return false;\n        if (result.value[1] !== 'one') return false;\n\n        return true;\n      };\n\n    }, {}], 69: [function (require, module, exports) {\n      // Exports true if environment provides native `Map` implementation,\n      // whatever that is.\n\n      'use strict';\n\n      module.exports = function () {\n        if (typeof Map === 'undefined') return false;\n        return Object.prototype.toString.call(new Map()) === '[object Map]';\n      }();\n\n    }, {}], 70: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = require('es5-ext/object/primitive-set')('key',\n      'value', 'key+value');\n\n    }, { \"es5-ext/object/primitive-set\": 50 }], 71: [function (require, module, exports) {\n      'use strict';\n\n      var setPrototypeOf = require('es5-ext/object/set-prototype-of'),\n      d = require('d'),\n      Iterator = require('es6-iterator'),\n      toStringTagSymbol = require('es6-symbol').toStringTag,\n      kinds = require('./iterator-kinds'),\n\n      defineProperties = Object.defineProperties,\n      unBind = Iterator.prototype._unBind,\n      MapIterator;\n\n      MapIterator = module.exports = function (map, kind) {\n        if (!(this instanceof MapIterator)) return new MapIterator(map, kind);\n        Iterator.call(this, map.__mapKeysData__, map);\n        if (!kind || !kinds[kind]) kind = 'key+value';\n        defineProperties(this, {\n          __kind__: d('', kind),\n          __values__: d('w', map.__mapValuesData__) });\n\n      };\n      if (setPrototypeOf) setPrototypeOf(MapIterator, Iterator);\n\n      MapIterator.prototype = Object.create(Iterator.prototype, {\n        constructor: d(MapIterator),\n        _resolve: d(function (i) {\n          if (this.__kind__ === 'value') return this.__values__[i];\n          if (this.__kind__ === 'key') return this.__list__[i];\n          return [this.__list__[i], this.__values__[i]];\n        }),\n        _unBind: d(function () {\n          this.__values__ = null;\n          unBind.call(this);\n        }),\n        toString: d(function () {return '[object Map Iterator]';}) });\n\n      Object.defineProperty(MapIterator.prototype, toStringTagSymbol,\n      d('c', 'Map Iterator'));\n\n    }, { \"./iterator-kinds\": 70, \"d\": 16, \"es5-ext/object/set-prototype-of\": 51, \"es6-iterator\": 63, \"es6-symbol\": 73 }], 72: [function (require, module, exports) {\n      'use strict';\n\n      var clear = require('es5-ext/array/#/clear'),\n      eIndexOf = require('es5-ext/array/#/e-index-of'),\n      setPrototypeOf = require('es5-ext/object/set-prototype-of'),\n      callable = require('es5-ext/object/valid-callable'),\n      validValue = require('es5-ext/object/valid-value'),\n      d = require('d'),\n      ee = require('event-emitter'),\n      Symbol = require('es6-symbol'),\n      iterator = require('es6-iterator/valid-iterable'),\n      forOf = require('es6-iterator/for-of'),\n      Iterator = require('./lib/iterator'),\n      isNative = require('./is-native-implemented'),\n\n      call = Function.prototype.call,\n      defineProperties = Object.defineProperties,getPrototypeOf = Object.getPrototypeOf,\n      _MapPoly;\n\n      module.exports = _MapPoly = function MapPoly() /*iterable*/{\n        var iterable = arguments[0],keys,values,self;\n        if (!(this instanceof _MapPoly)) throw new TypeError('Constructor requires \\'new\\'');\n        if (isNative && setPrototypeOf && Map !== _MapPoly) {\n          self = setPrototypeOf(new Map(), getPrototypeOf(this));\n        } else {\n          self = this;\n        }\n        if (iterable != null) iterator(iterable);\n        defineProperties(self, {\n          __mapKeysData__: d('c', keys = []),\n          __mapValuesData__: d('c', values = []) });\n\n        if (!iterable) return self;\n        forOf(iterable, function (value) {\n          var key = validValue(value)[0];\n          value = value[1];\n          if (eIndexOf.call(keys, key) !== -1) return;\n          keys.push(key);\n          values.push(value);\n        }, self);\n        return self;\n      };\n\n      if (isNative) {\n        if (setPrototypeOf) setPrototypeOf(_MapPoly, Map);\n        _MapPoly.prototype = Object.create(Map.prototype, {\n          constructor: d(_MapPoly) });\n\n      }\n\n      ee(defineProperties(_MapPoly.prototype, {\n        clear: d(function () {\n          if (!this.__mapKeysData__.length) return;\n          clear.call(this.__mapKeysData__);\n          clear.call(this.__mapValuesData__);\n          this.emit('_clear');\n        }),\n        delete: d(function (key) {\n          var index = eIndexOf.call(this.__mapKeysData__, key);\n          if (index === -1) return false;\n          this.__mapKeysData__.splice(index, 1);\n          this.__mapValuesData__.splice(index, 1);\n          this.emit('_delete', index, key);\n          return true;\n        }),\n        entries: d(function () {return new Iterator(this, 'key+value');}),\n        forEach: d(function (cb /*, thisArg*/) {\n          var thisArg = arguments[1],iterator,result;\n          callable(cb);\n          iterator = this.entries();\n          result = iterator._next();\n          while (result !== undefined) {\n            call.call(cb, thisArg, this.__mapValuesData__[result],\n            this.__mapKeysData__[result], this);\n            result = iterator._next();\n          }\n        }),\n        get: d(function (key) {\n          var index = eIndexOf.call(this.__mapKeysData__, key);\n          if (index === -1) return;\n          return this.__mapValuesData__[index];\n        }),\n        has: d(function (key) {\n          return eIndexOf.call(this.__mapKeysData__, key) !== -1;\n        }),\n        keys: d(function () {return new Iterator(this, 'key');}),\n        set: d(function (key, value) {\n          var index = eIndexOf.call(this.__mapKeysData__, key),emit;\n          if (index === -1) {\n            index = this.__mapKeysData__.push(key) - 1;\n            emit = true;\n          }\n          this.__mapValuesData__[index] = value;\n          if (emit) this.emit('_add', index, key);\n          return this;\n        }),\n        size: d.gs(function () {return this.__mapKeysData__.length;}),\n        values: d(function () {return new Iterator(this, 'value');}),\n        toString: d(function () {return '[object Map]';}) }));\n\n      Object.defineProperty(_MapPoly.prototype, Symbol.iterator, d(function () {\n        return this.entries();\n      }));\n      Object.defineProperty(_MapPoly.prototype, Symbol.toStringTag, d('c', 'Map'));\n\n    }, { \"./is-native-implemented\": 69, \"./lib/iterator\": 71, \"d\": 16, \"es5-ext/array/#/clear\": 19, \"es5-ext/array/#/e-index-of\": 20, \"es5-ext/object/set-prototype-of\": 51, \"es5-ext/object/valid-callable\": 54, \"es5-ext/object/valid-value\": 55, \"es6-iterator/for-of\": 61, \"es6-iterator/valid-iterable\": 66, \"es6-symbol\": 73, \"event-emitter\": 78 }], 73: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = require('./is-implemented')() ? Symbol : require('./polyfill');\n\n    }, { \"./is-implemented\": 74, \"./polyfill\": 76 }], 74: [function (require, module, exports) {\n      'use strict';\n\n      var validTypes = { object: true, symbol: true };\n\n      module.exports = function () {\n        var symbol;\n        if (typeof Symbol !== 'function') return false;\n        symbol = Symbol('test symbol');\n        try {String(symbol);} catch (e) {return false;}\n\n        // Return 'true' also for polyfills\n        if (!validTypes[typeof Symbol.iterator]) return false;\n        if (!validTypes[typeof Symbol.toPrimitive]) return false;\n        if (!validTypes[typeof Symbol.toStringTag]) return false;\n\n        return true;\n      };\n\n    }, {}], 75: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = function (x) {\n        if (!x) return false;\n        if (typeof x === 'symbol') return true;\n        if (!x.constructor) return false;\n        if (x.constructor.name !== 'Symbol') return false;\n        return x[x.constructor.toStringTag] === 'Symbol';\n      };\n\n    }, {}], 76: [function (require, module, exports) {\n      // ES2015 Symbol polyfill for environments that do not (or partially) support it\n\n      'use strict';\n\n      var d = require('d'),\n      validateSymbol = require('./validate-symbol'),\n\n      create = Object.create,defineProperties = Object.defineProperties,\n      defineProperty = Object.defineProperty,objPrototype = Object.prototype,\n      NativeSymbol,SymbolPolyfill,HiddenSymbol,globalSymbols = create(null),\n      isNativeSafe;\n\n      if (typeof Symbol === 'function') {\n        NativeSymbol = Symbol;\n        try {\n          String(NativeSymbol());\n          isNativeSafe = true;\n        } catch (ignore) {}\n      }\n\n      var generateName = function () {\n        var created = create(null);\n        return function (desc) {\n          var postfix = 0,name,ie11BugWorkaround;\n          while (created[desc + (postfix || '')]) {++postfix;}\n          desc += postfix || '';\n          created[desc] = true;\n          name = '@@' + desc;\n          defineProperty(objPrototype, name, d.gs(null, function (value) {\n            // For IE11 issue see:\n            // https://connect.microsoft.com/IE/feedbackdetail/view/1928508/\n            //    ie11-broken-getters-on-dom-objects\n            // https://github.com/medikoo/es6-symbol/issues/12\n            if (ie11BugWorkaround) return;\n            ie11BugWorkaround = true;\n            defineProperty(this, name, d(value));\n            ie11BugWorkaround = false;\n          }));\n          return name;\n        };\n      }();\n\n      // Internal constructor (not one exposed) for creating Symbol instances.\n      // This one is used to ensure that `someSymbol instanceof Symbol` always return false\n      HiddenSymbol = function Symbol(description) {\n        if (this instanceof HiddenSymbol) throw new TypeError('Symbol is not a constructor');\n        return SymbolPolyfill(description);\n      };\n\n      // Exposed `Symbol` constructor\n      // (returns instances of HiddenSymbol)\n      module.exports = SymbolPolyfill = function Symbol(description) {\n        var symbol;\n        if (this instanceof Symbol) throw new TypeError('Symbol is not a constructor');\n        if (isNativeSafe) return NativeSymbol(description);\n        symbol = create(HiddenSymbol.prototype);\n        description = description === undefined ? '' : String(description);\n        return defineProperties(symbol, {\n          __description__: d('', description),\n          __name__: d('', generateName(description)) });\n\n      };\n      defineProperties(SymbolPolyfill, {\n        for: d(function (key) {\n          if (globalSymbols[key]) return globalSymbols[key];\n          return globalSymbols[key] = SymbolPolyfill(String(key));\n        }),\n        keyFor: d(function (s) {\n          var key;\n          validateSymbol(s);\n          for (key in globalSymbols) {if (globalSymbols[key] === s) return key;}\n        }),\n\n        // To ensure proper interoperability with other native functions (e.g. Array.from)\n        // fallback to eventual native implementation of given symbol\n        hasInstance: d('', NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill('hasInstance')),\n        isConcatSpreadable: d('', NativeSymbol && NativeSymbol.isConcatSpreadable ||\n        SymbolPolyfill('isConcatSpreadable')),\n        iterator: d('', NativeSymbol && NativeSymbol.iterator || SymbolPolyfill('iterator')),\n        match: d('', NativeSymbol && NativeSymbol.match || SymbolPolyfill('match')),\n        replace: d('', NativeSymbol && NativeSymbol.replace || SymbolPolyfill('replace')),\n        search: d('', NativeSymbol && NativeSymbol.search || SymbolPolyfill('search')),\n        species: d('', NativeSymbol && NativeSymbol.species || SymbolPolyfill('species')),\n        split: d('', NativeSymbol && NativeSymbol.split || SymbolPolyfill('split')),\n        toPrimitive: d('', NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill('toPrimitive')),\n        toStringTag: d('', NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill('toStringTag')),\n        unscopables: d('', NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill('unscopables')) });\n\n\n      // Internal tweaks for real symbol producer\n      defineProperties(HiddenSymbol.prototype, {\n        constructor: d(SymbolPolyfill),\n        toString: d('', function () {return this.__name__;}) });\n\n\n      // Proper implementation of methods exposed on Symbol.prototype\n      // They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype\n      defineProperties(SymbolPolyfill.prototype, {\n        toString: d(function () {return 'Symbol (' + validateSymbol(this).__description__ + ')';}),\n        valueOf: d(function () {return validateSymbol(this);}) });\n\n      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {\n        var symbol = validateSymbol(this);\n        if (typeof symbol === 'symbol') return symbol;\n        return symbol.toString();\n      }));\n      defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));\n\n      // Proper implementaton of toPrimitive and toStringTag for returned symbol instances\n      defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag,\n      d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));\n\n      // Note: It's important to define `toPrimitive` as last one, as some implementations\n      // implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)\n      // And that may invoke error in definition flow:\n      // See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149\n      defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive,\n      d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));\n\n    }, { \"./validate-symbol\": 77, \"d\": 16 }], 77: [function (require, module, exports) {\n      'use strict';\n\n      var isSymbol = require('./is-symbol');\n\n      module.exports = function (value) {\n        if (!isSymbol(value)) throw new TypeError(value + \" is not a symbol\");\n        return value;\n      };\n\n    }, { \"./is-symbol\": 75 }], 78: [function (require, module, exports) {\n      'use strict';\n\n      var d = require('d'),\n      callable = require('es5-ext/object/valid-callable'),\n\n      apply = Function.prototype.apply,call = Function.prototype.call,\n      create = Object.create,defineProperty = Object.defineProperty,\n      defineProperties = Object.defineProperties,\n      hasOwnProperty = Object.prototype.hasOwnProperty,\n      descriptor = { configurable: true, enumerable: false, writable: true },\n\n      on,_once2,off,emit,methods,descriptors,base;\n\n      on = function on(type, listener) {\n        var data;\n\n        callable(listener);\n\n        if (!hasOwnProperty.call(this, '__ee__')) {\n          data = descriptor.value = create(null);\n          defineProperty(this, '__ee__', descriptor);\n          descriptor.value = null;\n        } else {\n          data = this.__ee__;\n        }\n        if (!data[type]) data[type] = listener;else\n        if (typeof data[type] === 'object') data[type].push(listener);else\n        data[type] = [data[type], listener];\n\n        return this;\n      };\n\n      _once2 = function once(type, listener) {\n        var _once, self;\n\n        callable(listener);\n        self = this;\n        on.call(this, type, _once = function once() {\n          off.call(self, type, _once);\n          apply.call(listener, this, arguments);\n        });\n\n        _once.__eeOnceListener__ = listener;\n        return this;\n      };\n\n      off = function off(type, listener) {\n        var data, listeners, candidate, i;\n\n        callable(listener);\n\n        if (!hasOwnProperty.call(this, '__ee__')) return this;\n        data = this.__ee__;\n        if (!data[type]) return this;\n        listeners = data[type];\n\n        if (typeof listeners === 'object') {\n          for (i = 0; candidate = listeners[i]; ++i) {\n            if (candidate === listener ||\n            candidate.__eeOnceListener__ === listener) {\n              if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];else\n              listeners.splice(i, 1);\n            }\n          }\n        } else {\n          if (listeners === listener ||\n          listeners.__eeOnceListener__ === listener) {\n            delete data[type];\n          }\n        }\n\n        return this;\n      };\n\n      emit = function emit(type) {\n        var i, l, listener, listeners, args;\n\n        if (!hasOwnProperty.call(this, '__ee__')) return;\n        listeners = this.__ee__[type];\n        if (!listeners) return;\n\n        if (typeof listeners === 'object') {\n          l = arguments.length;\n          args = new Array(l - 1);\n          for (i = 1; i < l; ++i) {args[i - 1] = arguments[i];}\n\n          listeners = listeners.slice();\n          for (i = 0; listener = listeners[i]; ++i) {\n            apply.call(listener, this, args);\n          }\n        } else {\n          switch (arguments.length) {\n            case 1:\n              call.call(listeners, this);\n              break;\n            case 2:\n              call.call(listeners, this, arguments[1]);\n              break;\n            case 3:\n              call.call(listeners, this, arguments[1], arguments[2]);\n              break;\n            default:\n              l = arguments.length;\n              args = new Array(l - 1);\n              for (i = 1; i < l; ++i) {\n                args[i - 1] = arguments[i];\n              }\n              apply.call(listeners, this, args);}\n\n        }\n      };\n\n      methods = {\n        on: on,\n        once: _once2,\n        off: off,\n        emit: emit };\n\n\n      descriptors = {\n        on: d(on),\n        once: d(_once2),\n        off: d(off),\n        emit: d(emit) };\n\n\n      base = defineProperties({}, descriptors);\n\n      module.exports = exports = function exports(o) {\n        return o == null ? create(base) : defineProperties(Object(o), descriptors);\n      };\n      exports.methods = methods;\n\n    }, { \"d\": 16, \"es5-ext/object/valid-callable\": 54 }], 79: [function (require, module, exports) {\n      exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n        var e, m;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var nBits = -7;\n        var i = isLE ? nBytes - 1 : 0;\n        var d = isLE ? -1 : 1;\n        var s = buffer[offset + i];\n\n        i += d;\n\n        e = s & (1 << -nBits) - 1;\n        s >>= -nBits;\n        nBits += eLen;\n        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n        m = e & (1 << -nBits) - 1;\n        e >>= -nBits;\n        nBits += mLen;\n        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n        if (e === 0) {\n          e = 1 - eBias;\n        } else if (e === eMax) {\n          return m ? NaN : (s ? -1 : 1) * Infinity;\n        } else {\n          m = m + Math.pow(2, mLen);\n          e = e - eBias;\n        }\n        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n      };\n\n      exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n        var e, m, c;\n        var eLen = nBytes * 8 - mLen - 1;\n        var eMax = (1 << eLen) - 1;\n        var eBias = eMax >> 1;\n        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n        var i = isLE ? 0 : nBytes - 1;\n        var d = isLE ? 1 : -1;\n        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n\n        value = Math.abs(value);\n\n        if (isNaN(value) || value === Infinity) {\n          m = isNaN(value) ? 1 : 0;\n          e = eMax;\n        } else {\n          e = Math.floor(Math.log(value) / Math.LN2);\n          if (value * (c = Math.pow(2, -e)) < 1) {\n            e--;\n            c *= 2;\n          }\n          if (e + eBias >= 1) {\n            value += rt / c;\n          } else {\n            value += rt * Math.pow(2, 1 - eBias);\n          }\n          if (value * c >= 2) {\n            e++;\n            c /= 2;\n          }\n\n          if (e + eBias >= eMax) {\n            m = 0;\n            e = eMax;\n          } else if (e + eBias >= 1) {\n            m = (value * c - 1) * Math.pow(2, mLen);\n            e = e + eBias;\n          } else {\n            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n            e = 0;\n          }\n        }\n\n        for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n        e = e << mLen | m;\n        eLen += mLen;\n        for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n        buffer[offset + i - d] |= s * 128;\n      };\n\n    }, {}], 80: [function (require, module, exports) {\n      if (typeof Object.create === 'function') {\n        // implementation from standard node.js 'util' module\n        module.exports = function inherits(ctor, superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true } });\n\n\n        };\n      } else {\n        // old school shim for old browsers\n        module.exports = function inherits(ctor, superCtor) {\n          ctor.super_ = superCtor;\n          var TempCtor = function TempCtor() {};\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        };\n      }\n\n    }, {}], 81: [function (require, module, exports) {\n      /*!\n                                                       * Determine if an object is a Buffer\n                                                       *\n                                                       * @author   Feross Aboukhadijeh <https://feross.org>\n                                                       * @license  MIT\n                                                       */\n\n      // The _isBuffer check is for Safari 5-7 support, because it's missing\n      // Object.prototype.constructor. Remove this eventually\n      module.exports = function (obj) {\n        return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);\n      };\n\n      function isBuffer(obj) {\n        return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);\n      }\n\n      // For Node v0.10 support. Remove this eventually.\n      function isSlowBuffer(obj) {\n        return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));\n      }\n\n    }, {}], 82: [function (require, module, exports) {\n      'use strict';\n\n      var Buffer = require('safe-buffer').Buffer;\n\n      /* Protocol - protocol constants */\n      var protocol = module.exports;\n\n      /* Command code => mnemonic */\n      protocol.types = {\n        0: 'reserved',\n        1: 'connect',\n        2: 'connack',\n        3: 'publish',\n        4: 'puback',\n        5: 'pubrec',\n        6: 'pubrel',\n        7: 'pubcomp',\n        8: 'subscribe',\n        9: 'suback',\n        10: 'unsubscribe',\n        11: 'unsuback',\n        12: 'pingreq',\n        13: 'pingresp',\n        14: 'disconnect',\n        15: 'auth' };\n\n\n      /* Mnemonic => Command code */\n      protocol.codes = {};\n      for (var k in protocol.types) {\n        var v = protocol.types[k];\n        protocol.codes[v] = k;\n      }\n\n      /* Header */\n      protocol.CMD_SHIFT = 4;\n      protocol.CMD_MASK = 0xF0;\n      protocol.DUP_MASK = 0x08;\n      protocol.QOS_MASK = 0x03;\n      protocol.QOS_SHIFT = 1;\n      protocol.RETAIN_MASK = 0x01;\n\n      /* Length */\n      protocol.LENGTH_MASK = 0x7F;\n      protocol.LENGTH_FIN_MASK = 0x80;\n\n      /* Connack */\n      protocol.SESSIONPRESENT_MASK = 0x01;\n      protocol.SESSIONPRESENT_HEADER = Buffer.from([protocol.SESSIONPRESENT_MASK]);\n      protocol.CONNACK_HEADER = Buffer.from([protocol.codes['connack'] << protocol.CMD_SHIFT]);\n\n      /* Connect */\n      protocol.USERNAME_MASK = 0x80;\n      protocol.PASSWORD_MASK = 0x40;\n      protocol.WILL_RETAIN_MASK = 0x20;\n      protocol.WILL_QOS_MASK = 0x18;\n      protocol.WILL_QOS_SHIFT = 3;\n      protocol.WILL_FLAG_MASK = 0x04;\n      protocol.CLEAN_SESSION_MASK = 0x02;\n      protocol.CONNECT_HEADER = Buffer.from([protocol.codes['connect'] << protocol.CMD_SHIFT]);\n\n      /* Properties */\n      protocol.properties = {\n        sessionExpiryInterval: 17,\n        willDelayInterval: 24,\n        receiveMaximum: 33,\n        maximumPacketSize: 39,\n        topicAliasMaximum: 34,\n        requestResponseInformation: 25,\n        requestProblemInformation: 23,\n        userProperties: 38,\n        authenticationMethod: 21,\n        authenticationData: 22,\n        payloadFormatIndicator: 1,\n        messageExpiryInterval: 2,\n        contentType: 3,\n        responseTopic: 8,\n        correlationData: 9,\n        maximumQoS: 36,\n        retainAvailable: 37,\n        assignedClientIdentifier: 18,\n        reasonString: 31,\n        wildcardSubscriptionAvailable: 40,\n        subscriptionIdentifiersAvailable: 41,\n        sharedSubscriptionAvailable: 42,\n        serverKeepAlive: 19,\n        responseInformation: 26,\n        serverReference: 28,\n        topicAlias: 35,\n        subscriptionIdentifier: 11 };\n\n      protocol.propertiesCodes = {};\n      for (var prop in protocol.properties) {\n        var id = protocol.properties[prop];\n        protocol.propertiesCodes[id] = prop;\n      }\n      protocol.propertiesTypes = {\n        sessionExpiryInterval: 'int32',\n        willDelayInterval: 'int32',\n        receiveMaximum: 'int16',\n        maximumPacketSize: 'int32',\n        topicAliasMaximum: 'int16',\n        requestResponseInformation: 'byte',\n        requestProblemInformation: 'byte',\n        userProperties: 'pair',\n        authenticationMethod: 'string',\n        authenticationData: 'binary',\n        payloadFormatIndicator: 'byte',\n        messageExpiryInterval: 'int32',\n        contentType: 'string',\n        responseTopic: 'string',\n        correlationData: 'binary',\n        maximumQoS: 'int8',\n        retainAvailable: 'byte',\n        assignedClientIdentifier: 'string',\n        reasonString: 'string',\n        wildcardSubscriptionAvailable: 'byte',\n        subscriptionIdentifiersAvailable: 'byte',\n        sharedSubscriptionAvailable: 'byte',\n        serverKeepAlive: 'int32',\n        responseInformation: 'string',\n        serverReference: 'string',\n        topicAlias: 'int16',\n        subscriptionIdentifier: 'var' };\n\n\n      function genHeader(type) {\n        return [0, 1, 2].map(function (qos) {\n          return [0, 1].map(function (dup) {\n            return [0, 1].map(function (retain) {\n              var buf = new Buffer(1);\n              buf.writeUInt8(\n              protocol.codes[type] << protocol.CMD_SHIFT | (\n              dup ? protocol.DUP_MASK : 0) |\n              qos << protocol.QOS_SHIFT | retain, 0, true);\n              return buf;\n            });\n          });\n        });\n      }\n\n      /* Publish */\n      protocol.PUBLISH_HEADER = genHeader('publish');\n\n      /* Subscribe */\n      protocol.SUBSCRIBE_HEADER = genHeader('subscribe');\n      protocol.SUBSCRIBE_OPTIONS_QOS_MASK = 0x03;\n      protocol.SUBSCRIBE_OPTIONS_NL_MASK = 0x01;\n      protocol.SUBSCRIBE_OPTIONS_NL_SHIFT = 2;\n      protocol.SUBSCRIBE_OPTIONS_RAP_MASK = 0x01;\n      protocol.SUBSCRIBE_OPTIONS_RAP_SHIFT = 3;\n      protocol.SUBSCRIBE_OPTIONS_RH_MASK = 0x03;\n      protocol.SUBSCRIBE_OPTIONS_RH_SHIFT = 4;\n      protocol.SUBSCRIBE_OPTIONS_RH = [0x00, 0x10, 0x20];\n      protocol.SUBSCRIBE_OPTIONS_NL = 0x04;\n      protocol.SUBSCRIBE_OPTIONS_RAP = 0x08;\n      protocol.SUBSCRIBE_OPTIONS_QOS = [0x00, 0x01, 0x02];\n\n      /* Unsubscribe */\n      protocol.UNSUBSCRIBE_HEADER = genHeader('unsubscribe');\n\n      /* Confirmations */\n      protocol.ACKS = {\n        unsuback: genHeader('unsuback'),\n        puback: genHeader('puback'),\n        pubcomp: genHeader('pubcomp'),\n        pubrel: genHeader('pubrel'),\n        pubrec: genHeader('pubrec') };\n\n\n      protocol.SUBACK_HEADER = Buffer.from([protocol.codes['suback'] << protocol.CMD_SHIFT]);\n\n      /* Protocol versions */\n      protocol.VERSION3 = Buffer.from([3]);\n      protocol.VERSION4 = Buffer.from([4]);\n      protocol.VERSION5 = Buffer.from([5]);\n\n      /* QoS */\n      protocol.QOS = [0, 1, 2].map(function (qos) {\n        return Buffer.from([qos]);\n      });\n\n      /* Empty packets */\n      protocol.EMPTY = {\n        pingreq: Buffer.from([protocol.codes['pingreq'] << 4, 0]),\n        pingresp: Buffer.from([protocol.codes['pingresp'] << 4, 0]),\n        disconnect: Buffer.from([protocol.codes['disconnect'] << 4, 0]) };\n\n\n    }, { \"safe-buffer\": 110 }], 83: [function (require, module, exports) {\n      'use strict';\n\n      var Buffer = require('safe-buffer').Buffer;\n      var writeToStream = require('./writeToStream');\n      var EE = require('events').EventEmitter;\n      var inherits = require('inherits');\n\n      function generate(packet, opts) {\n        var stream = new Accumulator();\n        writeToStream(packet, stream, opts);\n        return stream.concat();\n      }\n\n      function Accumulator() {\n        this._array = new Array(20);\n        this._i = 0;\n      }\n\n      inherits(Accumulator, EE);\n\n      Accumulator.prototype.write = function (chunk) {\n        this._array[this._i++] = chunk;\n        return true;\n      };\n\n      Accumulator.prototype.concat = function () {\n        var length = 0;\n        var lengths = new Array(this._array.length);\n        var list = this._array;\n        var pos = 0;\n        var i;\n        var result;\n\n        for (i = 0; i < list.length && list[i] !== undefined; i++) {\n          if (typeof list[i] !== 'string') lengths[i] = list[i].length;else\n          lengths[i] = Buffer.byteLength(list[i]);\n\n          length += lengths[i];\n        }\n\n        result = Buffer.allocUnsafe(length);\n\n        for (i = 0; i < list.length && list[i] !== undefined; i++) {\n          if (typeof list[i] !== 'string') {\n            list[i].copy(result, pos);\n            pos += lengths[i];\n          } else {\n            result.write(list[i], pos);\n            pos += lengths[i];\n          }\n        }\n\n        return result;\n      };\n\n      module.exports = generate;\n\n    }, { \"./writeToStream\": 89, \"events\": 13, \"inherits\": 80, \"safe-buffer\": 110 }], 84: [function (require, module, exports) {\n      'use strict';\n\n      exports.parser = require('./parser');\n      exports.generate = require('./generate');\n      exports.writeToStream = require('./writeToStream');\n\n    }, { \"./generate\": 83, \"./parser\": 88, \"./writeToStream\": 89 }], 85: [function (require, module, exports) {\n      var DuplexStream = require('readable-stream/duplex'),\n      util = require('util'),\n      Buffer = require('safe-buffer').Buffer;\n\n\n      function BufferList(callback) {\n        if (!(this instanceof BufferList))\n        return new BufferList(callback);\n\n        this._bufs = [];\n        this.length = 0;\n\n        if (typeof callback == 'function') {\n          this._callback = callback;\n\n          var piper = function piper(err) {\n            if (this._callback) {\n              this._callback(err);\n              this._callback = null;\n            }\n          }.bind(this);\n\n          this.on('pipe', function onPipe(src) {\n            src.on('error', piper);\n          });\n          this.on('unpipe', function onUnpipe(src) {\n            src.removeListener('error', piper);\n          });\n        } else {\n          this.append(callback);\n        }\n\n        DuplexStream.call(this);\n      }\n\n\n      util.inherits(BufferList, DuplexStream);\n\n\n      BufferList.prototype._offset = function _offset(offset) {\n        var tot = 0,i = 0,_t;\n        if (offset === 0) return [0, 0];\n        for (; i < this._bufs.length; i++) {\n          _t = tot + this._bufs[i].length;\n          if (offset < _t || i == this._bufs.length - 1)\n          return [i, offset - tot];\n          tot = _t;\n        }\n      };\n\n\n      BufferList.prototype.append = function append(buf) {\n        var i = 0;\n\n        if (Buffer.isBuffer(buf)) {\n          this._appendBuffer(buf);\n        } else if (Array.isArray(buf)) {\n          for (; i < buf.length; i++) {\n            this.append(buf[i]);}\n        } else if (buf instanceof BufferList) {\n          // unwrap argument into individual BufferLists\n          for (; i < buf._bufs.length; i++) {\n            this.append(buf._bufs[i]);}\n        } else if (buf != null) {\n          // coerce number arguments to strings, since Buffer(number) does\n          // uninitialized memory allocation\n          if (typeof buf == 'number')\n          buf = buf.toString();\n\n          this._appendBuffer(Buffer.from(buf));\n        }\n\n        return this;\n      };\n\n\n      BufferList.prototype._appendBuffer = function appendBuffer(buf) {\n        this._bufs.push(buf);\n        this.length += buf.length;\n      };\n\n\n      BufferList.prototype._write = function _write(buf, encoding, callback) {\n        this._appendBuffer(buf);\n\n        if (typeof callback == 'function')\n        callback();\n      };\n\n\n      BufferList.prototype._read = function _read(size) {\n        if (!this.length)\n        return this.push(null);\n\n        size = Math.min(size, this.length);\n        this.push(this.slice(0, size));\n        this.consume(size);\n      };\n\n\n      BufferList.prototype.end = function end(chunk) {\n        DuplexStream.prototype.end.call(this, chunk);\n\n        if (this._callback) {\n          this._callback(null, this.slice());\n          this._callback = null;\n        }\n      };\n\n\n      BufferList.prototype.get = function get(index) {\n        return this.slice(index, index + 1)[0];\n      };\n\n\n      BufferList.prototype.slice = function slice(start, end) {\n        if (typeof start == 'number' && start < 0)\n        start += this.length;\n        if (typeof end == 'number' && end < 0)\n        end += this.length;\n        return this.copy(null, 0, start, end);\n      };\n\n\n      BufferList.prototype.copy = function copy(dst, dstStart, srcStart, srcEnd) {\n        if (typeof srcStart != 'number' || srcStart < 0)\n        srcStart = 0;\n        if (typeof srcEnd != 'number' || srcEnd > this.length)\n        srcEnd = this.length;\n        if (srcStart >= this.length)\n        return dst || Buffer.alloc(0);\n        if (srcEnd <= 0)\n        return dst || Buffer.alloc(0);\n\n        var copy = !!dst,\n        off = this._offset(srcStart),\n        len = srcEnd - srcStart,\n        bytes = len,\n        bufoff = copy && dstStart || 0,\n        start = off[1],\n        l,\n        i;\n\n        // copy/slice everything\n        if (srcStart === 0 && srcEnd == this.length) {\n          if (!copy) {// slice, but full concat if multiple buffers\n            return this._bufs.length === 1 ?\n            this._bufs[0] :\n            Buffer.concat(this._bufs, this.length);\n          }\n\n          // copy, need to copy individual buffers\n          for (i = 0; i < this._bufs.length; i++) {\n            this._bufs[i].copy(dst, bufoff);\n            bufoff += this._bufs[i].length;\n          }\n\n          return dst;\n        }\n\n        // easy, cheap case where it's a subset of one of the buffers\n        if (bytes <= this._bufs[off[0]].length - start) {\n          return copy ?\n          this._bufs[off[0]].copy(dst, dstStart, start, start + bytes) :\n          this._bufs[off[0]].slice(start, start + bytes);\n        }\n\n        if (!copy) // a slice, we need something to copy in to\n          dst = Buffer.allocUnsafe(len);\n\n        for (i = off[0]; i < this._bufs.length; i++) {\n          l = this._bufs[i].length - start;\n\n          if (bytes > l) {\n            this._bufs[i].copy(dst, bufoff, start);\n          } else {\n            this._bufs[i].copy(dst, bufoff, start, start + bytes);\n            break;\n          }\n\n          bufoff += l;\n          bytes -= l;\n\n          if (start)\n          start = 0;\n        }\n\n        return dst;\n      };\n\n      BufferList.prototype.shallowSlice = function shallowSlice(start, end) {\n        start = start || 0;\n        end = end || this.length;\n\n        if (start < 0)\n        start += this.length;\n        if (end < 0)\n        end += this.length;\n\n        var startOffset = this._offset(start),\n        endOffset = this._offset(end),\n        buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);\n\n        if (endOffset[1] == 0)\n        buffers.pop();else\n\n        buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);\n\n        if (startOffset[1] != 0)\n        buffers[0] = buffers[0].slice(startOffset[1]);\n\n        return new BufferList(buffers);\n      };\n\n      BufferList.prototype.toString = function toString(encoding, start, end) {\n        return this.slice(start, end).toString(encoding);\n      };\n\n      BufferList.prototype.consume = function consume(bytes) {\n        while (this._bufs.length) {\n          if (bytes >= this._bufs[0].length) {\n            bytes -= this._bufs[0].length;\n            this.length -= this._bufs[0].length;\n            this._bufs.shift();\n          } else {\n            this._bufs[0] = this._bufs[0].slice(bytes);\n            this.length -= bytes;\n            break;\n          }\n        }\n        return this;\n      };\n\n\n      BufferList.prototype.duplicate = function duplicate() {\n        var i = 0,\n        copy = new BufferList();\n\n        for (; i < this._bufs.length; i++) {\n          copy.append(this._bufs[i]);}\n\n        return copy;\n      };\n\n\n      BufferList.prototype.destroy = function destroy() {\n        this._bufs.length = 0;\n        this.length = 0;\n        this.push(null);\n      };\n\n\n      (function () {\n        var methods = {\n          'readDoubleBE': 8,\n          'readDoubleLE': 8,\n          'readFloatBE': 4,\n          'readFloatLE': 4,\n          'readInt32BE': 4,\n          'readInt32LE': 4,\n          'readUInt32BE': 4,\n          'readUInt32LE': 4,\n          'readInt16BE': 2,\n          'readInt16LE': 2,\n          'readUInt16BE': 2,\n          'readUInt16LE': 2,\n          'readInt8': 1,\n          'readUInt8': 1 };\n\n\n        for (var m in methods) {\n          (function (m) {\n            BufferList.prototype[m] = function (offset) {\n              return this.slice(offset, offset + methods[m])[m](0);\n            };\n          })(m);\n        }\n      })();\n\n\n      module.exports = BufferList;\n\n    }, { \"readable-stream/duplex\": 97, \"safe-buffer\": 110, \"util\": 117 }], 86: [function (require, module, exports) {\n      'use strict';\n\n      var Buffer = require('safe-buffer').Buffer;\n      var max = 65536;\n      var cache = {};\n\n      function generateBuffer(i) {\n        var buffer = Buffer.allocUnsafe(2);\n        buffer.writeUInt8(i >> 8, 0);\n        buffer.writeUInt8(i & 0x00FF, 0 + 1);\n\n        return buffer;\n      }\n\n      function generateCache() {\n        for (var i = 0; i < max; i++) {\n          cache[i] = generateBuffer(i);\n        }\n      }\n\n      /**\n         * calcVariableByteIntLength - calculate the variable byte integer\n         * length field\n         *\n         * @api private\n         */\n      function calcVariableByteIntLength(length) {\n        if (length >= 0 && length < 128) return 1;else\n        if (length >= 128 && length < 16384) return 2;else\n        if (length >= 16384 && length < 2097152) return 3;else\n        if (length >= 2097152 && length < 268435456) return 4;else\n        return 0;\n      }\n\n      function genBufVariableByteInt(num) {\n        var digit = 0;\n        var pos = 0;\n        var length = calcVariableByteIntLength(num);\n        var buffer = Buffer.allocUnsafe(length);\n\n        do {\n          digit = num % 128 | 0;\n          num = num / 128 | 0;\n          if (num > 0) digit = digit | 0x80;\n\n          buffer.writeUInt8(digit, pos++);\n        } while (num > 0);\n\n        return {\n          data: buffer,\n          length: length };\n\n      }\n\n      function generate4ByteBuffer(num) {\n        var buffer = Buffer.allocUnsafe(4);\n        buffer.writeUInt32BE(num, 0);\n        return buffer;\n      }\n\n      module.exports = {\n        cache: cache,\n        generateCache: generateCache,\n        generateNumber: generateBuffer,\n        genBufVariableByteInt: genBufVariableByteInt,\n        generate4ByteBuffer: generate4ByteBuffer };\n\n\n    }, { \"safe-buffer\": 110 }], 87: [function (require, module, exports) {\n\n      function Packet() {\n        this.cmd = null;\n        this.retain = false;\n        this.qos = 0;\n        this.dup = false;\n        this.length = -1;\n        this.topic = null;\n        this.payload = null;\n      }\n\n      module.exports = Packet;\n\n    }, {}], 88: [function (require, module, exports) {\n      'use strict';\n\n      var bl = require('bl');\n      var inherits = require('inherits');\n      var EE = require('events').EventEmitter;\n      var Packet = require('./packet');\n      var constants = require('./constants');\n\n      function Parser(opt) {\n        if (!(this instanceof Parser)) return new Parser(opt);\n\n        this.settings = opt || {};\n\n        this._states = [\n        '_parseHeader',\n        '_parseLength',\n        '_parsePayload',\n        '_newPacket'];\n\n\n        this._resetState();\n      }\n\n      inherits(Parser, EE);\n\n      Parser.prototype._resetState = function () {\n        this.packet = new Packet();\n        this.error = null;\n        this._list = bl();\n        this._stateCounter = 0;\n      };\n\n      Parser.prototype.parse = function (buf) {\n        if (this.error) this._resetState();\n\n        this._list.append(buf);\n\n        while ((this.packet.length !== -1 || this._list.length > 0) &&\n        this[this._states[this._stateCounter]]() &&\n        !this.error) {\n          this._stateCounter++;\n\n          if (this._stateCounter >= this._states.length) this._stateCounter = 0;\n        }\n\n        return this._list.length;\n      };\n\n      Parser.prototype._parseHeader = function () {\n        // There is at least one byte in the buffer\n        var zero = this._list.readUInt8(0);\n        this.packet.cmd = constants.types[zero >> constants.CMD_SHIFT];\n        this.packet.retain = (zero & constants.RETAIN_MASK) !== 0;\n        this.packet.qos = zero >> constants.QOS_SHIFT & constants.QOS_MASK;\n        this.packet.dup = (zero & constants.DUP_MASK) !== 0;\n\n        this._list.consume(1);\n\n        return true;\n      };\n\n      Parser.prototype._parseLength = function () {\n        // There is at least one byte in the list\n        var result = this._parseVarByteNum(true);\n\n        if (result) {\n          this.packet.length = result.value;\n          this._list.consume(result.bytes);\n        }\n\n        return !!result;\n      };\n\n      Parser.prototype._parsePayload = function () {\n        var result = false;\n\n        // Do we have a payload? Do we have enough data to complete the payload?\n        // PINGs have no payload\n        if (this.packet.length === 0 || this._list.length >= this.packet.length) {\n          this._pos = 0;\n\n          switch (this.packet.cmd) {\n            case 'connect':\n              this._parseConnect();\n              break;\n            case 'connack':\n              this._parseConnack();\n              break;\n            case 'publish':\n              this._parsePublish();\n              break;\n            case 'puback':\n            case 'pubrec':\n            case 'pubrel':\n            case 'pubcomp':\n              this._parseConfirmation();\n              break;\n            case 'subscribe':\n              this._parseSubscribe();\n              break;\n            case 'suback':\n              this._parseSuback();\n              break;\n            case 'unsubscribe':\n              this._parseUnsubscribe();\n              break;\n            case 'unsuback':\n              this._parseUnsuback();\n              break;\n            case 'pingreq':\n            case 'pingresp':\n              // These are empty, nothing to do\n              break;\n            case 'disconnect':\n              this._parseDisconnect();\n              break;\n            case 'auth':\n              this._parseAuth();\n              break;\n            default:\n              this._emitError(new Error('Not supported'));}\n\n\n          result = true;\n        }\n\n        return result;\n      };\n\n      Parser.prototype._parseConnect = function () {\n        var protocolId; // Protocol ID\n        var clientId; // Client ID\n        var topic; // Will topic\n        var payload; // Will payload\n        var password; // Password\n        var username; // Username\n        var flags = {};\n        var packet = this.packet;\n\n        // Parse protocolId\n        protocolId = this._parseString();\n\n        if (protocolId === null) return this._emitError(new Error('Cannot parse protocolId'));\n        if (protocolId !== 'MQTT' && protocolId !== 'MQIsdp') {\n          return this._emitError(new Error('Invalid protocolId'));\n        }\n\n        packet.protocolId = protocolId;\n\n        // Parse constants version number\n        if (this._pos >= this._list.length) return this._emitError(new Error('Packet too short'));\n\n        packet.protocolVersion = this._list.readUInt8(this._pos);\n\n        if (packet.protocolVersion !== 3 && packet.protocolVersion !== 4 && packet.protocolVersion !== 5) {\n          return this._emitError(new Error('Invalid protocol version'));\n        }\n\n        this._pos++;\n\n        if (this._pos >= this._list.length) {\n          return this._emitError(new Error('Packet too short'));\n        }\n\n        // Parse connect flags\n        flags.username = this._list.readUInt8(this._pos) & constants.USERNAME_MASK;\n        flags.password = this._list.readUInt8(this._pos) & constants.PASSWORD_MASK;\n        flags.will = this._list.readUInt8(this._pos) & constants.WILL_FLAG_MASK;\n\n        if (flags.will) {\n          packet.will = {};\n          packet.will.retain = (this._list.readUInt8(this._pos) & constants.WILL_RETAIN_MASK) !== 0;\n          packet.will.qos = (this._list.readUInt8(this._pos) &\n          constants.WILL_QOS_MASK) >> constants.WILL_QOS_SHIFT;\n        }\n\n        packet.clean = (this._list.readUInt8(this._pos) & constants.CLEAN_SESSION_MASK) !== 0;\n        this._pos++;\n\n        // Parse keepalive\n        packet.keepalive = this._parseNum();\n        if (packet.keepalive === -1) return this._emitError(new Error('Packet too short'));\n\n        // parse properties\n        if (packet.protocolVersion === 5) {\n          var properties = this._parseProperties();\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n        // Parse clientId\n        clientId = this._parseString();\n        if (clientId === null) return this._emitError(new Error('Packet too short'));\n        packet.clientId = clientId;\n\n        if (flags.will) {\n          if (packet.protocolVersion === 5) {\n            var willProperties = this._parseProperties();\n            if (Object.getOwnPropertyNames(willProperties).length) {\n              packet.will.properties = willProperties;\n            }\n          }\n          // Parse will topic\n          topic = this._parseString();\n          if (topic === null) return this._emitError(new Error('Cannot parse will topic'));\n          packet.will.topic = topic;\n\n          // Parse will payload\n          payload = this._parseBuffer();\n          if (payload === null) return this._emitError(new Error('Cannot parse will payload'));\n          packet.will.payload = payload;\n        }\n\n        // Parse username\n        if (flags.username) {\n          username = this._parseString();\n          if (username === null) return this._emitError(new Error('Cannot parse username'));\n          packet.username = username;\n        }\n\n        // Parse password\n        if (flags.password) {\n          password = this._parseBuffer();\n          if (password === null) return this._emitError(new Error('Cannot parse password'));\n          packet.password = password;\n        }\n        // need for right parse auth packet and self set up\n        this.settings = packet;\n\n        return packet;\n      };\n\n      Parser.prototype._parseConnack = function () {\n        var packet = this.packet;\n\n        if (this._list.length < 2) return null;\n\n        packet.sessionPresent = !!(this._list.readUInt8(this._pos++) & constants.SESSIONPRESENT_MASK);\n        if (this.settings.protocolVersion === 5) {\n          packet.reasonCode = this._list.readUInt8(this._pos++);\n        } else {\n          packet.returnCode = this._list.readUInt8(this._pos++);\n        }\n\n        if (packet.returnCode === -1 || packet.reasonCode === -1) return this._emitError(new Error('Cannot parse return code'));\n        // mqtt 5 properties\n        if (this.settings.protocolVersion === 5) {\n          var properties = this._parseProperties();\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n      };\n\n      Parser.prototype._parsePublish = function () {\n        var packet = this.packet;\n        packet.topic = this._parseString();\n\n        if (packet.topic === null) return this._emitError(new Error('Cannot parse topic'));\n\n        // Parse messageId\n        if (packet.qos > 0) if (!this._parseMessageId()) {return;}\n\n        // Properties mqtt 5\n        if (this.settings.protocolVersion === 5) {\n          var properties = this._parseProperties();\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n\n        packet.payload = this._list.slice(this._pos, packet.length);\n      };\n\n      Parser.prototype._parseSubscribe = function () {\n        var packet = this.packet;\n        var topic;\n        var options;\n        var qos;\n        var rh;\n        var rap;\n        var nl;\n        var subscription;\n\n        if (packet.qos !== 1) {\n          return this._emitError(new Error('Wrong subscribe header'));\n        }\n\n        packet.subscriptions = [];\n\n        if (!this._parseMessageId()) {return;}\n\n        // Properties mqtt 5\n        if (this.settings.protocolVersion === 5) {\n          var properties = this._parseProperties();\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n\n        while (this._pos < packet.length) {\n          // Parse topic\n          topic = this._parseString();\n          if (topic === null) return this._emitError(new Error('Cannot parse topic'));\n\n          options = this._parseByte();\n          qos = options & constants.SUBSCRIBE_OPTIONS_QOS_MASK;\n          nl = (options >> constants.SUBSCRIBE_OPTIONS_NL_SHIFT & constants.SUBSCRIBE_OPTIONS_NL_MASK) !== 0;\n          rap = (options >> constants.SUBSCRIBE_OPTIONS_RAP_SHIFT & constants.SUBSCRIBE_OPTIONS_RAP_MASK) !== 0;\n          rh = options >> constants.SUBSCRIBE_OPTIONS_RH_SHIFT & constants.SUBSCRIBE_OPTIONS_RH_MASK;\n\n          subscription = { topic: topic, qos: qos };\n\n          // mqtt 5 options\n          if (this.settings.protocolVersion === 5) {\n            subscription.nl = nl;\n            subscription.rap = rap;\n            subscription.rh = rh;\n          }\n\n          // Push pair to subscriptions\n          packet.subscriptions.push(subscription);\n        }\n      };\n\n      Parser.prototype._parseSuback = function () {\n        var packet = this.packet;\n        this.packet.granted = [];\n\n        if (!this._parseMessageId()) {return;}\n\n        // Properties mqtt 5\n        if (this.settings.protocolVersion === 5) {\n          var properties = this._parseProperties();\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n\n        // Parse granted QoSes\n        while (this._pos < this.packet.length) {\n          this.packet.granted.push(this._list.readUInt8(this._pos++));\n        }\n      };\n\n      Parser.prototype._parseUnsubscribe = function () {\n        var packet = this.packet;\n\n        packet.unsubscriptions = [];\n\n        // Parse messageId\n        if (!this._parseMessageId()) {return;}\n\n        // Properties mqtt 5\n        if (this.settings.protocolVersion === 5) {\n          var properties = this._parseProperties();\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n\n        while (this._pos < packet.length) {\n          var topic;\n\n          // Parse topic\n          topic = this._parseString();\n          if (topic === null) return this._emitError(new Error('Cannot parse topic'));\n\n          // Push topic to unsubscriptions\n          packet.unsubscriptions.push(topic);\n        }\n      };\n\n      Parser.prototype._parseUnsuback = function () {\n        var packet = this.packet;\n        if (!this._parseMessageId()) return this._emitError(new Error('Cannot parse messageId'));\n        // Properties mqtt 5\n        if (this.settings.protocolVersion === 5) {\n          var properties = this._parseProperties();\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n          // Parse granted QoSes\n          packet.granted = [];\n          while (this._pos < this.packet.length) {\n            this.packet.granted.push(this._list.readUInt8(this._pos++));\n          }\n        }\n      };\n\n      // parse packets like puback, pubrec, pubrel, pubcomp\n      Parser.prototype._parseConfirmation = function () {\n        var packet = this.packet;\n\n        this._parseMessageId();\n\n        if (this.settings.protocolVersion === 5) {\n          if (packet.length > 2) {\n            // response code\n            packet.reasonCode = this._parseByte();\n            // properies mqtt 5\n            var properties = this._parseProperties();\n            if (Object.getOwnPropertyNames(properties).length) {\n              packet.properties = properties;\n            }\n          }\n        }\n\n        return true;\n      };\n\n      // parse disconnect packet\n      Parser.prototype._parseDisconnect = function () {\n        var packet = this.packet;\n\n        if (this.settings.protocolVersion === 5) {\n          // response code\n          packet.reasonCode = this._parseByte();\n          // properies mqtt 5\n          var properties = this._parseProperties();\n          if (Object.getOwnPropertyNames(properties).length) {\n            packet.properties = properties;\n          }\n        }\n\n        return true;\n      };\n\n      // parse auth packet\n      Parser.prototype._parseAuth = function () {\n        var packet = this.packet;\n\n        if (this.settings.protocolVersion !== 5) {\n          return this._emitError(new Error('Not supported auth packet for this version MQTT'));\n        }\n\n        // response code\n        packet.reasonCode = this._parseByte();\n        // properies mqtt 5\n        var properties = this._parseProperties();\n        if (Object.getOwnPropertyNames(properties).length) {\n          packet.properties = properties;\n        }\n\n        return true;\n      };\n\n      Parser.prototype._parseMessageId = function () {\n        var packet = this.packet;\n\n        packet.messageId = this._parseNum();\n\n        if (packet.messageId === null) {\n          this._emitError(new Error('Cannot parse messageId'));\n          return false;\n        }\n\n        return true;\n      };\n\n      Parser.prototype._parseString = function (maybeBuffer) {\n        var length = this._parseNum();\n        var result;\n        var end = length + this._pos;\n\n        if (length === -1 || end > this._list.length || end > this.packet.length) return null;\n\n        result = this._list.toString('utf8', this._pos, end);\n        this._pos += length;\n\n        return result;\n      };\n\n      Parser.prototype._parseStringPair = function () {\n        return {\n          name: this._parseString(),\n          value: this._parseString() };\n\n      };\n\n      Parser.prototype._parseBuffer = function () {\n        var length = this._parseNum();\n        var result;\n        var end = length + this._pos;\n\n        if (length === -1 || end > this._list.length || end > this.packet.length) return null;\n\n        result = this._list.slice(this._pos, end);\n\n        this._pos += length;\n\n        return result;\n      };\n\n      Parser.prototype._parseNum = function () {\n        if (this._list.length - this._pos < 2) return -1;\n\n        var result = this._list.readUInt16BE(this._pos);\n        this._pos += 2;\n\n        return result;\n      };\n\n      Parser.prototype._parse4ByteNum = function () {\n        if (this._list.length - this._pos < 4) return -1;\n\n        var result = this._list.readUInt32BE(this._pos);\n        this._pos += 4;\n\n        return result;\n      };\n\n      Parser.prototype._parseVarByteNum = function (fullInfoFlag) {\n        var bytes = 0;\n        var mul = 1;\n        var length = 0;\n        var result = true;\n        var current;\n        var padding = this._pos ? this._pos : 0;\n\n        while (bytes < 5) {\n          current = this._list.readUInt8(padding + bytes++);\n          length += mul * (current & constants.LENGTH_MASK);\n          mul *= 0x80;\n\n          if ((current & constants.LENGTH_FIN_MASK) === 0) break;\n          if (this._list.length <= bytes) {\n            result = false;\n            break;\n          }\n        }\n\n        if (padding) {\n          this._pos += bytes;\n        }\n\n        result = result ?\n        fullInfoFlag ? {\n          bytes: bytes,\n          value: length } :\n        length :\n        false;\n\n        return result;\n      };\n\n      Parser.prototype._parseByte = function () {\n        var result = this._list.readUInt8(this._pos);\n        this._pos++;\n        return result;\n      };\n\n      Parser.prototype._parseByType = function (type) {\n        switch (type) {\n          case 'byte':{\n              return this._parseByte() !== 0;\n            }\n          case 'int8':{\n              return this._parseByte();\n            }\n          case 'int16':{\n              return this._parseNum();\n            }\n          case 'int32':{\n              return this._parse4ByteNum();\n            }\n          case 'var':{\n              return this._parseVarByteNum();\n            }\n          case 'string':{\n              return this._parseString();\n            }\n          case 'pair':{\n              return this._parseStringPair();\n            }\n          case 'binary':{\n              return this._parseBuffer();\n            }}\n\n      };\n\n      Parser.prototype._parseProperties = function () {\n        var length = this._parseVarByteNum();\n        var start = this._pos;\n        var end = start + length;\n        var result = {};\n        while (this._pos < end) {\n          var type = this._parseByte();\n          var name = constants.propertiesCodes[type];\n          if (!name) {\n            this._emitError(new Error('Unknown property'));\n            return false;\n          }\n          // user properties process\n          if (name === 'userProperties') {\n            if (!result[name]) {\n              result[name] = {};\n            }\n            var currentUserProperty = this._parseByType(constants.propertiesTypes[name]);\n            result[name][currentUserProperty.name] = currentUserProperty.value;\n            continue;\n          }\n          result[name] = this._parseByType(constants.propertiesTypes[name]);\n        }\n        return result;\n      };\n\n      Parser.prototype._newPacket = function () {\n        if (this.packet) {\n          this._list.consume(this.packet.length);\n          this.emit('packet', this.packet);\n        }\n\n        this.packet = new Packet();\n\n        this._pos = 0;\n\n        return true;\n      };\n\n      Parser.prototype._emitError = function (err) {\n        this.error = err;\n        this.emit('error', err);\n      };\n\n      module.exports = Parser;\n\n    }, { \"./constants\": 82, \"./packet\": 87, \"bl\": 85, \"events\": 13, \"inherits\": 80 }], 89: [function (require, module, exports) {\n      'use strict';\n\n      var protocol = require('./constants');\n      var Buffer = require('safe-buffer').Buffer;\n      var empty = Buffer.allocUnsafe(0);\n      var zeroBuf = Buffer.from([0]);\n      var numbers = require('./numbers');\n      var nextTick = require('process-nextick-args').nextTick;\n\n      var numCache = numbers.cache;\n      var generateNumber = numbers.generateNumber;\n      var generateCache = numbers.generateCache;\n      var genBufVariableByteInt = numbers.genBufVariableByteInt;\n      var generate4ByteBuffer = numbers.generate4ByteBuffer;\n      var writeNumber = writeNumberCached;\n      var toGenerate = true;\n\n      function generate(packet, stream, opts) {\n        if (stream.cork) {\n          stream.cork();\n          nextTick(uncork, stream);\n        }\n\n        if (toGenerate) {\n          toGenerate = false;\n          generateCache();\n        }\n\n        switch (packet.cmd) {\n          case 'connect':\n            return connect(packet, stream, opts);\n          case 'connack':\n            return connack(packet, stream, opts);\n          case 'publish':\n            return publish(packet, stream, opts);\n          case 'puback':\n          case 'pubrec':\n          case 'pubrel':\n          case 'pubcomp':\n            return confirmation(packet, stream, opts);\n          case 'subscribe':\n            return subscribe(packet, stream, opts);\n          case 'suback':\n            return suback(packet, stream, opts);\n          case 'unsubscribe':\n            return unsubscribe(packet, stream, opts);\n          case 'unsuback':\n            return unsuback(packet, stream, opts);\n          case 'pingreq':\n          case 'pingresp':\n            return emptyPacket(packet, stream, opts);\n          case 'disconnect':\n            return disconnect(packet, stream, opts);\n          case 'auth':\n            return auth(packet, stream, opts);\n          default:\n            stream.emit('error', new Error('Unknown command'));\n            return false;}\n\n      }\n      /**\n         * Controls numbers cache.\n         * Set to \"false\" to allocate buffers on-the-flight instead of pre-generated cache\n         */\n      Object.defineProperty(generate, 'cacheNumbers', {\n        get: function get() {\n          return writeNumber === writeNumberCached;\n        },\n        set: function set(value) {\n          if (value) {\n            if (!numCache || Object.keys(numCache).length === 0) toGenerate = true;\n            writeNumber = writeNumberCached;\n          } else {\n            toGenerate = false;\n            writeNumber = writeNumberGenerated;\n          }\n        } });\n\n\n      function uncork(stream) {\n        stream.uncork();\n      }\n\n      function connect(packet, stream, opts) {\n        var settings = packet || {};\n        var protocolId = settings.protocolId || 'MQTT';\n        var protocolVersion = settings.protocolVersion || 4;\n        var will = settings.will;\n        var clean = settings.clean;\n        var keepalive = settings.keepalive || 0;\n        var clientId = settings.clientId || '';\n        var username = settings.username;\n        var password = settings.password;\n        /* mqtt5 new oprions */\n        var properties = settings.properties;\n\n        if (clean === undefined) clean = true;\n\n        var length = 0;\n\n        // Must be a string and non-falsy\n        if (!protocolId ||\n        typeof protocolId !== 'string' && !Buffer.isBuffer(protocolId)) {\n          stream.emit('error', new Error('Invalid protocolId'));\n          return false;\n        } else length += protocolId.length + 2;\n\n        // Must be 3 or 4 or 5\n        if (protocolVersion !== 3 && protocolVersion !== 4 && protocolVersion !== 5) {\n          stream.emit('error', new Error('Invalid protocol version'));\n          return false;\n        } else length += 1;\n\n        // ClientId might be omitted in 3.1.1, but only if cleanSession is set to 1\n        if ((typeof clientId === 'string' || Buffer.isBuffer(clientId)) && (\n        clientId || protocolVersion === 4) && (clientId || clean)) {\n          length += clientId.length + 2;\n        } else {\n          if (protocolVersion < 4) {\n            stream.emit('error', new Error('clientId must be supplied before 3.1.1'));\n            return false;\n          }\n          if (clean * 1 === 0) {\n            stream.emit('error', new Error('clientId must be given if cleanSession set to 0'));\n            return false;\n          }\n        }\n\n        // Must be a two byte number\n        if (typeof keepalive !== 'number' ||\n        keepalive < 0 ||\n        keepalive > 65535 ||\n        keepalive % 1 !== 0) {\n          stream.emit('error', new Error('Invalid keepalive'));\n          return false;\n        } else length += 2;\n\n        // Connect flags\n        length += 1;\n\n        // Properties\n        if (protocolVersion === 5) {\n          var propertiesData = getProperties(stream, properties);\n          length += propertiesData.length;\n        }\n\n        // If will exists...\n        if (will) {\n          // It must be an object\n          if (typeof will !== 'object') {\n            stream.emit('error', new Error('Invalid will'));\n            return false;\n          }\n          // It must have topic typeof string\n          if (!will.topic || typeof will.topic !== 'string') {\n            stream.emit('error', new Error('Invalid will topic'));\n            return false;\n          } else {\n            length += Buffer.byteLength(will.topic) + 2;\n          }\n\n          // Payload\n          if (will.payload) {\n            if (will.payload.length >= 0) {\n              if (typeof will.payload === 'string') {\n                length += Buffer.byteLength(will.payload) + 2;\n              } else {\n                length += will.payload.length + 2;\n              }\n            } else {\n              stream.emit('error', new Error('Invalid will payload'));\n              return false;\n            }\n\n            // will properties\n            var willProperties = {};\n            if (protocolVersion === 5) {\n              willProperties = getProperties(stream, will.properties);\n              length += willProperties.length;\n            }\n          }\n        }\n\n        // Username\n        var providedUsername = false;\n        if (username != null) {\n          if (isStringOrBuffer(username)) {\n            providedUsername = true;\n            length += Buffer.byteLength(username) + 2;\n          } else {\n            stream.emit('error', new Error('Invalid username'));\n            return false;\n          }\n        }\n\n        // Password\n        if (password != null) {\n          if (!providedUsername) {\n            stream.emit('error', new Error('Username is required to use password'));\n            return false;\n          }\n\n          if (isStringOrBuffer(password)) {\n            length += byteLength(password) + 2;\n          } else {\n            stream.emit('error', new Error('Invalid password'));\n            return false;\n          }\n        }\n\n        // Generate header\n        stream.write(protocol.CONNECT_HEADER);\n\n        // Generate length\n        writeVarByteInt(stream, length);\n\n        // Generate protocol ID\n        writeStringOrBuffer(stream, protocolId);\n        stream.write(\n        protocolVersion === 4 ?\n        protocol.VERSION4 :\n        protocolVersion === 5 ?\n        protocol.VERSION5 :\n        protocol.VERSION3);\n\n\n        // Connect flags\n        var flags = 0;\n        flags |= username != null ? protocol.USERNAME_MASK : 0;\n        flags |= password != null ? protocol.PASSWORD_MASK : 0;\n        flags |= will && will.retain ? protocol.WILL_RETAIN_MASK : 0;\n        flags |= will && will.qos ? will.qos << protocol.WILL_QOS_SHIFT : 0;\n        flags |= will ? protocol.WILL_FLAG_MASK : 0;\n        flags |= clean ? protocol.CLEAN_SESSION_MASK : 0;\n\n        stream.write(Buffer.from([flags]));\n\n        // Keepalive\n        writeNumber(stream, keepalive);\n\n        // Properties\n        if (protocolVersion === 5) {\n          propertiesData.write();\n        }\n\n        // Client ID\n        writeStringOrBuffer(stream, clientId);\n\n        // Will\n        if (will) {\n          if (protocolVersion === 5) {\n            willProperties.write();\n          }\n          writeString(stream, will.topic);\n          writeStringOrBuffer(stream, will.payload);\n        }\n\n        // Username and password\n        if (username != null) {\n          writeStringOrBuffer(stream, username);\n        }\n        if (password != null) {\n          writeStringOrBuffer(stream, password);\n        }\n        // This is a small packet that happens only once on a stream\n        // We assume the stream is always free to receive more data after this\n        return true;\n      }\n\n      function connack(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var rc = version === 5 ? settings.reasonCode : settings.returnCode;\n        var properties = settings.properties;\n        var length = 2; // length of rc and sessionHeader\n\n        // Check return code\n        if (typeof rc !== 'number') {\n          stream.emit('error', new Error('Invalid return code'));\n          return false;\n        }\n        // mqtt5 properties\n        var propertiesData = null;\n        if (version === 5) {\n          propertiesData = getProperties(stream, properties);\n          length += propertiesData.length;\n        }\n\n        stream.write(protocol.CONNACK_HEADER);\n        // length\n        writeVarByteInt(stream, length);\n        stream.write(settings.sessionPresent ? protocol.SESSIONPRESENT_HEADER : zeroBuf);\n\n        stream.write(Buffer.from([rc]));\n        if (propertiesData != null) {\n          propertiesData.write();\n        }\n        return true;\n      }\n\n      function publish(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var qos = settings.qos || 0;\n        var retain = settings.retain ? protocol.RETAIN_MASK : 0;\n        var topic = settings.topic;\n        var payload = settings.payload || empty;\n        var id = settings.messageId;\n        var properties = settings.properties;\n\n        var length = 0;\n\n        // Topic must be a non-empty string or Buffer\n        if (typeof topic === 'string') length += Buffer.byteLength(topic) + 2;else\n        if (Buffer.isBuffer(topic)) length += topic.length + 2;else\n        {\n          stream.emit('error', new Error('Invalid topic'));\n          return false;\n        }\n\n        // Get the payload length\n        if (!Buffer.isBuffer(payload)) length += Buffer.byteLength(payload);else\n        length += payload.length;\n\n        // Message ID must a number if qos > 0\n        if (qos && typeof id !== 'number') {\n          stream.emit('error', new Error('Invalid messageId'));\n          return false;\n        } else if (qos) length += 2;\n\n        // mqtt5 properties\n        var propertiesData = null;\n        if (version === 5) {\n          propertiesData = getProperties(stream, properties);\n          length += propertiesData.length;\n        }\n\n        // Header\n        stream.write(protocol.PUBLISH_HEADER[qos][settings.dup ? 1 : 0][retain ? 1 : 0]);\n\n        // Remaining length\n        writeVarByteInt(stream, length);\n\n        // Topic\n        writeNumber(stream, byteLength(topic));\n        stream.write(topic);\n\n        // Message ID\n        if (qos > 0) writeNumber(stream, id);\n\n        // Properties\n        if (propertiesData != null) {\n          propertiesData.write();\n        }\n\n        // Payload\n        return stream.write(payload);\n      }\n\n      /* Puback, pubrec, pubrel and pubcomp */\n      function confirmation(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var type = settings.cmd || 'puback';\n        var id = settings.messageId;\n        var dup = settings.dup && type === 'pubrel' ? protocol.DUP_MASK : 0;\n        var qos = 0;\n        var reasonCode = settings.reasonCode;\n        var properties = settings.properties;\n        var length = version === 5 ? 3 : 2;\n\n        if (type === 'pubrel') qos = 1;\n\n        // Check message ID\n        if (typeof id !== 'number') {\n          stream.emit('error', new Error('Invalid messageId'));\n          return false;\n        }\n\n        // properies mqtt 5\n        var propertiesData = null;\n        if (version === 5) {\n          propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);\n          if (!propertiesData) {return false;}\n          length += propertiesData.length;\n        }\n\n        // Header\n        stream.write(protocol.ACKS[type][qos][dup][0]);\n\n        // Length\n        writeVarByteInt(stream, length);\n\n        // Message ID\n        writeNumber(stream, id);\n\n        // reason code in header\n        if (version === 5) {\n          stream.write(Buffer.from([reasonCode]));\n        }\n\n        // properies mqtt 5\n        if (propertiesData !== null) {\n          propertiesData.write();\n        }\n        return true;\n      }\n\n      function subscribe(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var dup = settings.dup ? protocol.DUP_MASK : 0;\n        var id = settings.messageId;\n        var subs = settings.subscriptions;\n        var properties = settings.properties;\n\n        var length = 0;\n\n        // Check message ID\n        if (typeof id !== 'number') {\n          stream.emit('error', new Error('Invalid messageId'));\n          return false;\n        } else length += 2;\n\n        // properies mqtt 5\n        var propertiesData = null;\n        if (version === 5) {\n          propertiesData = getProperties(stream, properties);\n          length += propertiesData.length;\n        }\n\n        // Check subscriptions\n        if (typeof subs === 'object' && subs.length) {\n          for (var i = 0; i < subs.length; i += 1) {\n            var itopic = subs[i].topic;\n            var iqos = subs[i].qos;\n\n            if (typeof itopic !== 'string') {\n              stream.emit('error', new Error('Invalid subscriptions - invalid topic'));\n              return false;\n            }\n            if (typeof iqos !== 'number') {\n              stream.emit('error', new Error('Invalid subscriptions - invalid qos'));\n              return false;\n            }\n\n            if (version === 5) {\n              var nl = subs[i].nl || false;\n              if (typeof nl !== 'boolean') {\n                stream.emit('error', new Error('Invalid subscriptions - invalid No Local'));\n                return false;\n              }\n              var rap = subs[i].rap || false;\n              if (typeof rap !== 'boolean') {\n                stream.emit('error', new Error('Invalid subscriptions - invalid Retain as Published'));\n                return false;\n              }\n              var rh = subs[i].rh || 0;\n              if (typeof rh !== 'number' || rh > 2) {\n                stream.emit('error', new Error('Invalid subscriptions - invalid Retain Handling'));\n                return false;\n              }\n            }\n\n            length += Buffer.byteLength(itopic) + 2 + 1;\n          }\n        } else {\n          stream.emit('error', new Error('Invalid subscriptions'));\n          return false;\n        }\n\n        // Generate header\n        stream.write(protocol.SUBSCRIBE_HEADER[1][dup ? 1 : 0][0]);\n\n        // Generate length\n        writeVarByteInt(stream, length);\n\n        // Generate message ID\n        writeNumber(stream, id);\n\n        // properies mqtt 5\n        if (propertiesData !== null) {\n          propertiesData.write();\n        }\n\n        var result = true;\n\n        // Generate subs\n        for (var j = 0; j < subs.length; j++) {\n          var sub = subs[j];\n          var jtopic = sub.topic;\n          var jqos = sub.qos;\n          var jnl = +sub.nl;\n          var jrap = +sub.rap;\n          var jrh = sub.rh;\n          var joptions;\n\n          // Write topic string\n          writeString(stream, jtopic);\n\n          // options process\n          joptions = protocol.SUBSCRIBE_OPTIONS_QOS[jqos];\n          if (version === 5) {\n            joptions |= jnl ? protocol.SUBSCRIBE_OPTIONS_NL : 0;\n            joptions |= jrap ? protocol.SUBSCRIBE_OPTIONS_RAP : 0;\n            joptions |= jrh ? protocol.SUBSCRIBE_OPTIONS_RH[jrh] : 0;\n          }\n          // Write options\n          result = stream.write(Buffer.from([joptions]));\n        }\n\n        return result;\n      }\n\n      function suback(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var id = settings.messageId;\n        var granted = settings.granted;\n        var properties = settings.properties;\n        var length = 0;\n\n        // Check message ID\n        if (typeof id !== 'number') {\n          stream.emit('error', new Error('Invalid messageId'));\n          return false;\n        } else length += 2;\n\n        // Check granted qos vector\n        if (typeof granted === 'object' && granted.length) {\n          for (var i = 0; i < granted.length; i += 1) {\n            if (typeof granted[i] !== 'number') {\n              stream.emit('error', new Error('Invalid qos vector'));\n              return false;\n            }\n            length += 1;\n          }\n        } else {\n          stream.emit('error', new Error('Invalid qos vector'));\n          return false;\n        }\n\n        // properies mqtt 5\n        var propertiesData = null;\n        if (version === 5) {\n          propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);\n          if (!propertiesData) {return false;}\n          length += propertiesData.length;\n        }\n\n        // header\n        stream.write(protocol.SUBACK_HEADER);\n\n        // Length\n        writeVarByteInt(stream, length);\n\n        // Message ID\n        writeNumber(stream, id);\n\n        // properies mqtt 5\n        if (propertiesData !== null) {\n          propertiesData.write();\n        }\n\n        return stream.write(Buffer.from(granted));\n      }\n\n      function unsubscribe(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var id = settings.messageId;\n        var dup = settings.dup ? protocol.DUP_MASK : 0;\n        var unsubs = settings.unsubscriptions;\n        var properties = settings.properties;\n\n        var length = 0;\n\n        // Check message ID\n        if (typeof id !== 'number') {\n          stream.emit('error', new Error('Invalid messageId'));\n          return false;\n        } else {\n          length += 2;\n        }\n        // Check unsubs\n        if (typeof unsubs === 'object' && unsubs.length) {\n          for (var i = 0; i < unsubs.length; i += 1) {\n            if (typeof unsubs[i] !== 'string') {\n              stream.emit('error', new Error('Invalid unsubscriptions'));\n              return false;\n            }\n            length += Buffer.byteLength(unsubs[i]) + 2;\n          }\n        } else {\n          stream.emit('error', new Error('Invalid unsubscriptions'));\n          return false;\n        }\n        // properies mqtt 5\n        var propertiesData = null;\n        if (version === 5) {\n          propertiesData = getProperties(stream, properties);\n          length += propertiesData.length;\n        }\n\n        // Header\n        stream.write(protocol.UNSUBSCRIBE_HEADER[1][dup ? 1 : 0][0]);\n\n        // Length\n        writeVarByteInt(stream, length);\n\n        // Message ID\n        writeNumber(stream, id);\n\n        // properies mqtt 5\n        if (propertiesData !== null) {\n          propertiesData.write();\n        }\n\n        // Unsubs\n        var result = true;\n        for (var j = 0; j < unsubs.length; j++) {\n          result = writeString(stream, unsubs[j]);\n        }\n\n        return result;\n      }\n\n      function unsuback(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var id = settings.messageId;\n        var dup = settings.dup ? protocol.DUP_MASK : 0;\n        var granted = settings.granted;\n        var properties = settings.properties;\n        var type = settings.cmd;\n        var qos = 0;\n\n        var length = 2;\n\n        // Check message ID\n        if (typeof id !== 'number') {\n          stream.emit('error', new Error('Invalid messageId'));\n          return false;\n        }\n\n        // Check granted\n        if (version === 5) {\n          if (typeof granted === 'object' && granted.length) {\n            for (var i = 0; i < granted.length; i += 1) {\n              if (typeof granted[i] !== 'number') {\n                stream.emit('error', new Error('Invalid qos vector'));\n                return false;\n              }\n              length += 1;\n            }\n          } else {\n            stream.emit('error', new Error('Invalid qos vector'));\n            return false;\n          }\n        }\n\n        // properies mqtt 5\n        var propertiesData = null;\n        if (version === 5) {\n          propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);\n          if (!propertiesData) {return false;}\n          length += propertiesData.length;\n        }\n\n        // Header\n        stream.write(protocol.ACKS[type][qos][dup][0]);\n\n        // Length\n        writeVarByteInt(stream, length);\n\n        // Message ID\n        writeNumber(stream, id);\n\n        // properies mqtt 5\n        if (propertiesData !== null) {\n          propertiesData.write();\n        }\n\n        // payload\n        if (version === 5) {\n          stream.write(Buffer.from(granted));\n        }\n        return true;\n      }\n\n      function emptyPacket(packet, stream, opts) {\n        return stream.write(protocol.EMPTY[packet.cmd]);\n      }\n\n      function disconnect(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var reasonCode = settings.reasonCode;\n        var properties = settings.properties;\n        var length = version === 5 ? 1 : 0;\n\n        // properies mqtt 5\n        var propertiesData = null;\n        if (version === 5) {\n          propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);\n          if (!propertiesData) {return false;}\n          length += propertiesData.length;\n        }\n\n        // Header\n        stream.write(Buffer.from([protocol.codes['disconnect'] << 4]));\n\n        // Length\n        writeVarByteInt(stream, length);\n\n        // reason code in header\n        if (version === 5) {\n          stream.write(Buffer.from([reasonCode]));\n        }\n\n        // properies mqtt 5\n        if (propertiesData !== null) {\n          propertiesData.write();\n        }\n\n        return true;\n      }\n\n      function auth(packet, stream, opts) {\n        var version = opts ? opts.protocolVersion : 4;\n        var settings = packet || {};\n        var reasonCode = settings.reasonCode;\n        var properties = settings.properties;\n        var length = version === 5 ? 1 : 0;\n\n        if (version !== 5) stream.emit('error', new Error('Invalid mqtt version for auth packet'));\n\n        // properies mqtt 5\n        var propertiesData = getPropertiesByMaximumPacketSize(stream, properties, opts, length);\n        if (!propertiesData) {return false;}\n        length += propertiesData.length;\n\n        // Header\n        stream.write(Buffer.from([protocol.codes['auth'] << 4]));\n\n        // Length\n        writeVarByteInt(stream, length);\n\n        // reason code in header\n        stream.write(Buffer.from([reasonCode]));\n\n        // properies mqtt 5\n        if (propertiesData !== null) {\n          propertiesData.write();\n        }\n        return true;\n      }\n\n      /**\n         * writeVarByteInt - write an MQTT style variable byte integer to the buffer\n         *\n         * @param <Buffer> buffer - destination\n         * @param <Number> pos - offset\n         * @param <Number> length - length (>0)\n         * @returns <Number> number of bytes written\n         *\n         * @api private\n         */\n\n      var varByteIntCache = {};\n      function writeVarByteInt(stream, num) {\n        var buffer = varByteIntCache[num];\n\n        if (!buffer) {\n          buffer = genBufVariableByteInt(num).data;\n          if (num < 16384) varByteIntCache[num] = buffer;\n        }\n\n        stream.write(buffer);\n      }\n\n      /**\n         * writeString - write a utf8 string to the buffer\n         *\n         * @param <Buffer> buffer - destination\n         * @param <Number> pos - offset\n         * @param <String> string - string to write\n         * @return <Number> number of bytes written\n         *\n         * @api private\n         */\n\n      function writeString(stream, string) {\n        var strlen = Buffer.byteLength(string);\n        writeNumber(stream, strlen);\n\n        stream.write(string, 'utf8');\n      }\n\n      /**\n         * writeStringPair - write a utf8 string pairs to the buffer\n         *\n         * @param <Buffer> buffer - destination\n         * @param <String> name - string name to write\n         * @param <String> value - string value to write\n         * @return <Number> number of bytes written\n         *\n         * @api private\n         */\n      function writeStringPair(stream, name, value) {\n        writeString(stream, name);\n        writeString(stream, value);\n      }\n\n      /**\n         * writeNumber - write a two byte number to the buffer\n         *\n         * @param <Buffer> buffer - destination\n         * @param <Number> pos - offset\n         * @param <String> number - number to write\n         * @return <Number> number of bytes written\n         *\n         * @api private\n         */\n      function writeNumberCached(stream, number) {\n        return stream.write(numCache[number]);\n      }\n      function writeNumberGenerated(stream, number) {\n        return stream.write(generateNumber(number));\n      }\n      function write4ByteNumber(stream, number) {\n        return stream.write(generate4ByteBuffer(number));\n      }\n      /**\n         * writeStringOrBuffer - write a String or Buffer with the its length prefix\n         *\n         * @param <Buffer> buffer - destination\n         * @param <Number> pos - offset\n         * @param <String> toWrite - String or Buffer\n         * @return <Number> number of bytes written\n         */\n      function writeStringOrBuffer(stream, toWrite) {\n        if (typeof toWrite === 'string') {\n          writeString(stream, toWrite);\n        } else if (toWrite) {\n          writeNumber(stream, toWrite.length);\n          stream.write(toWrite);\n        } else writeNumber(stream, 0);\n      }\n\n      function getProperties(stream, properties) {\n        /* connect properties */\n        if (typeof properties !== 'object' || properties.length != null) {\n          return {\n            length: 1,\n            write: function write() {\n              writeProperties(stream, {}, 0);\n            } };\n\n        }\n        var propertiesLength = 0;\n        function getLengthProperty(name) {\n          var type = protocol.propertiesTypes[name];\n          var value = properties[name];\n          var length = 0;\n          switch (type) {\n            case 'byte':{\n                if (typeof value !== 'boolean') {\n                  stream.emit('error', new Error('Invalid ' + name));\n                  return false;\n                }\n                length += 1 + 1;\n                break;\n              }\n            case 'int8':{\n                if (typeof value !== 'number') {\n                  stream.emit('error', new Error('Invalid ' + name));\n                  return false;\n                }\n                length += 1 + 1;\n                break;\n              }\n            case 'binary':{\n                if (value && value === null) {\n                  stream.emit('error', new Error('Invalid ' + name));\n                  return false;\n                }\n                length += 1 + Buffer.byteLength(value) + 2;\n                break;\n              }\n            case 'int16':{\n                if (typeof value !== 'number') {\n                  stream.emit('error', new Error('Invalid ' + name));\n                  return false;\n                }\n                length += 1 + 2;\n                break;\n              }\n            case 'int32':{\n                if (typeof value !== 'number') {\n                  stream.emit('error', new Error('Invalid ' + name));\n                  return false;\n                }\n                length += 1 + 4;\n                break;\n              }\n            case 'var':{\n                if (typeof value !== 'number') {\n                  stream.emit('error', new Error('Invalid ' + name));\n                  return false;\n                }\n                length += 1 + genBufVariableByteInt(value).length;\n                break;\n              }\n            case 'string':{\n                if (typeof value !== 'string') {\n                  stream.emit('error', new Error('Invalid ' + name));\n                  return false;\n                }\n                length += 1 + 2 + Buffer.byteLength(value.toString());\n                break;\n              }\n            case 'pair':{\n                if (typeof value !== 'object') {\n                  stream.emit('error', new Error('Invalid ' + name));\n                  return false;\n                }\n                length += Object.getOwnPropertyNames(value).reduce(function (result, name) {\n                  result += 1 + 2 + Buffer.byteLength(name.toString()) + 2 + Buffer.byteLength(value[name].toString());\n                  return result;\n                }, 0);\n                break;\n              }\n            default:{\n                stream.emit('error', new Error('Invalid property ' + name));\n                return false;\n              }}\n\n          return length;\n        }\n        if (properties) {\n          for (var propName in properties) {\n            var propLength = getLengthProperty(propName);\n            if (!propLength) return false;\n            propertiesLength += propLength;\n          }\n        }\n        var propertiesLengthLength = genBufVariableByteInt(propertiesLength).length;\n\n        return {\n          length: propertiesLengthLength + propertiesLength,\n          write: function write() {\n            writeProperties(stream, properties, propertiesLength);\n          } };\n\n      }\n\n      function getPropertiesByMaximumPacketSize(stream, properties, opts, length) {\n        var mayEmptyProps = ['reasonString', 'userProperties'];\n        var maximumPacketSize = opts && opts.properties && opts.properties.maximumPacketSize ? opts.properties.maximumPacketSize : 0;\n\n        var propertiesData = getProperties(stream, properties);\n        if (maximumPacketSize) {\n          while (length + propertiesData.length > maximumPacketSize) {\n            var currentMayEmptyProp = mayEmptyProps.shift();\n            if (currentMayEmptyProp && properties[currentMayEmptyProp]) {\n              delete properties[currentMayEmptyProp];\n              propertiesData = getProperties(stream, properties);\n            } else {\n              return false;\n            }\n          }\n        }\n        return propertiesData;\n      }\n\n      function writeProperties(stream, properties, propertiesLength) {\n        /* write properties to stream */\n        writeVarByteInt(stream, propertiesLength);\n        for (var propName in properties) {\n          if (properties.hasOwnProperty(propName) && properties[propName] !== null) {\n            var value = properties[propName];\n            var type = protocol.propertiesTypes[propName];\n            switch (type) {\n              case 'byte':{\n                  stream.write(Buffer.from([protocol.properties[propName]]));\n                  stream.write(Buffer.from([+value]));\n                  break;\n                }\n              case 'int8':{\n                  stream.write(Buffer.from([protocol.properties[propName]]));\n                  stream.write(Buffer.from([value]));\n                  break;\n                }\n              case 'binary':{\n                  stream.write(Buffer.from([protocol.properties[propName]]));\n                  writeStringOrBuffer(stream, value);\n                  break;\n                }\n              case 'int16':{\n                  stream.write(Buffer.from([protocol.properties[propName]]));\n                  writeNumber(stream, value);\n                  break;\n                }\n              case 'int32':{\n                  stream.write(Buffer.from([protocol.properties[propName]]));\n                  write4ByteNumber(stream, value);\n                  break;\n                }\n              case 'var':{\n                  stream.write(Buffer.from([protocol.properties[propName]]));\n                  writeVarByteInt(stream, value);\n                  break;\n                }\n              case 'string':{\n                  stream.write(Buffer.from([protocol.properties[propName]]));\n                  writeString(stream, value);\n                  break;\n                }\n              case 'pair':{\n                  Object.getOwnPropertyNames(value).forEach(function (name) {\n                    stream.write(Buffer.from([protocol.properties[propName]]));\n                    writeStringPair(stream, name.toString(), value[name].toString());\n                  });\n                  break;\n                }\n              default:{\n                  stream.emit('error', new Error('Invalid property ' + propName));\n                  return false;\n                }}\n\n          }\n        }\n      }\n\n      function byteLength(bufOrString) {\n        if (!bufOrString) return 0;else\n        if (bufOrString instanceof Buffer) return bufOrString.length;else\n        return Buffer.byteLength(bufOrString);\n      }\n\n      function isStringOrBuffer(field) {\n        return typeof field === 'string' || field instanceof Buffer;\n      }\n\n      module.exports = generate;\n\n    }, { \"./constants\": 82, \"./numbers\": 86, \"process-nextick-args\": 91, \"safe-buffer\": 110 }], 90: [function (require, module, exports) {\n      var wrappy = require('wrappy');\n      module.exports = wrappy(once);\n      module.exports.strict = wrappy(onceStrict);\n\n      once.proto = once(function () {\n        Object.defineProperty(Function.prototype, 'once', {\n          value: function value() {\n            return once(this);\n          },\n          configurable: true });\n\n\n        Object.defineProperty(Function.prototype, 'onceStrict', {\n          value: function value() {\n            return onceStrict(this);\n          },\n          configurable: true });\n\n      });\n\n      function once(fn) {\n        var f = function f() {\n          if (f.called) return f.value;\n          f.called = true;\n          return f.value = fn.apply(this, arguments);\n        };\n        f.called = false;\n        return f;\n      }\n\n      function onceStrict(fn) {\n        var f = function f() {\n          if (f.called)\n          throw new Error(f.onceError);\n          f.called = true;\n          return f.value = fn.apply(this, arguments);\n        };\n        var name = fn.name || 'Function wrapped with `once`';\n        f.onceError = name + \" shouldn't be called more than once\";\n        f.called = false;\n        return f;\n      }\n\n    }, { \"wrappy\": 120 }], 91: [function (require, module, exports) {\n      (function (process) {\n        'use strict';\n\n        if (!process.version ||\n        process.version.indexOf('v0.') === 0 ||\n        process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n          module.exports = { nextTick: nextTick };\n        } else {\n          module.exports = process;\n        }\n\n        function nextTick(fn, arg1, arg2, arg3) {\n          if (typeof fn !== 'function') {\n            throw new TypeError('\"callback\" argument must be a function');\n          }\n          var len = arguments.length;\n          var args, i;\n          switch (len) {\n            case 0:\n            case 1:\n              return process.nextTick(fn);\n            case 2:\n              return process.nextTick(function afterTickOne() {\n                fn.call(null, arg1);\n              });\n            case 3:\n              return process.nextTick(function afterTickTwo() {\n                fn.call(null, arg1, arg2);\n              });\n            case 4:\n              return process.nextTick(function afterTickThree() {\n                fn.call(null, arg1, arg2, arg3);\n              });\n            default:\n              args = new Array(len - 1);\n              i = 0;\n              while (i < args.length) {\n                args[i++] = arguments[i];\n              }\n              return process.nextTick(function afterTick() {\n                fn.apply(null, args);\n              });}\n\n        }\n\n\n      }).call(this, require('_process'));\n    }, { \"_process\": 92 }], 92: [function (require, module, exports) {\n      // shim for using process in browser\n      var process = module.exports = {};\n\n      // cached from whatever global is present so that test runners that stub it\n      // don't break things.  But we need to wrap it in a try catch in case it is\n      // wrapped in strict mode code which doesn't define any globals.  It's inside a\n      // function because try/catches deoptimize in certain engines.\n\n      var cachedSetTimeout;\n      var cachedClearTimeout;\n\n      function defaultSetTimout() {\n        throw new Error('setTimeout has not been defined');\n      }\n      function defaultClearTimeout() {\n        throw new Error('clearTimeout has not been defined');\n      }\n      (function () {\n        try {\n          if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n          } else {\n            cachedSetTimeout = defaultSetTimout;\n          }\n        } catch (e) {\n          cachedSetTimeout = defaultSetTimout;\n        }\n        try {\n          if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n          } else {\n            cachedClearTimeout = defaultClearTimeout;\n          }\n        } catch (e) {\n          cachedClearTimeout = defaultClearTimeout;\n        }\n      })();\n      function runTimeout(fun) {\n        if (cachedSetTimeout === setTimeout) {\n          //normal enviroments in sane situations\n          return setTimeout(fun, 0);\n        }\n        // if setTimeout wasn't available but was latter defined\n        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n        }\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedSetTimeout(fun, 0);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n          }\n        }\n\n\n      }\n      function runClearTimeout(marker) {\n        if (cachedClearTimeout === clearTimeout) {\n          //normal enviroments in sane situations\n          return clearTimeout(marker);\n        }\n        // if clearTimeout wasn't available but was latter defined\n        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n        }\n        try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedClearTimeout(marker);\n        } catch (e) {\n          try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n          } catch (e) {\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n          }\n        }\n\n\n\n      }\n      var queue = [];\n      var draining = false;\n      var currentQueue;\n      var queueIndex = -1;\n\n      function cleanUpNextTick() {\n        if (!draining || !currentQueue) {\n          return;\n        }\n        draining = false;\n        if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n        } else {\n          queueIndex = -1;\n        }\n        if (queue.length) {\n          drainQueue();\n        }\n      }\n\n      function drainQueue() {\n        if (draining) {\n          return;\n        }\n        var timeout = runTimeout(cleanUpNextTick);\n        draining = true;\n\n        var len = queue.length;\n        while (len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n            if (currentQueue) {\n              currentQueue[queueIndex].run();\n            }\n          }\n          queueIndex = -1;\n          len = queue.length;\n        }\n        currentQueue = null;\n        draining = false;\n        runClearTimeout(timeout);\n      }\n\n      process.nextTick = function (fun) {\n        var args = new Array(arguments.length - 1);\n        if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n          }\n        }\n        queue.push(new Item(fun, args));\n        if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n        }\n      };\n\n      // v8 likes predictible objects\n      function Item(fun, array) {\n        this.fun = fun;\n        this.array = array;\n      }\n      Item.prototype.run = function () {\n        this.fun.apply(null, this.array);\n      };\n      process.title = 'browser';\n      process.browser = true;\n      process.env = {};\n      process.argv = [];\n      process.version = ''; // empty string to avoid regexp issues\n      process.versions = {};\n\n      function noop() {}\n\n      process.on = noop;\n      process.addListener = noop;\n      process.once = noop;\n      process.off = noop;\n      process.removeListener = noop;\n      process.removeAllListeners = noop;\n      process.emit = noop;\n      process.prependListener = noop;\n      process.prependOnceListener = noop;\n\n      process.listeners = function (name) {return [];};\n\n      process.binding = function (name) {\n        throw new Error('process.binding is not supported');\n      };\n\n      process.cwd = function () {return '/';};\n      process.chdir = function (dir) {\n        throw new Error('process.chdir is not supported');\n      };\n      process.umask = function () {return 0;};\n\n    }, {}], 93: [function (require, module, exports) {\n      (function (global) {\n        /*! https://mths.be/punycode v1.4.1 by @mathias */\n        ;(function (root) {\n\n          /** Detect free variables */\n          var freeExports = typeof exports == 'object' && exports &&\n          !exports.nodeType && exports;\n          var freeModule = typeof module == 'object' && module &&\n          !module.nodeType && module;\n          var freeGlobal = typeof global == 'object' && global;\n          if (\n          freeGlobal.global === freeGlobal ||\n          freeGlobal.window === freeGlobal ||\n          freeGlobal.self === freeGlobal)\n          {\n            root = freeGlobal;\n          }\n\n          /**\n             * The `punycode` object.\n             * @name punycode\n             * @type Object\n             */\n          var punycode,\n\n          /** Highest positive signed 32-bit float value */\n          maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n          /** Bootstring parameters */\n          base = 36,\n          tMin = 1,\n          tMax = 26,\n          skew = 38,\n          damp = 700,\n          initialBias = 72,\n          initialN = 128, // 0x80\n          delimiter = '-', // '\\x2D'\n\n          /** Regular expressions */\n          regexPunycode = /^xn--/,\n          regexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n          regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n          /** Error messages */\n          errors = {\n            'overflow': 'Overflow: input needs wider integers to process',\n            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n            'invalid-input': 'Invalid input' },\n\n\n          /** Convenience shortcuts */\n          baseMinusTMin = base - tMin,\n          floor = Math.floor,\n          stringFromCharCode = String.fromCharCode,\n\n          /** Temporary variable */\n          key;\n\n          /*--------------------------------------------------------------------------*/\n\n          /**\n                                                                                          * A generic error utility function.\n                                                                                          * @private\n                                                                                          * @param {String} type The error type.\n                                                                                          * @returns {Error} Throws a `RangeError` with the applicable error message.\n                                                                                          */\n          function error(type) {\n            throw new RangeError(errors[type]);\n          }\n\n          /**\n             * A generic `Array#map` utility function.\n             * @private\n             * @param {Array} array The array to iterate over.\n             * @param {Function} callback The function that gets called for every array\n             * item.\n             * @returns {Array} A new array of values returned by the callback function.\n             */\n          function map(array, fn) {\n            var length = array.length;\n            var result = [];\n            while (length--) {\n              result[length] = fn(array[length]);\n            }\n            return result;\n          }\n\n          /**\n             * A simple `Array#map`-like wrapper to work with domain name strings or email\n             * addresses.\n             * @private\n             * @param {String} domain The domain name or email address.\n             * @param {Function} callback The function that gets called for every\n             * character.\n             * @returns {Array} A new string of characters returned by the callback\n             * function.\n             */\n          function mapDomain(string, fn) {\n            var parts = string.split('@');\n            var result = '';\n            if (parts.length > 1) {\n              // In email addresses, only the domain name should be punycoded. Leave\n              // the local part (i.e. everything up to `@`) intact.\n              result = parts[0] + '@';\n              string = parts[1];\n            }\n            // Avoid `split(regex)` for IE8 compatibility. See #17.\n            string = string.replace(regexSeparators, '\\x2E');\n            var labels = string.split('.');\n            var encoded = map(labels, fn).join('.');\n            return result + encoded;\n          }\n\n          /**\n             * Creates an array containing the numeric code points of each Unicode\n             * character in the string. While JavaScript uses UCS-2 internally,\n             * this function will convert a pair of surrogate halves (each of which\n             * UCS-2 exposes as separate characters) into a single code point,\n             * matching UTF-16.\n             * @see `punycode.ucs2.encode`\n             * @see <https://mathiasbynens.be/notes/javascript-encoding>\n             * @memberOf punycode.ucs2\n             * @name decode\n             * @param {String} string The Unicode input string (UCS-2).\n             * @returns {Array} The new array of code points.\n             */\n          function ucs2decode(string) {\n            var output = [],\n            counter = 0,\n            length = string.length,\n            value,\n            extra;\n            while (counter < length) {\n              value = string.charCodeAt(counter++);\n              if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n                // high surrogate, and there is a next character\n                extra = string.charCodeAt(counter++);\n                if ((extra & 0xFC00) == 0xDC00) {// low surrogate\n                  output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n                } else {\n                  // unmatched surrogate; only append this code unit, in case the next\n                  // code unit is the high surrogate of a surrogate pair\n                  output.push(value);\n                  counter--;\n                }\n              } else {\n                output.push(value);\n              }\n            }\n            return output;\n          }\n\n          /**\n             * Creates a string based on an array of numeric code points.\n             * @see `punycode.ucs2.decode`\n             * @memberOf punycode.ucs2\n             * @name encode\n             * @param {Array} codePoints The array of numeric code points.\n             * @returns {String} The new Unicode string (UCS-2).\n             */\n          function ucs2encode(array) {\n            return map(array, function (value) {\n              var output = '';\n              if (value > 0xFFFF) {\n                value -= 0x10000;\n                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n                value = 0xDC00 | value & 0x3FF;\n              }\n              output += stringFromCharCode(value);\n              return output;\n            }).join('');\n          }\n\n          /**\n             * Converts a basic code point into a digit/integer.\n             * @see `digitToBasic()`\n             * @private\n             * @param {Number} codePoint The basic numeric code point value.\n             * @returns {Number} The numeric value of a basic code point (for use in\n             * representing integers) in the range `0` to `base - 1`, or `base` if\n             * the code point does not represent a value.\n             */\n          function basicToDigit(codePoint) {\n            if (codePoint - 48 < 10) {\n              return codePoint - 22;\n            }\n            if (codePoint - 65 < 26) {\n              return codePoint - 65;\n            }\n            if (codePoint - 97 < 26) {\n              return codePoint - 97;\n            }\n            return base;\n          }\n\n          /**\n             * Converts a digit/integer into a basic code point.\n             * @see `basicToDigit()`\n             * @private\n             * @param {Number} digit The numeric value of a basic code point.\n             * @returns {Number} The basic code point whose value (when used for\n             * representing integers) is `digit`, which needs to be in the range\n             * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n             * used; else, the lowercase form is used. The behavior is undefined\n             * if `flag` is non-zero and `digit` has no uppercase form.\n             */\n          function digitToBasic(digit, flag) {\n            //  0..25 map to ASCII a..z or A..Z\n            // 26..35 map to ASCII 0..9\n            return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n          }\n\n          /**\n             * Bias adaptation function as per section 3.4 of RFC 3492.\n             * https://tools.ietf.org/html/rfc3492#section-3.4\n             * @private\n             */\n          function adapt(delta, numPoints, firstTime) {\n            var k = 0;\n            delta = firstTime ? floor(delta / damp) : delta >> 1;\n            delta += floor(delta / numPoints);\n            for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {\n              delta = floor(delta / baseMinusTMin);\n            }\n            return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n          }\n\n          /**\n             * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n             * symbols.\n             * @memberOf punycode\n             * @param {String} input The Punycode string of ASCII-only symbols.\n             * @returns {String} The resulting string of Unicode symbols.\n             */\n          function decode(input) {\n            // Don't use UCS-2\n            var output = [],\n            inputLength = input.length,\n            out,\n            i = 0,\n            n = initialN,\n            bias = initialBias,\n            basic,\n            j,\n            index,\n            oldi,\n            w,\n            k,\n            digit,\n            t,\n            /** Cached calculation results */\n            baseMinusT;\n\n            // Handle the basic code points: let `basic` be the number of input code\n            // points before the last delimiter, or `0` if there is none, then copy\n            // the first basic code points to the output.\n\n            basic = input.lastIndexOf(delimiter);\n            if (basic < 0) {\n              basic = 0;\n            }\n\n            for (j = 0; j < basic; ++j) {\n              // if it's not a basic code point\n              if (input.charCodeAt(j) >= 0x80) {\n                error('not-basic');\n              }\n              output.push(input.charCodeAt(j));\n            }\n\n            // Main decoding loop: start just after the last delimiter if any basic code\n            // points were copied; start at the beginning otherwise.\n\n            for (index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{\n\n              // `index` is the index of the next character to be consumed.\n              // Decode a generalized variable-length integer into `delta`,\n              // which gets added to `i`. The overflow checking is easier\n              // if we increase `i` as we go, then subtract off its starting\n              // value at the end to obtain `delta`.\n              for (oldi = i, w = 1, k = base;; /* no condition */k += base) {\n\n                if (index >= inputLength) {\n                  error('invalid-input');\n                }\n\n                digit = basicToDigit(input.charCodeAt(index++));\n\n                if (digit >= base || digit > floor((maxInt - i) / w)) {\n                  error('overflow');\n                }\n\n                i += digit * w;\n                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n\n                if (digit < t) {\n                  break;\n                }\n\n                baseMinusT = base - t;\n                if (w > floor(maxInt / baseMinusT)) {\n                  error('overflow');\n                }\n\n                w *= baseMinusT;\n\n              }\n\n              out = output.length + 1;\n              bias = adapt(i - oldi, out, oldi == 0);\n\n              // `i` was supposed to wrap around from `out` to `0`,\n              // incrementing `n` each time, so we'll fix that now:\n              if (floor(i / out) > maxInt - n) {\n                error('overflow');\n              }\n\n              n += floor(i / out);\n              i %= out;\n\n              // Insert `n` at position `i` of the output\n              output.splice(i++, 0, n);\n\n            }\n\n            return ucs2encode(output);\n          }\n\n          /**\n             * Converts a string of Unicode symbols (e.g. a domain name label) to a\n             * Punycode string of ASCII-only symbols.\n             * @memberOf punycode\n             * @param {String} input The string of Unicode symbols.\n             * @returns {String} The resulting Punycode string of ASCII-only symbols.\n             */\n          function encode(input) {\n            var n,\n            delta,\n            handledCPCount,\n            basicLength,\n            bias,\n            j,\n            m,\n            q,\n            k,\n            t,\n            currentValue,\n            output = [],\n            /** `inputLength` will hold the number of code points in `input`. */\n            inputLength,\n            /** Cached calculation results */\n            handledCPCountPlusOne,\n            baseMinusT,\n            qMinusT;\n\n            // Convert the input in UCS-2 to Unicode\n            input = ucs2decode(input);\n\n            // Cache the length\n            inputLength = input.length;\n\n            // Initialize the state\n            n = initialN;\n            delta = 0;\n            bias = initialBias;\n\n            // Handle the basic code points\n            for (j = 0; j < inputLength; ++j) {\n              currentValue = input[j];\n              if (currentValue < 0x80) {\n                output.push(stringFromCharCode(currentValue));\n              }\n            }\n\n            handledCPCount = basicLength = output.length;\n\n            // `handledCPCount` is the number of code points that have been handled;\n            // `basicLength` is the number of basic code points.\n\n            // Finish the basic string - if it is not empty - with a delimiter\n            if (basicLength) {\n              output.push(delimiter);\n            }\n\n            // Main encoding loop:\n            while (handledCPCount < inputLength) {\n\n              // All non-basic code points < n have been handled already. Find the next\n              // larger one:\n              for (m = maxInt, j = 0; j < inputLength; ++j) {\n                currentValue = input[j];\n                if (currentValue >= n && currentValue < m) {\n                  m = currentValue;\n                }\n              }\n\n              // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n              // but guard against overflow\n              handledCPCountPlusOne = handledCPCount + 1;\n              if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n                error('overflow');\n              }\n\n              delta += (m - n) * handledCPCountPlusOne;\n              n = m;\n\n              for (j = 0; j < inputLength; ++j) {\n                currentValue = input[j];\n\n                if (currentValue < n && ++delta > maxInt) {\n                  error('overflow');\n                }\n\n                if (currentValue == n) {\n                  // Represent delta as a generalized variable-length integer\n                  for (q = delta, k = base;; /* no condition */k += base) {\n                    t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;\n                    if (q < t) {\n                      break;\n                    }\n                    qMinusT = q - t;\n                    baseMinusT = base - t;\n                    output.push(\n                    stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));\n\n                    q = floor(qMinusT / baseMinusT);\n                  }\n\n                  output.push(stringFromCharCode(digitToBasic(q, 0)));\n                  bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n                  delta = 0;\n                  ++handledCPCount;\n                }\n              }\n\n              ++delta;\n              ++n;\n\n            }\n            return output.join('');\n          }\n\n          /**\n             * Converts a Punycode string representing a domain name or an email address\n             * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n             * it doesn't matter if you call it on a string that has already been\n             * converted to Unicode.\n             * @memberOf punycode\n             * @param {String} input The Punycoded domain name or email address to\n             * convert to Unicode.\n             * @returns {String} The Unicode representation of the given Punycode\n             * string.\n             */\n          function toUnicode(input) {\n            return mapDomain(input, function (string) {\n              return regexPunycode.test(string) ?\n              decode(string.slice(4).toLowerCase()) :\n              string;\n            });\n          }\n\n          /**\n             * Converts a Unicode string representing a domain name or an email address to\n             * Punycode. Only the non-ASCII parts of the domain name will be converted,\n             * i.e. it doesn't matter if you call it with a domain that's already in\n             * ASCII.\n             * @memberOf punycode\n             * @param {String} input The domain name or email address to convert, as a\n             * Unicode string.\n             * @returns {String} The Punycode representation of the given domain name or\n             * email address.\n             */\n          function toASCII(input) {\n            return mapDomain(input, function (string) {\n              return regexNonASCII.test(string) ?\n              'xn--' + encode(string) :\n              string;\n            });\n          }\n\n          /*--------------------------------------------------------------------------*/\n\n          /** Define the public API */\n          punycode = {\n            /**\n                        * A string representing the current Punycode.js version number.\n                        * @memberOf punycode\n                        * @type String\n                        */\n            'version': '1.4.1',\n            /**\n                                 * An object of methods to convert from JavaScript's internal character\n                                 * representation (UCS-2) to Unicode code points, and back.\n                                 * @see <https://mathiasbynens.be/notes/javascript-encoding>\n                                 * @memberOf punycode\n                                 * @type Object\n                                 */\n            'ucs2': {\n              'decode': ucs2decode,\n              'encode': ucs2encode },\n\n            'decode': decode,\n            'encode': encode,\n            'toASCII': toASCII,\n            'toUnicode': toUnicode };\n\n\n          /** Expose `punycode` */\n          // Some AMD build optimizers, like r.js, check for specific condition patterns\n          // like the following:\n          if (\n          typeof define == 'function' &&\n          typeof define.amd == 'object' &&\n          define.amd)\n          {\n            define('punycode', function () {\n              return punycode;\n            });\n          } else if (freeExports && freeModule) {\n            if (module.exports == freeExports) {\n              // in Node.js, io.js, or RingoJS v0.8.0+\n              freeModule.exports = punycode;\n            } else {\n              // in Narwhal or RingoJS v0.7.0-\n              for (key in punycode) {\n                punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n              }\n            }\n          } else {\n            // in Rhino or a web browser\n            root.punycode = punycode;\n          }\n\n        })(this);\n\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}], 94: [function (require, module, exports) {\n      // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      'use strict';\n\n      // If obj.hasOwnProperty has been overridden, then calling\n      // obj.hasOwnProperty(prop) will break.\n      // See: https://github.com/joyent/node/issues/1707\n      function hasOwnProperty(obj, prop) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n      }\n\n      module.exports = function (qs, sep, eq, options) {\n        sep = sep || '&';\n        eq = eq || '=';\n        var obj = {};\n\n        if (typeof qs !== 'string' || qs.length === 0) {\n          return obj;\n        }\n\n        var regexp = /\\+/g;\n        qs = qs.split(sep);\n\n        var maxKeys = 1000;\n        if (options && typeof options.maxKeys === 'number') {\n          maxKeys = options.maxKeys;\n        }\n\n        var len = qs.length;\n        // maxKeys <= 0 means that we should not limit keys count\n        if (maxKeys > 0 && len > maxKeys) {\n          len = maxKeys;\n        }\n\n        for (var i = 0; i < len; ++i) {\n          var x = qs[i].replace(regexp, '%20'),\n          idx = x.indexOf(eq),\n          kstr,vstr,k,v;\n\n          if (idx >= 0) {\n            kstr = x.substr(0, idx);\n            vstr = x.substr(idx + 1);\n          } else {\n            kstr = x;\n            vstr = '';\n          }\n\n          k = decodeURIComponent(kstr);\n          v = decodeURIComponent(vstr);\n\n          if (!hasOwnProperty(obj, k)) {\n            obj[k] = v;\n          } else if (isArray(obj[k])) {\n            obj[k].push(v);\n          } else {\n            obj[k] = [obj[k], v];\n          }\n        }\n\n        return obj;\n      };\n\n      var isArray = Array.isArray || function (xs) {\n        return Object.prototype.toString.call(xs) === '[object Array]';\n      };\n\n    }, {}], 95: [function (require, module, exports) {\n      // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      'use strict';\n\n      var stringifyPrimitive = function stringifyPrimitive(v) {\n        switch (typeof v) {\n          case 'string':\n            return v;\n\n          case 'boolean':\n            return v ? 'true' : 'false';\n\n          case 'number':\n            return isFinite(v) ? v : '';\n\n          default:\n            return '';}\n\n      };\n\n      module.exports = function (obj, sep, eq, name) {\n        sep = sep || '&';\n        eq = eq || '=';\n        if (obj === null) {\n          obj = undefined;\n        }\n\n        if (typeof obj === 'object') {\n          return map(objectKeys(obj), function (k) {\n            var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n            if (isArray(obj[k])) {\n              return map(obj[k], function (v) {\n                return ks + encodeURIComponent(stringifyPrimitive(v));\n              }).join(sep);\n            } else {\n              return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n            }\n          }).join(sep);\n\n        }\n\n        if (!name) return '';\n        return encodeURIComponent(stringifyPrimitive(name)) + eq +\n        encodeURIComponent(stringifyPrimitive(obj));\n      };\n\n      var isArray = Array.isArray || function (xs) {\n        return Object.prototype.toString.call(xs) === '[object Array]';\n      };\n\n      function map(xs, f) {\n        if (xs.map) return xs.map(f);\n        var res = [];\n        for (var i = 0; i < xs.length; i++) {\n          res.push(f(xs[i], i));\n        }\n        return res;\n      }\n\n      var objectKeys = Object.keys || function (obj) {\n        var res = [];\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n        }\n        return res;\n      };\n\n    }, {}], 96: [function (require, module, exports) {\n      'use strict';\n\n      exports.decode = exports.parse = require('./decode');\n      exports.encode = exports.stringify = require('./encode');\n\n    }, { \"./decode\": 94, \"./encode\": 95 }], 97: [function (require, module, exports) {\n      module.exports = require('./lib/_stream_duplex.js');\n\n    }, { \"./lib/_stream_duplex.js\": 98 }], 98: [function (require, module, exports) {\n      // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      // a duplex stream is just a stream that is both readable and writable.\n      // Since JS doesn't have multiple prototypal inheritance, this class\n      // prototypally inherits from Readable, and then parasitically from\n      // Writable.\n\n      'use strict';\n\n      /*<replacement>*/\n\n      var pna = require('process-nextick-args');\n      /*</replacement>*/\n\n      /*<replacement>*/\n      var objectKeys = Object.keys || function (obj) {\n        var keys = [];\n        for (var key in obj) {\n          keys.push(key);\n        }return keys;\n      };\n      /*</replacement>*/\n\n      module.exports = Duplex;\n\n      /*<replacement>*/\n      var util = require('core-util-is');\n      util.inherits = require('inherits');\n      /*</replacement>*/\n\n      var Readable = require('./_stream_readable');\n      var Writable = require('./_stream_writable');\n\n      util.inherits(Duplex, Readable);\n\n      {\n        // avoid scope creep, the keys array can then be collected\n        var keys = objectKeys(Writable.prototype);\n        for (var v = 0; v < keys.length; v++) {\n          var method = keys[v];\n          if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n        }\n      }\n\n      function Duplex(options) {\n        if (!(this instanceof Duplex)) return new Duplex(options);\n\n        Readable.call(this, options);\n        Writable.call(this, options);\n\n        if (options && options.readable === false) this.readable = false;\n\n        if (options && options.writable === false) this.writable = false;\n\n        this.allowHalfOpen = true;\n        if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n        this.once('end', onend);\n      }\n\n      Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n        // making it explicit this property is not enumerable\n        // because otherwise some prototype manipulation in\n        // userland will fail\n        enumerable: false,\n        get: function get() {\n          return this._writableState.highWaterMark;\n        } });\n\n\n      // the no-half-open enforcer\n      function onend() {\n        // if we allow half-open state, or if the writable side ended,\n        // then we're ok.\n        if (this.allowHalfOpen || this._writableState.ended) return;\n\n        // no more data can be written.\n        // But allow more writes to happen in this tick.\n        pna.nextTick(onEndNT, this);\n      }\n\n      function onEndNT(self) {\n        self.end();\n      }\n\n      Object.defineProperty(Duplex.prototype, 'destroyed', {\n        get: function get() {\n          if (this._readableState === undefined || this._writableState === undefined) {\n            return false;\n          }\n          return this._readableState.destroyed && this._writableState.destroyed;\n        },\n        set: function set(value) {\n          // we ignore the value if the stream\n          // has not been initialized yet\n          if (this._readableState === undefined || this._writableState === undefined) {\n            return;\n          }\n\n          // backward compatibility, the user is explicitly\n          // managing destroyed\n          this._readableState.destroyed = value;\n          this._writableState.destroyed = value;\n        } });\n\n\n      Duplex.prototype._destroy = function (err, cb) {\n        this.push(null);\n        this.end();\n\n        pna.nextTick(cb, err);\n      };\n    }, { \"./_stream_readable\": 100, \"./_stream_writable\": 102, \"core-util-is\": 14, \"inherits\": 80, \"process-nextick-args\": 91 }], 99: [function (require, module, exports) {\n      // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      // a passthrough stream.\n      // basically just the most minimal sort of Transform stream.\n      // Every written chunk gets output as-is.\n\n      'use strict';\n\n      module.exports = PassThrough;\n\n      var Transform = require('./_stream_transform');\n\n      /*<replacement>*/\n      var util = require('core-util-is');\n      util.inherits = require('inherits');\n      /*</replacement>*/\n\n      util.inherits(PassThrough, Transform);\n\n      function PassThrough(options) {\n        if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n        Transform.call(this, options);\n      }\n\n      PassThrough.prototype._transform = function (chunk, encoding, cb) {\n        cb(null, chunk);\n      };\n    }, { \"./_stream_transform\": 101, \"core-util-is\": 14, \"inherits\": 80 }], 100: [function (require, module, exports) {\n      (function (process, global) {\n        // Copyright Joyent, Inc. and other Node contributors.\n        //\n        // Permission is hereby granted, free of charge, to any person obtaining a\n        // copy of this software and associated documentation files (the\n        // \"Software\"), to deal in the Software without restriction, including\n        // without limitation the rights to use, copy, modify, merge, publish,\n        // distribute, sublicense, and/or sell copies of the Software, and to permit\n        // persons to whom the Software is furnished to do so, subject to the\n        // following conditions:\n        //\n        // The above copyright notice and this permission notice shall be included\n        // in all copies or substantial portions of the Software.\n        //\n        // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n        // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n        'use strict';\n\n        /*<replacement>*/\n\n        var pna = require('process-nextick-args');\n        /*</replacement>*/\n\n        module.exports = Readable;\n\n        /*<replacement>*/\n        var isArray = require('isarray');\n        /*</replacement>*/\n\n        /*<replacement>*/\n        var Duplex;\n        /*</replacement>*/\n\n        Readable.ReadableState = ReadableState;\n\n        /*<replacement>*/\n        var EE = require('events').EventEmitter;\n\n        var EElistenerCount = function EElistenerCount(emitter, type) {\n          return emitter.listeners(type).length;\n        };\n        /*</replacement>*/\n\n        /*<replacement>*/\n        var Stream = require('./internal/streams/stream');\n        /*</replacement>*/\n\n        /*<replacement>*/\n\n        var Buffer = require('safe-buffer').Buffer;\n        var OurUint8Array = global.Uint8Array || function () {};\n        function _uint8ArrayToBuffer(chunk) {\n          return Buffer.from(chunk);\n        }\n        function _isUint8Array(obj) {\n          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n        }\n\n        /*</replacement>*/\n\n        /*<replacement>*/\n        var util = require('core-util-is');\n        util.inherits = require('inherits');\n        /*</replacement>*/\n\n        /*<replacement>*/\n        var debugUtil = require('util');\n        var debug = void 0;\n        if (debugUtil && debugUtil.debuglog) {\n          debug = debugUtil.debuglog('stream');\n        } else {\n          debug = function debug() {};\n        }\n        /*</replacement>*/\n\n        var BufferList = require('./internal/streams/BufferList');\n        var destroyImpl = require('./internal/streams/destroy');\n        var StringDecoder;\n\n        util.inherits(Readable, Stream);\n\n        var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\n        function prependListener(emitter, event, fn) {\n          // Sadly this is not cacheable as some libraries bundle their own\n          // event emitter implementation with them.\n          if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n          // This is a hack to make sure that our error handler is attached before any\n          // userland ones.  NEVER DO THIS. This is here only because this code needs\n          // to continue to work with older versions of Node.js that do not include\n          // the prependListener() method. The goal is to eventually remove this hack.\n          if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n        }\n\n        function ReadableState(options, stream) {\n          Duplex = Duplex || require('./_stream_duplex');\n\n          options = options || {};\n\n          // Duplex streams are both readable and writable, but share\n          // the same options object.\n          // However, some cases require setting options to different\n          // values for the readable and the writable sides of the duplex stream.\n          // These options can be provided separately as readableXXX and writableXXX.\n          var isDuplex = stream instanceof Duplex;\n\n          // object stream flag. Used to make read(n) ignore n and to\n          // make all the buffer merging and length checks go away\n          this.objectMode = !!options.objectMode;\n\n          if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n          // the point at which it stops calling _read() to fill the buffer\n          // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n          var hwm = options.highWaterMark;\n          var readableHwm = options.readableHighWaterMark;\n          var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n          if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n          // cast to ints.\n          this.highWaterMark = Math.floor(this.highWaterMark);\n\n          // A linked list is used to store data chunks instead of an array because the\n          // linked list can remove elements from the beginning faster than\n          // array.shift()\n          this.buffer = new BufferList();\n          this.length = 0;\n          this.pipes = null;\n          this.pipesCount = 0;\n          this.flowing = null;\n          this.ended = false;\n          this.endEmitted = false;\n          this.reading = false;\n\n          // a flag to be able to tell if the event 'readable'/'data' is emitted\n          // immediately, or on a later tick.  We set this to true at first, because\n          // any actions that shouldn't happen until \"later\" should generally also\n          // not happen before the first read call.\n          this.sync = true;\n\n          // whenever we return null, then we set a flag to say\n          // that we're awaiting a 'readable' event emission.\n          this.needReadable = false;\n          this.emittedReadable = false;\n          this.readableListening = false;\n          this.resumeScheduled = false;\n\n          // has it been destroyed\n          this.destroyed = false;\n\n          // Crypto is kind of old and crusty.  Historically, its default string\n          // encoding is 'binary' so we have to make this configurable.\n          // Everything else in the universe uses 'utf8', though.\n          this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n          // the number of writers that are awaiting a drain event in .pipe()s\n          this.awaitDrain = 0;\n\n          // if true, a maybeReadMore has been scheduled\n          this.readingMore = false;\n\n          this.decoder = null;\n          this.encoding = null;\n          if (options.encoding) {\n            if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n            this.decoder = new StringDecoder(options.encoding);\n            this.encoding = options.encoding;\n          }\n        }\n\n        function Readable(options) {\n          Duplex = Duplex || require('./_stream_duplex');\n\n          if (!(this instanceof Readable)) return new Readable(options);\n\n          this._readableState = new ReadableState(options, this);\n\n          // legacy\n          this.readable = true;\n\n          if (options) {\n            if (typeof options.read === 'function') this._read = options.read;\n\n            if (typeof options.destroy === 'function') this._destroy = options.destroy;\n          }\n\n          Stream.call(this);\n        }\n\n        Object.defineProperty(Readable.prototype, 'destroyed', {\n          get: function get() {\n            if (this._readableState === undefined) {\n              return false;\n            }\n            return this._readableState.destroyed;\n          },\n          set: function set(value) {\n            // we ignore the value if the stream\n            // has not been initialized yet\n            if (!this._readableState) {\n              return;\n            }\n\n            // backward compatibility, the user is explicitly\n            // managing destroyed\n            this._readableState.destroyed = value;\n          } });\n\n\n        Readable.prototype.destroy = destroyImpl.destroy;\n        Readable.prototype._undestroy = destroyImpl.undestroy;\n        Readable.prototype._destroy = function (err, cb) {\n          this.push(null);\n          cb(err);\n        };\n\n        // Manually shove something into the read() buffer.\n        // This returns true if the highWaterMark has not been hit yet,\n        // similar to how Writable.write() returns true if you should\n        // write() some more.\n        Readable.prototype.push = function (chunk, encoding) {\n          var state = this._readableState;\n          var skipChunkCheck;\n\n          if (!state.objectMode) {\n            if (typeof chunk === 'string') {\n              encoding = encoding || state.defaultEncoding;\n              if (encoding !== state.encoding) {\n                chunk = Buffer.from(chunk, encoding);\n                encoding = '';\n              }\n              skipChunkCheck = true;\n            }\n          } else {\n            skipChunkCheck = true;\n          }\n\n          return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n        };\n\n        // Unshift should *always* be something directly out of read()\n        Readable.prototype.unshift = function (chunk) {\n          return readableAddChunk(this, chunk, null, true, false);\n        };\n\n        function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n          var state = stream._readableState;\n          if (chunk === null) {\n            state.reading = false;\n            onEofChunk(stream, state);\n          } else {\n            var er;\n            if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n            if (er) {\n              stream.emit('error', er);\n            } else if (state.objectMode || chunk && chunk.length > 0) {\n              if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n                chunk = _uint8ArrayToBuffer(chunk);\n              }\n\n              if (addToFront) {\n                if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n              } else if (state.ended) {\n                stream.emit('error', new Error('stream.push() after EOF'));\n              } else {\n                state.reading = false;\n                if (state.decoder && !encoding) {\n                  chunk = state.decoder.write(chunk);\n                  if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n                } else {\n                  addChunk(stream, state, chunk, false);\n                }\n              }\n            } else if (!addToFront) {\n              state.reading = false;\n            }\n          }\n\n          return needMoreData(state);\n        }\n\n        function addChunk(stream, state, chunk, addToFront) {\n          if (state.flowing && state.length === 0 && !state.sync) {\n            stream.emit('data', chunk);\n            stream.read(0);\n          } else {\n            // update the buffer info.\n            state.length += state.objectMode ? 1 : chunk.length;\n            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n            if (state.needReadable) emitReadable(stream);\n          }\n          maybeReadMore(stream, state);\n        }\n\n        function chunkInvalid(state, chunk) {\n          var er;\n          if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n            er = new TypeError('Invalid non-string/buffer chunk');\n          }\n          return er;\n        }\n\n        // if it's past the high water mark, we can push in some more.\n        // Also, if we have no data yet, we can stand some\n        // more bytes.  This is to work around cases where hwm=0,\n        // such as the repl.  Also, if the push() triggered a\n        // readable event, and the user called read(largeNumber) such that\n        // needReadable was set, then we ought to push more, so that another\n        // 'readable' event will be triggered.\n        function needMoreData(state) {\n          return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n        }\n\n        Readable.prototype.isPaused = function () {\n          return this._readableState.flowing === false;\n        };\n\n        // backwards compatibility.\n        Readable.prototype.setEncoding = function (enc) {\n          if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n          this._readableState.decoder = new StringDecoder(enc);\n          this._readableState.encoding = enc;\n          return this;\n        };\n\n        // Don't raise the hwm > 8MB\n        var MAX_HWM = 0x800000;\n        function computeNewHighWaterMark(n) {\n          if (n >= MAX_HWM) {\n            n = MAX_HWM;\n          } else {\n            // Get the next highest power of 2 to prevent increasing hwm excessively in\n            // tiny amounts\n            n--;\n            n |= n >>> 1;\n            n |= n >>> 2;\n            n |= n >>> 4;\n            n |= n >>> 8;\n            n |= n >>> 16;\n            n++;\n          }\n          return n;\n        }\n\n        // This function is designed to be inlinable, so please take care when making\n        // changes to the function body.\n        function howMuchToRead(n, state) {\n          if (n <= 0 || state.length === 0 && state.ended) return 0;\n          if (state.objectMode) return 1;\n          if (n !== n) {\n            // Only flow one buffer at a time\n            if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n          }\n          // If we're asking for more than the current hwm, then raise the hwm.\n          if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n          if (n <= state.length) return n;\n          // Don't have enough\n          if (!state.ended) {\n            state.needReadable = true;\n            return 0;\n          }\n          return state.length;\n        }\n\n        // you can override either this method, or the async _read(n) below.\n        Readable.prototype.read = function (n) {\n          debug('read', n);\n          n = parseInt(n, 10);\n          var state = this._readableState;\n          var nOrig = n;\n\n          if (n !== 0) state.emittedReadable = false;\n\n          // if we're doing read(0) to trigger a readable event, but we\n          // already have a bunch of data in the buffer, then just trigger\n          // the 'readable' event and move on.\n          if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n            debug('read: emitReadable', state.length, state.ended);\n            if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n            return null;\n          }\n\n          n = howMuchToRead(n, state);\n\n          // if we've ended, and we're now clear, then finish it up.\n          if (n === 0 && state.ended) {\n            if (state.length === 0) endReadable(this);\n            return null;\n          }\n\n          // All the actual chunk generation logic needs to be\n          // *below* the call to _read.  The reason is that in certain\n          // synthetic stream cases, such as passthrough streams, _read\n          // may be a completely synchronous operation which may change\n          // the state of the read buffer, providing enough data when\n          // before there was *not* enough.\n          //\n          // So, the steps are:\n          // 1. Figure out what the state of things will be after we do\n          // a read from the buffer.\n          //\n          // 2. If that resulting state will trigger a _read, then call _read.\n          // Note that this may be asynchronous, or synchronous.  Yes, it is\n          // deeply ugly to write APIs this way, but that still doesn't mean\n          // that the Readable class should behave improperly, as streams are\n          // designed to be sync/async agnostic.\n          // Take note if the _read call is sync or async (ie, if the read call\n          // has returned yet), so that we know whether or not it's safe to emit\n          // 'readable' etc.\n          //\n          // 3. Actually pull the requested chunks out of the buffer and return.\n\n          // if we need a readable event, then we need to do some reading.\n          var doRead = state.needReadable;\n          debug('need readable', doRead);\n\n          // if we currently have less than the highWaterMark, then also read some\n          if (state.length === 0 || state.length - n < state.highWaterMark) {\n            doRead = true;\n            debug('length less than watermark', doRead);\n          }\n\n          // however, if we've ended, then there's no point, and if we're already\n          // reading, then it's unnecessary.\n          if (state.ended || state.reading) {\n            doRead = false;\n            debug('reading or ended', doRead);\n          } else if (doRead) {\n            debug('do read');\n            state.reading = true;\n            state.sync = true;\n            // if the length is currently zero, then we *need* a readable event.\n            if (state.length === 0) state.needReadable = true;\n            // call internal read method\n            this._read(state.highWaterMark);\n            state.sync = false;\n            // If _read pushed data synchronously, then `reading` will be false,\n            // and we need to re-evaluate how much data we can return to the user.\n            if (!state.reading) n = howMuchToRead(nOrig, state);\n          }\n\n          var ret;\n          if (n > 0) ret = fromList(n, state);else ret = null;\n\n          if (ret === null) {\n            state.needReadable = true;\n            n = 0;\n          } else {\n            state.length -= n;\n          }\n\n          if (state.length === 0) {\n            // If we have nothing in the buffer, then we want to know\n            // as soon as we *do* get something into the buffer.\n            if (!state.ended) state.needReadable = true;\n\n            // If we tried to read() past the EOF, then emit end on the next tick.\n            if (nOrig !== n && state.ended) endReadable(this);\n          }\n\n          if (ret !== null) this.emit('data', ret);\n\n          return ret;\n        };\n\n        function onEofChunk(stream, state) {\n          if (state.ended) return;\n          if (state.decoder) {\n            var chunk = state.decoder.end();\n            if (chunk && chunk.length) {\n              state.buffer.push(chunk);\n              state.length += state.objectMode ? 1 : chunk.length;\n            }\n          }\n          state.ended = true;\n\n          // emit 'readable' now to make sure it gets picked up.\n          emitReadable(stream);\n        }\n\n        // Don't emit readable right away in sync mode, because this can trigger\n        // another read() call => stack overflow.  This way, it might trigger\n        // a nextTick recursion warning, but that's not so bad.\n        function emitReadable(stream) {\n          var state = stream._readableState;\n          state.needReadable = false;\n          if (!state.emittedReadable) {\n            debug('emitReadable', state.flowing);\n            state.emittedReadable = true;\n            if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n          }\n        }\n\n        function emitReadable_(stream) {\n          debug('emit readable');\n          stream.emit('readable');\n          flow(stream);\n        }\n\n        // at this point, the user has presumably seen the 'readable' event,\n        // and called read() to consume some data.  that may have triggered\n        // in turn another _read(n) call, in which case reading = true if\n        // it's in progress.\n        // However, if we're not ended, or reading, and the length < hwm,\n        // then go ahead and try to read some more preemptively.\n        function maybeReadMore(stream, state) {\n          if (!state.readingMore) {\n            state.readingMore = true;\n            pna.nextTick(maybeReadMore_, stream, state);\n          }\n        }\n\n        function maybeReadMore_(stream, state) {\n          var len = state.length;\n          while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n            debug('maybeReadMore read 0');\n            stream.read(0);\n            if (len === state.length)\n              // didn't get any data, stop spinning.\n              break;else len = state.length;\n          }\n          state.readingMore = false;\n        }\n\n        // abstract method.  to be overridden in specific implementation classes.\n        // call cb(er, data) where data is <= n in length.\n        // for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n        // arbitrary, and perhaps not very meaningful.\n        Readable.prototype._read = function (n) {\n          this.emit('error', new Error('_read() is not implemented'));\n        };\n\n        Readable.prototype.pipe = function (dest, pipeOpts) {\n          var src = this;\n          var state = this._readableState;\n\n          switch (state.pipesCount) {\n            case 0:\n              state.pipes = dest;\n              break;\n            case 1:\n              state.pipes = [state.pipes, dest];\n              break;\n            default:\n              state.pipes.push(dest);\n              break;}\n\n          state.pipesCount += 1;\n          debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n          var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n          var endFn = doEnd ? onend : unpipe;\n          if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n          dest.on('unpipe', onunpipe);\n          function onunpipe(readable, unpipeInfo) {\n            debug('onunpipe');\n            if (readable === src) {\n              if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n                unpipeInfo.hasUnpiped = true;\n                cleanup();\n              }\n            }\n          }\n\n          function onend() {\n            debug('onend');\n            dest.end();\n          }\n\n          // when the dest drains, it reduces the awaitDrain counter\n          // on the source.  This would be more elegant with a .once()\n          // handler in flow(), but adding and removing repeatedly is\n          // too slow.\n          var ondrain = pipeOnDrain(src);\n          dest.on('drain', ondrain);\n\n          var cleanedUp = false;\n          function cleanup() {\n            debug('cleanup');\n            // cleanup event handlers once the pipe is broken\n            dest.removeListener('close', onclose);\n            dest.removeListener('finish', onfinish);\n            dest.removeListener('drain', ondrain);\n            dest.removeListener('error', onerror);\n            dest.removeListener('unpipe', onunpipe);\n            src.removeListener('end', onend);\n            src.removeListener('end', unpipe);\n            src.removeListener('data', ondata);\n\n            cleanedUp = true;\n\n            // if the reader is waiting for a drain event from this\n            // specific writer, then it would cause it to never start\n            // flowing again.\n            // So, if this is awaiting a drain, then we just call it now.\n            // If we don't know, then assume that we are waiting for one.\n            if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n          }\n\n          // If the user pushes more data while we're writing to dest then we'll end up\n          // in ondata again. However, we only want to increase awaitDrain once because\n          // dest will only emit one 'drain' event for the multiple writes.\n          // => Introduce a guard on increasing awaitDrain.\n          var increasedAwaitDrain = false;\n          src.on('data', ondata);\n          function ondata(chunk) {\n            debug('ondata');\n            increasedAwaitDrain = false;\n            var ret = dest.write(chunk);\n            if (false === ret && !increasedAwaitDrain) {\n              // If the user unpiped during `dest.write()`, it is possible\n              // to get stuck in a permanently paused state if that write\n              // also returned false.\n              // => Check whether `dest` is still a piping destination.\n              if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n                debug('false write response, pause', src._readableState.awaitDrain);\n                src._readableState.awaitDrain++;\n                increasedAwaitDrain = true;\n              }\n              src.pause();\n            }\n          }\n\n          // if the dest has an error, then stop piping into it.\n          // however, don't suppress the throwing behavior for this.\n          function onerror(er) {\n            debug('onerror', er);\n            unpipe();\n            dest.removeListener('error', onerror);\n            if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n          }\n\n          // Make sure our error handler is attached before userland ones.\n          prependListener(dest, 'error', onerror);\n\n          // Both close and finish should trigger unpipe, but only once.\n          function onclose() {\n            dest.removeListener('finish', onfinish);\n            unpipe();\n          }\n          dest.once('close', onclose);\n          function onfinish() {\n            debug('onfinish');\n            dest.removeListener('close', onclose);\n            unpipe();\n          }\n          dest.once('finish', onfinish);\n\n          function unpipe() {\n            debug('unpipe');\n            src.unpipe(dest);\n          }\n\n          // tell the dest that it's being piped to\n          dest.emit('pipe', src);\n\n          // start the flow if it hasn't been started already.\n          if (!state.flowing) {\n            debug('pipe resume');\n            src.resume();\n          }\n\n          return dest;\n        };\n\n        function pipeOnDrain(src) {\n          return function () {\n            var state = src._readableState;\n            debug('pipeOnDrain', state.awaitDrain);\n            if (state.awaitDrain) state.awaitDrain--;\n            if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n              state.flowing = true;\n              flow(src);\n            }\n          };\n        }\n\n        Readable.prototype.unpipe = function (dest) {\n          var state = this._readableState;\n          var unpipeInfo = { hasUnpiped: false };\n\n          // if we're not piping anywhere, then do nothing.\n          if (state.pipesCount === 0) return this;\n\n          // just one destination.  most common case.\n          if (state.pipesCount === 1) {\n            // passed in one, but it's not the right one.\n            if (dest && dest !== state.pipes) return this;\n\n            if (!dest) dest = state.pipes;\n\n            // got a match.\n            state.pipes = null;\n            state.pipesCount = 0;\n            state.flowing = false;\n            if (dest) dest.emit('unpipe', this, unpipeInfo);\n            return this;\n          }\n\n          // slow case. multiple pipe destinations.\n\n          if (!dest) {\n            // remove all.\n            var dests = state.pipes;\n            var len = state.pipesCount;\n            state.pipes = null;\n            state.pipesCount = 0;\n            state.flowing = false;\n\n            for (var i = 0; i < len; i++) {\n              dests[i].emit('unpipe', this, unpipeInfo);\n            }return this;\n          }\n\n          // try to find the right one.\n          var index = indexOf(state.pipes, dest);\n          if (index === -1) return this;\n\n          state.pipes.splice(index, 1);\n          state.pipesCount -= 1;\n          if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n          dest.emit('unpipe', this, unpipeInfo);\n\n          return this;\n        };\n\n        // set up data events if they are asked for\n        // Ensure readable listeners eventually get something\n        Readable.prototype.on = function (ev, fn) {\n          var res = Stream.prototype.on.call(this, ev, fn);\n\n          if (ev === 'data') {\n            // Start flowing on next tick if stream isn't explicitly paused\n            if (this._readableState.flowing !== false) this.resume();\n          } else if (ev === 'readable') {\n            var state = this._readableState;\n            if (!state.endEmitted && !state.readableListening) {\n              state.readableListening = state.needReadable = true;\n              state.emittedReadable = false;\n              if (!state.reading) {\n                pna.nextTick(nReadingNextTick, this);\n              } else if (state.length) {\n                emitReadable(this);\n              }\n            }\n          }\n\n          return res;\n        };\n        Readable.prototype.addListener = Readable.prototype.on;\n\n        function nReadingNextTick(self) {\n          debug('readable nexttick read 0');\n          self.read(0);\n        }\n\n        // pause() and resume() are remnants of the legacy readable stream API\n        // If the user uses them, then switch into old mode.\n        Readable.prototype.resume = function () {\n          var state = this._readableState;\n          if (!state.flowing) {\n            debug('resume');\n            state.flowing = true;\n            resume(this, state);\n          }\n          return this;\n        };\n\n        function resume(stream, state) {\n          if (!state.resumeScheduled) {\n            state.resumeScheduled = true;\n            pna.nextTick(resume_, stream, state);\n          }\n        }\n\n        function resume_(stream, state) {\n          if (!state.reading) {\n            debug('resume read 0');\n            stream.read(0);\n          }\n\n          state.resumeScheduled = false;\n          state.awaitDrain = 0;\n          stream.emit('resume');\n          flow(stream);\n          if (state.flowing && !state.reading) stream.read(0);\n        }\n\n        Readable.prototype.pause = function () {\n          debug('call pause flowing=%j', this._readableState.flowing);\n          if (false !== this._readableState.flowing) {\n            debug('pause');\n            this._readableState.flowing = false;\n            this.emit('pause');\n          }\n          return this;\n        };\n\n        function flow(stream) {\n          var state = stream._readableState;\n          debug('flow', state.flowing);\n          while (state.flowing && stream.read() !== null) {}\n        }\n\n        // wrap an old-style stream as the async data source.\n        // This is *not* part of the readable stream interface.\n        // It is an ugly unfortunate mess of history.\n        Readable.prototype.wrap = function (stream) {\n          var _this = this;\n\n          var state = this._readableState;\n          var paused = false;\n\n          stream.on('end', function () {\n            debug('wrapped end');\n            if (state.decoder && !state.ended) {\n              var chunk = state.decoder.end();\n              if (chunk && chunk.length) _this.push(chunk);\n            }\n\n            _this.push(null);\n          });\n\n          stream.on('data', function (chunk) {\n            debug('wrapped data');\n            if (state.decoder) chunk = state.decoder.write(chunk);\n\n            // don't skip over falsy values in objectMode\n            if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n            var ret = _this.push(chunk);\n            if (!ret) {\n              paused = true;\n              stream.pause();\n            }\n          });\n\n          // proxy all the other methods.\n          // important when wrapping filters and duplexes.\n          for (var i in stream) {\n            if (this[i] === undefined && typeof stream[i] === 'function') {\n              this[i] = function (method) {\n                return function () {\n                  return stream[method].apply(stream, arguments);\n                };\n              }(i);\n            }\n          }\n\n          // proxy certain important events.\n          for (var n = 0; n < kProxyEvents.length; n++) {\n            stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n          }\n\n          // when we try to consume some more bytes, simply unpause the\n          // underlying stream.\n          this._read = function (n) {\n            debug('wrapped _read', n);\n            if (paused) {\n              paused = false;\n              stream.resume();\n            }\n          };\n\n          return this;\n        };\n\n        Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n          // making it explicit this property is not enumerable\n          // because otherwise some prototype manipulation in\n          // userland will fail\n          enumerable: false,\n          get: function get() {\n            return this._readableState.highWaterMark;\n          } });\n\n\n        // exposed for testing purposes only.\n        Readable._fromList = fromList;\n\n        // Pluck off n bytes from an array of buffers.\n        // Length is the combined lengths of all the buffers in the list.\n        // This function is designed to be inlinable, so please take care when making\n        // changes to the function body.\n        function fromList(n, state) {\n          // nothing buffered\n          if (state.length === 0) return null;\n\n          var ret;\n          if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n            // read it all, truncate the list\n            if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n            state.buffer.clear();\n          } else {\n            // read part of list\n            ret = fromListPartial(n, state.buffer, state.decoder);\n          }\n\n          return ret;\n        }\n\n        // Extracts only enough buffered data to satisfy the amount requested.\n        // This function is designed to be inlinable, so please take care when making\n        // changes to the function body.\n        function fromListPartial(n, list, hasStrings) {\n          var ret;\n          if (n < list.head.data.length) {\n            // slice is the same for buffers and strings\n            ret = list.head.data.slice(0, n);\n            list.head.data = list.head.data.slice(n);\n          } else if (n === list.head.data.length) {\n            // first chunk is a perfect match\n            ret = list.shift();\n          } else {\n            // result spans more than one buffer\n            ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n          }\n          return ret;\n        }\n\n        // Copies a specified amount of characters from the list of buffered data\n        // chunks.\n        // This function is designed to be inlinable, so please take care when making\n        // changes to the function body.\n        function copyFromBufferString(n, list) {\n          var p = list.head;\n          var c = 1;\n          var ret = p.data;\n          n -= ret.length;\n          while (p = p.next) {\n            var str = p.data;\n            var nb = n > str.length ? str.length : n;\n            if (nb === str.length) ret += str;else ret += str.slice(0, n);\n            n -= nb;\n            if (n === 0) {\n              if (nb === str.length) {\n                ++c;\n                if (p.next) list.head = p.next;else list.head = list.tail = null;\n              } else {\n                list.head = p;\n                p.data = str.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          list.length -= c;\n          return ret;\n        }\n\n        // Copies a specified amount of bytes from the list of buffered data chunks.\n        // This function is designed to be inlinable, so please take care when making\n        // changes to the function body.\n        function copyFromBuffer(n, list) {\n          var ret = Buffer.allocUnsafe(n);\n          var p = list.head;\n          var c = 1;\n          p.data.copy(ret);\n          n -= p.data.length;\n          while (p = p.next) {\n            var buf = p.data;\n            var nb = n > buf.length ? buf.length : n;\n            buf.copy(ret, ret.length - n, 0, nb);\n            n -= nb;\n            if (n === 0) {\n              if (nb === buf.length) {\n                ++c;\n                if (p.next) list.head = p.next;else list.head = list.tail = null;\n              } else {\n                list.head = p;\n                p.data = buf.slice(nb);\n              }\n              break;\n            }\n            ++c;\n          }\n          list.length -= c;\n          return ret;\n        }\n\n        function endReadable(stream) {\n          var state = stream._readableState;\n\n          // If we get here before consuming all the bytes, then that is a\n          // bug in node.  Should never happen.\n          if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n          if (!state.endEmitted) {\n            state.ended = true;\n            pna.nextTick(endReadableNT, state, stream);\n          }\n        }\n\n        function endReadableNT(state, stream) {\n          // Check that we didn't get one last unshift.\n          if (!state.endEmitted && state.length === 0) {\n            state.endEmitted = true;\n            stream.readable = false;\n            stream.emit('end');\n          }\n        }\n\n        function indexOf(xs, x) {\n          for (var i = 0, l = xs.length; i < l; i++) {\n            if (xs[i] === x) return i;\n          }\n          return -1;\n        }\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, { \"./_stream_duplex\": 98, \"./internal/streams/BufferList\": 103, \"./internal/streams/destroy\": 104, \"./internal/streams/stream\": 105, \"_process\": 92, \"core-util-is\": 14, \"events\": 13, \"inherits\": 80, \"isarray\": 106, \"process-nextick-args\": 91, \"safe-buffer\": 110, \"string_decoder/\": 107, \"util\": 11 }], 101: [function (require, module, exports) {\n      // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      // a transform stream is a readable/writable stream where you do\n      // something with the data.  Sometimes it's called a \"filter\",\n      // but that's not a great name for it, since that implies a thing where\n      // some bits pass through, and others are simply ignored.  (That would\n      // be a valid example of a transform, of course.)\n      //\n      // While the output is causally related to the input, it's not a\n      // necessarily symmetric or synchronous transformation.  For example,\n      // a zlib stream might take multiple plain-text writes(), and then\n      // emit a single compressed chunk some time in the future.\n      //\n      // Here's how this works:\n      //\n      // The Transform stream has all the aspects of the readable and writable\n      // stream classes.  When you write(chunk), that calls _write(chunk,cb)\n      // internally, and returns false if there's a lot of pending writes\n      // buffered up.  When you call read(), that calls _read(n) until\n      // there's enough pending readable data buffered up.\n      //\n      // In a transform stream, the written data is placed in a buffer.  When\n      // _read(n) is called, it transforms the queued up data, calling the\n      // buffered _write cb's as it consumes chunks.  If consuming a single\n      // written chunk would result in multiple output chunks, then the first\n      // outputted bit calls the readcb, and subsequent chunks just go into\n      // the read buffer, and will cause it to emit 'readable' if necessary.\n      //\n      // This way, back-pressure is actually determined by the reading side,\n      // since _read has to be called to start processing a new chunk.  However,\n      // a pathological inflate type of transform can cause excessive buffering\n      // here.  For example, imagine a stream where every byte of input is\n      // interpreted as an integer from 0-255, and then results in that many\n      // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n      // 1kb of data being output.  In this case, you could write a very small\n      // amount of input, and end up with a very large amount of output.  In\n      // such a pathological inflating mechanism, there'd be no way to tell\n      // the system to stop doing the transform.  A single 4MB write could\n      // cause the system to run out of memory.\n      //\n      // However, even in such a pathological case, only a single written chunk\n      // would be consumed, and then the rest would wait (un-transformed) until\n      // the results of the previous transformed chunk were consumed.\n\n      'use strict';\n\n      module.exports = Transform;\n\n      var Duplex = require('./_stream_duplex');\n\n      /*<replacement>*/\n      var util = require('core-util-is');\n      util.inherits = require('inherits');\n      /*</replacement>*/\n\n      util.inherits(Transform, Duplex);\n\n      function afterTransform(er, data) {\n        var ts = this._transformState;\n        ts.transforming = false;\n\n        var cb = ts.writecb;\n\n        if (!cb) {\n          return this.emit('error', new Error('write callback called multiple times'));\n        }\n\n        ts.writechunk = null;\n        ts.writecb = null;\n\n        if (data != null) // single equals check for both `null` and `undefined`\n          this.push(data);\n\n        cb(er);\n\n        var rs = this._readableState;\n        rs.reading = false;\n        if (rs.needReadable || rs.length < rs.highWaterMark) {\n          this._read(rs.highWaterMark);\n        }\n      }\n\n      function Transform(options) {\n        if (!(this instanceof Transform)) return new Transform(options);\n\n        Duplex.call(this, options);\n\n        this._transformState = {\n          afterTransform: afterTransform.bind(this),\n          needTransform: false,\n          transforming: false,\n          writecb: null,\n          writechunk: null,\n          writeencoding: null };\n\n\n        // start out asking for a readable event once data is transformed.\n        this._readableState.needReadable = true;\n\n        // we have implemented the _read method, and done the other things\n        // that Readable wants before the first _read call, so unset the\n        // sync guard flag.\n        this._readableState.sync = false;\n\n        if (options) {\n          if (typeof options.transform === 'function') this._transform = options.transform;\n\n          if (typeof options.flush === 'function') this._flush = options.flush;\n        }\n\n        // When the writable side finishes, then flush out anything remaining.\n        this.on('prefinish', prefinish);\n      }\n\n      function prefinish() {\n        var _this = this;\n\n        if (typeof this._flush === 'function') {\n          this._flush(function (er, data) {\n            done(_this, er, data);\n          });\n        } else {\n          done(this, null, null);\n        }\n      }\n\n      Transform.prototype.push = function (chunk, encoding) {\n        this._transformState.needTransform = false;\n        return Duplex.prototype.push.call(this, chunk, encoding);\n      };\n\n      // This is the part where you do stuff!\n      // override this function in implementation classes.\n      // 'chunk' is an input chunk.\n      //\n      // Call `push(newChunk)` to pass along transformed output\n      // to the readable side.  You may call 'push' zero or more times.\n      //\n      // Call `cb(err)` when you are done with this chunk.  If you pass\n      // an error, then that'll put the hurt on the whole operation.  If you\n      // never call cb(), then you'll never get another chunk.\n      Transform.prototype._transform = function (chunk, encoding, cb) {\n        throw new Error('_transform() is not implemented');\n      };\n\n      Transform.prototype._write = function (chunk, encoding, cb) {\n        var ts = this._transformState;\n        ts.writecb = cb;\n        ts.writechunk = chunk;\n        ts.writeencoding = encoding;\n        if (!ts.transforming) {\n          var rs = this._readableState;\n          if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n        }\n      };\n\n      // Doesn't matter what the args are here.\n      // _transform does all the work.\n      // That we got here means that the readable side wants more data.\n      Transform.prototype._read = function (n) {\n        var ts = this._transformState;\n\n        if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n          ts.transforming = true;\n          this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n        } else {\n          // mark that we need a transform, so that any data that comes in\n          // will get processed, now that we've asked for it.\n          ts.needTransform = true;\n        }\n      };\n\n      Transform.prototype._destroy = function (err, cb) {\n        var _this2 = this;\n\n        Duplex.prototype._destroy.call(this, err, function (err2) {\n          cb(err2);\n          _this2.emit('close');\n        });\n      };\n\n      function done(stream, er, data) {\n        if (er) return stream.emit('error', er);\n\n        if (data != null) // single equals check for both `null` and `undefined`\n          stream.push(data);\n\n        // if there's nothing in the write buffer, then that means\n        // that nothing more will ever be provided\n        if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n        if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n        return stream.push(null);\n      }\n    }, { \"./_stream_duplex\": 98, \"core-util-is\": 14, \"inherits\": 80 }], 102: [function (require, module, exports) {\n      (function (process, global, setImmediate) {\n        // Copyright Joyent, Inc. and other Node contributors.\n        //\n        // Permission is hereby granted, free of charge, to any person obtaining a\n        // copy of this software and associated documentation files (the\n        // \"Software\"), to deal in the Software without restriction, including\n        // without limitation the rights to use, copy, modify, merge, publish,\n        // distribute, sublicense, and/or sell copies of the Software, and to permit\n        // persons to whom the Software is furnished to do so, subject to the\n        // following conditions:\n        //\n        // The above copyright notice and this permission notice shall be included\n        // in all copies or substantial portions of the Software.\n        //\n        // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n        // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n        // A bit simpler than readable streams.\n        // Implement an async ._write(chunk, encoding, cb), and it'll handle all\n        // the drain event emission and buffering.\n\n        'use strict';\n\n        /*<replacement>*/\n\n        var pna = require('process-nextick-args');\n        /*</replacement>*/\n\n        module.exports = Writable;\n\n        /* <replacement> */\n        function WriteReq(chunk, encoding, cb) {\n          this.chunk = chunk;\n          this.encoding = encoding;\n          this.callback = cb;\n          this.next = null;\n        }\n\n        // It seems a linked list but it is not\n        // there will be only 2 of these for each stream\n        function CorkedRequest(state) {\n          var _this = this;\n\n          this.next = null;\n          this.entry = null;\n          this.finish = function () {\n            onCorkedFinish(_this, state);\n          };\n        }\n        /* </replacement> */\n\n        /*<replacement>*/\n        var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n        /*</replacement>*/\n\n        /*<replacement>*/\n        var Duplex;\n        /*</replacement>*/\n\n        Writable.WritableState = WritableState;\n\n        /*<replacement>*/\n        var util = require('core-util-is');\n        util.inherits = require('inherits');\n        /*</replacement>*/\n\n        /*<replacement>*/\n        var internalUtil = {\n          deprecate: require('util-deprecate') };\n\n        /*</replacement>*/\n\n        /*<replacement>*/\n        var Stream = require('./internal/streams/stream');\n        /*</replacement>*/\n\n        /*<replacement>*/\n\n        var Buffer = require('safe-buffer').Buffer;\n        var OurUint8Array = global.Uint8Array || function () {};\n        function _uint8ArrayToBuffer(chunk) {\n          return Buffer.from(chunk);\n        }\n        function _isUint8Array(obj) {\n          return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n        }\n\n        /*</replacement>*/\n\n        var destroyImpl = require('./internal/streams/destroy');\n\n        util.inherits(Writable, Stream);\n\n        function nop() {}\n\n        function WritableState(options, stream) {\n          Duplex = Duplex || require('./_stream_duplex');\n\n          options = options || {};\n\n          // Duplex streams are both readable and writable, but share\n          // the same options object.\n          // However, some cases require setting options to different\n          // values for the readable and the writable sides of the duplex stream.\n          // These options can be provided separately as readableXXX and writableXXX.\n          var isDuplex = stream instanceof Duplex;\n\n          // object stream flag to indicate whether or not this stream\n          // contains buffers or objects.\n          this.objectMode = !!options.objectMode;\n\n          if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n          // the point at which write() starts returning false\n          // Note: 0 is a valid value, means that we always return false if\n          // the entire buffer is not flushed immediately on write()\n          var hwm = options.highWaterMark;\n          var writableHwm = options.writableHighWaterMark;\n          var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n          if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n          // cast to ints.\n          this.highWaterMark = Math.floor(this.highWaterMark);\n\n          // if _final has been called\n          this.finalCalled = false;\n\n          // drain event flag.\n          this.needDrain = false;\n          // at the start of calling end()\n          this.ending = false;\n          // when end() has been called, and returned\n          this.ended = false;\n          // when 'finish' is emitted\n          this.finished = false;\n\n          // has it been destroyed\n          this.destroyed = false;\n\n          // should we decode strings into buffers before passing to _write?\n          // this is here so that some node-core streams can optimize string\n          // handling at a lower level.\n          var noDecode = options.decodeStrings === false;\n          this.decodeStrings = !noDecode;\n\n          // Crypto is kind of old and crusty.  Historically, its default string\n          // encoding is 'binary' so we have to make this configurable.\n          // Everything else in the universe uses 'utf8', though.\n          this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n          // not an actual buffer we keep track of, but a measurement\n          // of how much we're waiting to get pushed to some underlying\n          // socket or file.\n          this.length = 0;\n\n          // a flag to see when we're in the middle of a write.\n          this.writing = false;\n\n          // when true all writes will be buffered until .uncork() call\n          this.corked = 0;\n\n          // a flag to be able to tell if the onwrite cb is called immediately,\n          // or on a later tick.  We set this to true at first, because any\n          // actions that shouldn't happen until \"later\" should generally also\n          // not happen before the first write call.\n          this.sync = true;\n\n          // a flag to know if we're processing previously buffered items, which\n          // may call the _write() callback in the same tick, so that we don't\n          // end up in an overlapped onwrite situation.\n          this.bufferProcessing = false;\n\n          // the callback that's passed to _write(chunk,cb)\n          this.onwrite = function (er) {\n            onwrite(stream, er);\n          };\n\n          // the callback that the user supplies to write(chunk,encoding,cb)\n          this.writecb = null;\n\n          // the amount that is being written when _write is called.\n          this.writelen = 0;\n\n          this.bufferedRequest = null;\n          this.lastBufferedRequest = null;\n\n          // number of pending user-supplied write callbacks\n          // this must be 0 before 'finish' can be emitted\n          this.pendingcb = 0;\n\n          // emit prefinish if the only thing we're waiting for is _write cbs\n          // This is relevant for synchronous Transform streams\n          this.prefinished = false;\n\n          // True if the error was already emitted and should not be thrown again\n          this.errorEmitted = false;\n\n          // count buffered requests\n          this.bufferedRequestCount = 0;\n\n          // allocate the first CorkedRequest, there is always\n          // one allocated and free to use, and we maintain at most two\n          this.corkedRequestsFree = new CorkedRequest(this);\n        }\n\n        WritableState.prototype.getBuffer = function getBuffer() {\n          var current = this.bufferedRequest;\n          var out = [];\n          while (current) {\n            out.push(current);\n            current = current.next;\n          }\n          return out;\n        };\n\n        (function () {\n          try {\n            Object.defineProperty(WritableState.prototype, 'buffer', {\n              get: internalUtil.deprecate(function () {\n                return this.getBuffer();\n              }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003') });\n\n          } catch (_) {}\n        })();\n\n        // Test _writableState for inheritance to account for Duplex streams,\n        // whose prototype chain only points to Readable.\n        var realHasInstance;\n        if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n          realHasInstance = Function.prototype[Symbol.hasInstance];\n          Object.defineProperty(Writable, Symbol.hasInstance, {\n            value: function value(object) {\n              if (realHasInstance.call(this, object)) return true;\n              if (this !== Writable) return false;\n\n              return object && object._writableState instanceof WritableState;\n            } });\n\n        } else {\n          realHasInstance = function realHasInstance(object) {\n            return object instanceof this;\n          };\n        }\n\n        function Writable(options) {\n          Duplex = Duplex || require('./_stream_duplex');\n\n          // Writable ctor is applied to Duplexes, too.\n          // `realHasInstance` is necessary because using plain `instanceof`\n          // would return false, as no `_writableState` property is attached.\n\n          // Trying to use the custom `instanceof` for Writable here will also break the\n          // Node.js LazyTransform implementation, which has a non-trivial getter for\n          // `_writableState` that would lead to infinite recursion.\n          if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n            return new Writable(options);\n          }\n\n          this._writableState = new WritableState(options, this);\n\n          // legacy.\n          this.writable = true;\n\n          if (options) {\n            if (typeof options.write === 'function') this._write = options.write;\n\n            if (typeof options.writev === 'function') this._writev = options.writev;\n\n            if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n            if (typeof options.final === 'function') this._final = options.final;\n          }\n\n          Stream.call(this);\n        }\n\n        // Otherwise people can pipe Writable streams, which is just wrong.\n        Writable.prototype.pipe = function () {\n          this.emit('error', new Error('Cannot pipe, not readable'));\n        };\n\n        function writeAfterEnd(stream, cb) {\n          var er = new Error('write after end');\n          // TODO: defer error events consistently everywhere, not just the cb\n          stream.emit('error', er);\n          pna.nextTick(cb, er);\n        }\n\n        // Checks that a user-supplied chunk is valid, especially for the particular\n        // mode the stream is in. Currently this means that `null` is never accepted\n        // and undefined/non-string values are only allowed in object mode.\n        function validChunk(stream, state, chunk, cb) {\n          var valid = true;\n          var er = false;\n\n          if (chunk === null) {\n            er = new TypeError('May not write null values to stream');\n          } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n            er = new TypeError('Invalid non-string/buffer chunk');\n          }\n          if (er) {\n            stream.emit('error', er);\n            pna.nextTick(cb, er);\n            valid = false;\n          }\n          return valid;\n        }\n\n        Writable.prototype.write = function (chunk, encoding, cb) {\n          var state = this._writableState;\n          var ret = false;\n          var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n          if (isBuf && !Buffer.isBuffer(chunk)) {\n            chunk = _uint8ArrayToBuffer(chunk);\n          }\n\n          if (typeof encoding === 'function') {\n            cb = encoding;\n            encoding = null;\n          }\n\n          if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n          if (typeof cb !== 'function') cb = nop;\n\n          if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n            state.pendingcb++;\n            ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n          }\n\n          return ret;\n        };\n\n        Writable.prototype.cork = function () {\n          var state = this._writableState;\n\n          state.corked++;\n        };\n\n        Writable.prototype.uncork = function () {\n          var state = this._writableState;\n\n          if (state.corked) {\n            state.corked--;\n\n            if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n          }\n        };\n\n        Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n          // node::ParseEncoding() requires lower case.\n          if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n          if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n          this._writableState.defaultEncoding = encoding;\n          return this;\n        };\n\n        function decodeChunk(state, chunk, encoding) {\n          if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n            chunk = Buffer.from(chunk, encoding);\n          }\n          return chunk;\n        }\n\n        Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n          // making it explicit this property is not enumerable\n          // because otherwise some prototype manipulation in\n          // userland will fail\n          enumerable: false,\n          get: function get() {\n            return this._writableState.highWaterMark;\n          } });\n\n\n        // if we're already writing something, then just put this\n        // in the queue, and wait our turn.  Otherwise, call _write\n        // If we return false, then we need a drain event, so set that flag.\n        function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n          if (!isBuf) {\n            var newChunk = decodeChunk(state, chunk, encoding);\n            if (chunk !== newChunk) {\n              isBuf = true;\n              encoding = 'buffer';\n              chunk = newChunk;\n            }\n          }\n          var len = state.objectMode ? 1 : chunk.length;\n\n          state.length += len;\n\n          var ret = state.length < state.highWaterMark;\n          // we must ensure that previous needDrain will not be reset to false.\n          if (!ret) state.needDrain = true;\n\n          if (state.writing || state.corked) {\n            var last = state.lastBufferedRequest;\n            state.lastBufferedRequest = {\n              chunk: chunk,\n              encoding: encoding,\n              isBuf: isBuf,\n              callback: cb,\n              next: null };\n\n            if (last) {\n              last.next = state.lastBufferedRequest;\n            } else {\n              state.bufferedRequest = state.lastBufferedRequest;\n            }\n            state.bufferedRequestCount += 1;\n          } else {\n            doWrite(stream, state, false, len, chunk, encoding, cb);\n          }\n\n          return ret;\n        }\n\n        function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n          state.writelen = len;\n          state.writecb = cb;\n          state.writing = true;\n          state.sync = true;\n          if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n          state.sync = false;\n        }\n\n        function onwriteError(stream, state, sync, er, cb) {\n          --state.pendingcb;\n\n          if (sync) {\n            // defer the callback if we are being called synchronously\n            // to avoid piling up things on the stack\n            pna.nextTick(cb, er);\n            // this can emit finish, and it will always happen\n            // after error\n            pna.nextTick(finishMaybe, stream, state);\n            stream._writableState.errorEmitted = true;\n            stream.emit('error', er);\n          } else {\n            // the caller expect this to happen before if\n            // it is async\n            cb(er);\n            stream._writableState.errorEmitted = true;\n            stream.emit('error', er);\n            // this can emit finish, but finish must\n            // always follow error\n            finishMaybe(stream, state);\n          }\n        }\n\n        function onwriteStateUpdate(state) {\n          state.writing = false;\n          state.writecb = null;\n          state.length -= state.writelen;\n          state.writelen = 0;\n        }\n\n        function onwrite(stream, er) {\n          var state = stream._writableState;\n          var sync = state.sync;\n          var cb = state.writecb;\n\n          onwriteStateUpdate(state);\n\n          if (er) onwriteError(stream, state, sync, er, cb);else {\n            // Check if we're actually ready to finish, but don't emit yet\n            var finished = needFinish(state);\n\n            if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n              clearBuffer(stream, state);\n            }\n\n            if (sync) {\n              /*<replacement>*/\n              asyncWrite(afterWrite, stream, state, finished, cb);\n              /*</replacement>*/\n            } else {\n              afterWrite(stream, state, finished, cb);\n            }\n          }\n        }\n\n        function afterWrite(stream, state, finished, cb) {\n          if (!finished) onwriteDrain(stream, state);\n          state.pendingcb--;\n          cb();\n          finishMaybe(stream, state);\n        }\n\n        // Must force callback to be called on nextTick, so that we don't\n        // emit 'drain' before the write() consumer gets the 'false' return\n        // value, and has a chance to attach a 'drain' listener.\n        function onwriteDrain(stream, state) {\n          if (state.length === 0 && state.needDrain) {\n            state.needDrain = false;\n            stream.emit('drain');\n          }\n        }\n\n        // if there's something in the buffer waiting, then process it\n        function clearBuffer(stream, state) {\n          state.bufferProcessing = true;\n          var entry = state.bufferedRequest;\n\n          if (stream._writev && entry && entry.next) {\n            // Fast case, write everything using _writev()\n            var l = state.bufferedRequestCount;\n            var buffer = new Array(l);\n            var holder = state.corkedRequestsFree;\n            holder.entry = entry;\n\n            var count = 0;\n            var allBuffers = true;\n            while (entry) {\n              buffer[count] = entry;\n              if (!entry.isBuf) allBuffers = false;\n              entry = entry.next;\n              count += 1;\n            }\n            buffer.allBuffers = allBuffers;\n\n            doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n            // doWrite is almost always async, defer these to save a bit of time\n            // as the hot path ends with doWrite\n            state.pendingcb++;\n            state.lastBufferedRequest = null;\n            if (holder.next) {\n              state.corkedRequestsFree = holder.next;\n              holder.next = null;\n            } else {\n              state.corkedRequestsFree = new CorkedRequest(state);\n            }\n            state.bufferedRequestCount = 0;\n          } else {\n            // Slow case, write chunks one-by-one\n            while (entry) {\n              var chunk = entry.chunk;\n              var encoding = entry.encoding;\n              var cb = entry.callback;\n              var len = state.objectMode ? 1 : chunk.length;\n\n              doWrite(stream, state, false, len, chunk, encoding, cb);\n              entry = entry.next;\n              state.bufferedRequestCount--;\n              // if we didn't call the onwrite immediately, then\n              // it means that we need to wait until it does.\n              // also, that means that the chunk and cb are currently\n              // being processed, so move the buffer counter past them.\n              if (state.writing) {\n                break;\n              }\n            }\n\n            if (entry === null) state.lastBufferedRequest = null;\n          }\n\n          state.bufferedRequest = entry;\n          state.bufferProcessing = false;\n        }\n\n        Writable.prototype._write = function (chunk, encoding, cb) {\n          cb(new Error('_write() is not implemented'));\n        };\n\n        Writable.prototype._writev = null;\n\n        Writable.prototype.end = function (chunk, encoding, cb) {\n          var state = this._writableState;\n\n          if (typeof chunk === 'function') {\n            cb = chunk;\n            chunk = null;\n            encoding = null;\n          } else if (typeof encoding === 'function') {\n            cb = encoding;\n            encoding = null;\n          }\n\n          if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n          // .end() fully uncorks\n          if (state.corked) {\n            state.corked = 1;\n            this.uncork();\n          }\n\n          // ignore unnecessary end() calls.\n          if (!state.ending && !state.finished) endWritable(this, state, cb);\n        };\n\n        function needFinish(state) {\n          return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n        }\n        function callFinal(stream, state) {\n          stream._final(function (err) {\n            state.pendingcb--;\n            if (err) {\n              stream.emit('error', err);\n            }\n            state.prefinished = true;\n            stream.emit('prefinish');\n            finishMaybe(stream, state);\n          });\n        }\n        function prefinish(stream, state) {\n          if (!state.prefinished && !state.finalCalled) {\n            if (typeof stream._final === 'function') {\n              state.pendingcb++;\n              state.finalCalled = true;\n              pna.nextTick(callFinal, stream, state);\n            } else {\n              state.prefinished = true;\n              stream.emit('prefinish');\n            }\n          }\n        }\n\n        function finishMaybe(stream, state) {\n          var need = needFinish(state);\n          if (need) {\n            prefinish(stream, state);\n            if (state.pendingcb === 0) {\n              state.finished = true;\n              stream.emit('finish');\n            }\n          }\n          return need;\n        }\n\n        function endWritable(stream, state, cb) {\n          state.ending = true;\n          finishMaybe(stream, state);\n          if (cb) {\n            if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n          }\n          state.ended = true;\n          stream.writable = false;\n        }\n\n        function onCorkedFinish(corkReq, state, err) {\n          var entry = corkReq.entry;\n          corkReq.entry = null;\n          while (entry) {\n            var cb = entry.callback;\n            state.pendingcb--;\n            cb(err);\n            entry = entry.next;\n          }\n          if (state.corkedRequestsFree) {\n            state.corkedRequestsFree.next = corkReq;\n          } else {\n            state.corkedRequestsFree = corkReq;\n          }\n        }\n\n        Object.defineProperty(Writable.prototype, 'destroyed', {\n          get: function get() {\n            if (this._writableState === undefined) {\n              return false;\n            }\n            return this._writableState.destroyed;\n          },\n          set: function set(value) {\n            // we ignore the value if the stream\n            // has not been initialized yet\n            if (!this._writableState) {\n              return;\n            }\n\n            // backward compatibility, the user is explicitly\n            // managing destroyed\n            this._writableState.destroyed = value;\n          } });\n\n\n        Writable.prototype.destroy = destroyImpl.destroy;\n        Writable.prototype._undestroy = destroyImpl.undestroy;\n        Writable.prototype._destroy = function (err, cb) {\n          this.end();\n          cb(err);\n        };\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {}, require(\"timers\").setImmediate);\n    }, { \"./_stream_duplex\": 98, \"./internal/streams/destroy\": 104, \"./internal/streams/stream\": 105, \"_process\": 92, \"core-util-is\": 14, \"inherits\": 80, \"process-nextick-args\": 91, \"safe-buffer\": 110, \"timers\": 112, \"util-deprecate\": 115 }], 103: [function (require, module, exports) {\n      'use strict';\n\n      function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\n      var Buffer = require('safe-buffer').Buffer;\n      var util = require('util');\n\n      function copyBuffer(src, target, offset) {\n        src.copy(target, offset);\n      }\n\n      module.exports = function () {\n        function BufferList() {\n          _classCallCheck(this, BufferList);\n\n          this.head = null;\n          this.tail = null;\n          this.length = 0;\n        }\n\n        BufferList.prototype.push = function push(v) {\n          var entry = { data: v, next: null };\n          if (this.length > 0) this.tail.next = entry;else this.head = entry;\n          this.tail = entry;\n          ++this.length;\n        };\n\n        BufferList.prototype.unshift = function unshift(v) {\n          var entry = { data: v, next: this.head };\n          if (this.length === 0) this.tail = entry;\n          this.head = entry;\n          ++this.length;\n        };\n\n        BufferList.prototype.shift = function shift() {\n          if (this.length === 0) return;\n          var ret = this.head.data;\n          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n          --this.length;\n          return ret;\n        };\n\n        BufferList.prototype.clear = function clear() {\n          this.head = this.tail = null;\n          this.length = 0;\n        };\n\n        BufferList.prototype.join = function join(s) {\n          if (this.length === 0) return '';\n          var p = this.head;\n          var ret = '' + p.data;\n          while (p = p.next) {\n            ret += s + p.data;\n          }return ret;\n        };\n\n        BufferList.prototype.concat = function concat(n) {\n          if (this.length === 0) return Buffer.alloc(0);\n          if (this.length === 1) return this.head.data;\n          var ret = Buffer.allocUnsafe(n >>> 0);\n          var p = this.head;\n          var i = 0;\n          while (p) {\n            copyBuffer(p.data, ret, i);\n            i += p.data.length;\n            p = p.next;\n          }\n          return ret;\n        };\n\n        return BufferList;\n      }();\n\n      if (util && util.inspect && util.inspect.custom) {\n        module.exports.prototype[util.inspect.custom] = function () {\n          var obj = util.inspect({ length: this.length });\n          return this.constructor.name + ' ' + obj;\n        };\n      }\n    }, { \"safe-buffer\": 110, \"util\": 11 }], 104: [function (require, module, exports) {\n      'use strict';\n\n      /*<replacement>*/\n\n      var pna = require('process-nextick-args');\n      /*</replacement>*/\n\n      // undocumented cb() API, needed for core, not for public API\n      function destroy(err, cb) {\n        var _this = this;\n\n        var readableDestroyed = this._readableState && this._readableState.destroyed;\n        var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n        if (readableDestroyed || writableDestroyed) {\n          if (cb) {\n            cb(err);\n          } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n            pna.nextTick(emitErrorNT, this, err);\n          }\n          return this;\n        }\n\n        // we set destroyed to true before firing error callbacks in order\n        // to make it re-entrance safe in case destroy() is called within callbacks\n\n        if (this._readableState) {\n          this._readableState.destroyed = true;\n        }\n\n        // if this is a duplex stream mark the writable part as destroyed as well\n        if (this._writableState) {\n          this._writableState.destroyed = true;\n        }\n\n        this._destroy(err || null, function (err) {\n          if (!cb && err) {\n            pna.nextTick(emitErrorNT, _this, err);\n            if (_this._writableState) {\n              _this._writableState.errorEmitted = true;\n            }\n          } else if (cb) {\n            cb(err);\n          }\n        });\n\n        return this;\n      }\n\n      function undestroy() {\n        if (this._readableState) {\n          this._readableState.destroyed = false;\n          this._readableState.reading = false;\n          this._readableState.ended = false;\n          this._readableState.endEmitted = false;\n        }\n\n        if (this._writableState) {\n          this._writableState.destroyed = false;\n          this._writableState.ended = false;\n          this._writableState.ending = false;\n          this._writableState.finished = false;\n          this._writableState.errorEmitted = false;\n        }\n      }\n\n      function emitErrorNT(self, err) {\n        self.emit('error', err);\n      }\n\n      module.exports = {\n        destroy: destroy,\n        undestroy: undestroy };\n\n    }, { \"process-nextick-args\": 91 }], 105: [function (require, module, exports) {\n      module.exports = require('events').EventEmitter;\n\n    }, { \"events\": 13 }], 106: [function (require, module, exports) {\n      var toString = {}.toString;\n\n      module.exports = Array.isArray || function (arr) {\n        return toString.call(arr) == '[object Array]';\n      };\n\n    }, {}], 107: [function (require, module, exports) {\n      // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      'use strict';\n\n      /*<replacement>*/\n\n      var Buffer = require('safe-buffer').Buffer;\n      /*</replacement>*/\n\n      var isEncoding = Buffer.isEncoding || function (encoding) {\n        encoding = '' + encoding;\n        switch (encoding && encoding.toLowerCase()) {\n          case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n            return true;\n          default:\n            return false;}\n\n      };\n\n      function _normalizeEncoding(enc) {\n        if (!enc) return 'utf8';\n        var retried;\n        while (true) {\n          switch (enc) {\n            case 'utf8':\n            case 'utf-8':\n              return 'utf8';\n            case 'ucs2':\n            case 'ucs-2':\n            case 'utf16le':\n            case 'utf-16le':\n              return 'utf16le';\n            case 'latin1':\n            case 'binary':\n              return 'latin1';\n            case 'base64':\n            case 'ascii':\n            case 'hex':\n              return enc;\n            default:\n              if (retried) return; // undefined\n              enc = ('' + enc).toLowerCase();\n              retried = true;}\n\n        }\n      };\n\n      // Do not cache `Buffer.isEncoding` when checking encoding names as some\n      // modules monkey-patch it to support additional encodings\n      function normalizeEncoding(enc) {\n        var nenc = _normalizeEncoding(enc);\n        if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n        return nenc || enc;\n      }\n\n      // StringDecoder provides an interface for efficiently splitting a series of\n      // buffers into a series of JS strings without breaking apart multi-byte\n      // characters.\n      exports.StringDecoder = StringDecoder;\n      function StringDecoder(encoding) {\n        this.encoding = normalizeEncoding(encoding);\n        var nb;\n        switch (this.encoding) {\n          case 'utf16le':\n            this.text = utf16Text;\n            this.end = utf16End;\n            nb = 4;\n            break;\n          case 'utf8':\n            this.fillLast = utf8FillLast;\n            nb = 4;\n            break;\n          case 'base64':\n            this.text = base64Text;\n            this.end = base64End;\n            nb = 3;\n            break;\n          default:\n            this.write = simpleWrite;\n            this.end = simpleEnd;\n            return;}\n\n        this.lastNeed = 0;\n        this.lastTotal = 0;\n        this.lastChar = Buffer.allocUnsafe(nb);\n      }\n\n      StringDecoder.prototype.write = function (buf) {\n        if (buf.length === 0) return '';\n        var r;\n        var i;\n        if (this.lastNeed) {\n          r = this.fillLast(buf);\n          if (r === undefined) return '';\n          i = this.lastNeed;\n          this.lastNeed = 0;\n        } else {\n          i = 0;\n        }\n        if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n        return r || '';\n      };\n\n      StringDecoder.prototype.end = utf8End;\n\n      // Returns only complete characters in a Buffer\n      StringDecoder.prototype.text = utf8Text;\n\n      // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\n      StringDecoder.prototype.fillLast = function (buf) {\n        if (this.lastNeed <= buf.length) {\n          buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n          return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n        }\n        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n        this.lastNeed -= buf.length;\n      };\n\n      // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n      // continuation byte. If an invalid byte is detected, -2 is returned.\n      function utf8CheckByte(_byte) {\n        if (_byte <= 0x7F) return 0;else if (_byte >> 5 === 0x06) return 2;else if (_byte >> 4 === 0x0E) return 3;else if (_byte >> 3 === 0x1E) return 4;\n        return _byte >> 6 === 0x02 ? -1 : -2;\n      }\n\n      // Checks at most 3 bytes at the end of a Buffer in order to detect an\n      // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n      // needed to complete the UTF-8 character (if applicable) are returned.\n      function utf8CheckIncomplete(self, buf, i) {\n        var j = buf.length - 1;\n        if (j < i) return 0;\n        var nb = utf8CheckByte(buf[j]);\n        if (nb >= 0) {\n          if (nb > 0) self.lastNeed = nb - 1;\n          return nb;\n        }\n        if (--j < i || nb === -2) return 0;\n        nb = utf8CheckByte(buf[j]);\n        if (nb >= 0) {\n          if (nb > 0) self.lastNeed = nb - 2;\n          return nb;\n        }\n        if (--j < i || nb === -2) return 0;\n        nb = utf8CheckByte(buf[j]);\n        if (nb >= 0) {\n          if (nb > 0) {\n            if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n          }\n          return nb;\n        }\n        return 0;\n      }\n\n      // Validates as many continuation bytes for a multi-byte UTF-8 character as\n      // needed or are available. If we see a non-continuation byte where we expect\n      // one, we \"replace\" the validated continuation bytes we've seen so far with\n      // a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n      // behavior. The continuation byte check is included three times in the case\n      // where all of the continuation bytes for a character exist in the same buffer.\n      // It is also done this way as a slight performance increase instead of using a\n      // loop.\n      function utf8CheckExtraBytes(self, buf, p) {\n        if ((buf[0] & 0xC0) !== 0x80) {\n          self.lastNeed = 0;\n          return \"\\uFFFD\";\n        }\n        if (self.lastNeed > 1 && buf.length > 1) {\n          if ((buf[1] & 0xC0) !== 0x80) {\n            self.lastNeed = 1;\n            return \"\\uFFFD\";\n          }\n          if (self.lastNeed > 2 && buf.length > 2) {\n            if ((buf[2] & 0xC0) !== 0x80) {\n              self.lastNeed = 2;\n              return \"\\uFFFD\";\n            }\n          }\n        }\n      }\n\n      // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\n      function utf8FillLast(buf) {\n        var p = this.lastTotal - this.lastNeed;\n        var r = utf8CheckExtraBytes(this, buf, p);\n        if (r !== undefined) return r;\n        if (this.lastNeed <= buf.length) {\n          buf.copy(this.lastChar, p, 0, this.lastNeed);\n          return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n        }\n        buf.copy(this.lastChar, p, 0, buf.length);\n        this.lastNeed -= buf.length;\n      }\n\n      // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n      // partial character, the character's bytes are buffered until the required\n      // number of bytes are available.\n      function utf8Text(buf, i) {\n        var total = utf8CheckIncomplete(this, buf, i);\n        if (!this.lastNeed) return buf.toString('utf8', i);\n        this.lastTotal = total;\n        var end = buf.length - (total - this.lastNeed);\n        buf.copy(this.lastChar, 0, end);\n        return buf.toString('utf8', i, end);\n      }\n\n      // For UTF-8, a replacement character is added when ending on a partial\n      // character.\n      function utf8End(buf) {\n        var r = buf && buf.length ? this.write(buf) : '';\n        if (this.lastNeed) return r + \"\\uFFFD\";\n        return r;\n      }\n\n      // UTF-16LE typically needs two bytes per character, but even if we have an even\n      // number of bytes available, we need to check if we end on a leading/high\n      // surrogate. In that case, we need to wait for the next two bytes in order to\n      // decode the last character properly.\n      function utf16Text(buf, i) {\n        if ((buf.length - i) % 2 === 0) {\n          var r = buf.toString('utf16le', i);\n          if (r) {\n            var c = r.charCodeAt(r.length - 1);\n            if (c >= 0xD800 && c <= 0xDBFF) {\n              this.lastNeed = 2;\n              this.lastTotal = 4;\n              this.lastChar[0] = buf[buf.length - 2];\n              this.lastChar[1] = buf[buf.length - 1];\n              return r.slice(0, -1);\n            }\n          }\n          return r;\n        }\n        this.lastNeed = 1;\n        this.lastTotal = 2;\n        this.lastChar[0] = buf[buf.length - 1];\n        return buf.toString('utf16le', i, buf.length - 1);\n      }\n\n      // For UTF-16LE we do not explicitly append special replacement characters if we\n      // end on a partial character, we simply let v8 handle that.\n      function utf16End(buf) {\n        var r = buf && buf.length ? this.write(buf) : '';\n        if (this.lastNeed) {\n          var end = this.lastTotal - this.lastNeed;\n          return r + this.lastChar.toString('utf16le', 0, end);\n        }\n        return r;\n      }\n\n      function base64Text(buf, i) {\n        var n = (buf.length - i) % 3;\n        if (n === 0) return buf.toString('base64', i);\n        this.lastNeed = 3 - n;\n        this.lastTotal = 3;\n        if (n === 1) {\n          this.lastChar[0] = buf[buf.length - 1];\n        } else {\n          this.lastChar[0] = buf[buf.length - 2];\n          this.lastChar[1] = buf[buf.length - 1];\n        }\n        return buf.toString('base64', i, buf.length - n);\n      }\n\n      function base64End(buf) {\n        var r = buf && buf.length ? this.write(buf) : '';\n        if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n        return r;\n      }\n\n      // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\n      function simpleWrite(buf) {\n        return buf.toString(this.encoding);\n      }\n\n      function simpleEnd(buf) {\n        return buf && buf.length ? this.write(buf) : '';\n      }\n    }, { \"safe-buffer\": 110 }], 108: [function (require, module, exports) {\n      exports = module.exports = require('./lib/_stream_readable.js');\n      exports.Stream = exports;\n      exports.Readable = exports;\n      exports.Writable = require('./lib/_stream_writable.js');\n      exports.Duplex = require('./lib/_stream_duplex.js');\n      exports.Transform = require('./lib/_stream_transform.js');\n      exports.PassThrough = require('./lib/_stream_passthrough.js');\n\n    }, { \"./lib/_stream_duplex.js\": 98, \"./lib/_stream_passthrough.js\": 99, \"./lib/_stream_readable.js\": 100, \"./lib/_stream_transform.js\": 101, \"./lib/_stream_writable.js\": 102 }], 109: [function (require, module, exports) {\n      'use strict';\n\n      function ReInterval(callback, interval, args) {\n        var self = this;\n\n        this._callback = callback;\n        this._args = args;\n\n        this._interval = setInterval(callback, interval, this._args);\n\n        this.reschedule = function (interval) {\n          // if no interval entered, use the interval passed in on creation\n          if (!interval)\n          interval = self._interval;\n\n          if (self._interval)\n          clearInterval(self._interval);\n          self._interval = setInterval(self._callback, interval, self._args);\n        };\n\n        this.clear = function () {\n          if (self._interval) {\n            clearInterval(self._interval);\n            self._interval = undefined;\n          }\n        };\n\n        this.destroy = function () {\n          if (self._interval) {\n            clearInterval(self._interval);\n          }\n          self._callback = undefined;\n          self._interval = undefined;\n          self._args = undefined;\n        };\n      }\n\n      function reInterval() {\n        if (typeof arguments[0] !== 'function')\n        throw new Error('callback needed');\n        if (typeof arguments[1] !== 'number')\n        throw new Error('interval needed');\n\n        var args;\n\n        if (arguments.length > 0) {\n          args = new Array(arguments.length - 2);\n\n          for (var i = 0; i < args.length; i++) {\n            args[i] = arguments[i + 2];\n          }\n        }\n\n        return new ReInterval(arguments[0], arguments[1], args);\n      }\n\n      module.exports = reInterval;\n\n    }, {}], 110: [function (require, module, exports) {\n      /* eslint-disable node/no-deprecated-api */\n      var buffer = require('buffer');\n      var Buffer = buffer.Buffer;\n\n      // alternative to using Object.keys for old browsers\n      function copyProps(src, dst) {\n        for (var key in src) {\n          dst[key] = src[key];\n        }\n      }\n      if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n        module.exports = buffer;\n      } else {\n        // Copy properties from require('buffer')\n        copyProps(buffer, exports);\n        exports.Buffer = SafeBuffer;\n      }\n\n      function SafeBuffer(arg, encodingOrOffset, length) {\n        return Buffer(arg, encodingOrOffset, length);\n      }\n\n      // Copy static methods from Buffer\n      copyProps(Buffer, SafeBuffer);\n\n      SafeBuffer.from = function (arg, encodingOrOffset, length) {\n        if (typeof arg === 'number') {\n          throw new TypeError('Argument must not be a number');\n        }\n        return Buffer(arg, encodingOrOffset, length);\n      };\n\n      SafeBuffer.alloc = function (size, fill, encoding) {\n        if (typeof size !== 'number') {\n          throw new TypeError('Argument must be a number');\n        }\n        var buf = Buffer(size);\n        if (fill !== undefined) {\n          if (typeof encoding === 'string') {\n            buf.fill(fill, encoding);\n          } else {\n            buf.fill(fill);\n          }\n        } else {\n          buf.fill(0);\n        }\n        return buf;\n      };\n\n      SafeBuffer.allocUnsafe = function (size) {\n        if (typeof size !== 'number') {\n          throw new TypeError('Argument must be a number');\n        }\n        return Buffer(size);\n      };\n\n      SafeBuffer.allocUnsafeSlow = function (size) {\n        if (typeof size !== 'number') {\n          throw new TypeError('Argument must be a number');\n        }\n        return buffer.SlowBuffer(size);\n      };\n\n    }, { \"buffer\": 12 }], 111: [function (require, module, exports) {\n      module.exports = shift;\n\n      function shift(stream) {\n        var rs = stream._readableState;\n        if (!rs) return null;\n        return rs.objectMode ? stream.read() : stream.read(getStateLength(rs));\n      }\n\n      function getStateLength(state) {\n        if (state.buffer.length) {\n          // Since node 6.3.0 state.buffer is a BufferList not an array\n          if (state.buffer.head) {\n            return state.buffer.head.data.length;\n          }\n\n          return state.buffer[0].length;\n        }\n\n        return state.length;\n      }\n\n    }, {}], 112: [function (require, module, exports) {\n      (function (setImmediate, clearImmediate) {\n        var nextTick = require('process/browser.js').nextTick;\n        var apply = Function.prototype.apply;\n        var slice = Array.prototype.slice;\n        var immediateIds = {};\n        var nextImmediateId = 0;\n\n        // DOM APIs, for completeness\n\n        exports.setTimeout = function () {\n          return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n        };\n        exports.setInterval = function () {\n          return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n        };\n        exports.clearTimeout =\n        exports.clearInterval = function (timeout) {timeout.close();};\n\n        function Timeout(id, clearFn) {\n          this._id = id;\n          this._clearFn = clearFn;\n        }\n        Timeout.prototype.unref = Timeout.prototype.ref = function () {};\n        Timeout.prototype.close = function () {\n          this._clearFn.call(window, this._id);\n        };\n\n        // Does not start the time, just sets up the members needed.\n        exports.enroll = function (item, msecs) {\n          clearTimeout(item._idleTimeoutId);\n          item._idleTimeout = msecs;\n        };\n\n        exports.unenroll = function (item) {\n          clearTimeout(item._idleTimeoutId);\n          item._idleTimeout = -1;\n        };\n\n        exports._unrefActive = exports.active = function (item) {\n          clearTimeout(item._idleTimeoutId);\n\n          var msecs = item._idleTimeout;\n          if (msecs >= 0) {\n            item._idleTimeoutId = setTimeout(function onTimeout() {\n              if (item._onTimeout)\n              item._onTimeout();\n            }, msecs);\n          }\n        };\n\n        // That's not how node.js implements it but the exposed api is the same.\n        exports.setImmediate = typeof setImmediate === \"function\" ? setImmediate : function (fn) {\n          var id = nextImmediateId++;\n          var args = arguments.length < 2 ? false : slice.call(arguments, 1);\n\n          immediateIds[id] = true;\n\n          nextTick(function onNextTick() {\n            if (immediateIds[id]) {\n              // fn.call() is faster so we optimize for the common use-case\n              // @see http://jsperf.com/call-apply-segu\n              if (args) {\n                fn.apply(null, args);\n              } else {\n                fn.call(null);\n              }\n              // Prevent ids from leaking\n              exports.clearImmediate(id);\n            }\n          });\n\n          return id;\n        };\n\n        exports.clearImmediate = typeof clearImmediate === \"function\" ? clearImmediate : function (id) {\n          delete immediateIds[id];\n        };\n      }).call(this, require(\"timers\").setImmediate, require(\"timers\").clearImmediate);\n    }, { \"process/browser.js\": 92, \"timers\": 112 }], 113: [function (require, module, exports) {\n      // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      'use strict';\n\n      var punycode = require('punycode');\n      var util = require('./util');\n\n      exports.parse = urlParse;\n      exports.resolve = urlResolve;\n      exports.resolveObject = urlResolveObject;\n      exports.format = urlFormat;\n\n      exports.Url = Url;\n\n      function Url() {\n        this.protocol = null;\n        this.slashes = null;\n        this.auth = null;\n        this.host = null;\n        this.port = null;\n        this.hostname = null;\n        this.hash = null;\n        this.search = null;\n        this.query = null;\n        this.pathname = null;\n        this.path = null;\n        this.href = null;\n      }\n\n      // Reference: RFC 3986, RFC 1808, RFC 2396\n\n      // define these here so at least they only have to be\n      // compiled once on the first module load.\n      var protocolPattern = /^([a-z0-9.+-]+:)/i,\n      portPattern = /:[0-9]*$/,\n\n      // Special case for a simple path URL\n      simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n      // RFC 2396: characters reserved for delimiting URLs.\n      // We actually just auto-escape these.\n      delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n      // RFC 2396: characters not allowed for various reasons.\n      unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n      // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n      autoEscape = ['\\''].concat(unwise),\n      // Characters that are never ever allowed in a hostname.\n      // Note that any invalid chars are also handled, but these\n      // are the ones that are *expected* to be seen, so we fast-path\n      // them.\n      nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n      hostEndingChars = ['/', '?', '#'],\n      hostnameMaxLen = 255,\n      hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n      hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n      // protocols that can allow \"unsafe\" and \"unwise\" chars.\n      unsafeProtocol = {\n        'javascript': true,\n        'javascript:': true },\n\n      // protocols that never have a hostname.\n      hostlessProtocol = {\n        'javascript': true,\n        'javascript:': true },\n\n      // protocols that always contain a // bit.\n      slashedProtocol = {\n        'http': true,\n        'https': true,\n        'ftp': true,\n        'gopher': true,\n        'file': true,\n        'http:': true,\n        'https:': true,\n        'ftp:': true,\n        'gopher:': true,\n        'file:': true },\n\n      querystring = require('querystring');\n\n      function urlParse(url, parseQueryString, slashesDenoteHost) {\n        if (url && util.isObject(url) && url instanceof Url) return url;\n\n        var u = new Url();\n        u.parse(url, parseQueryString, slashesDenoteHost);\n        return u;\n      }\n\n      Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n        if (!util.isString(url)) {\n          throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n        }\n\n        // Copy chrome, IE, opera backslash-handling behavior.\n        // Back slashes before the query string get converted to forward slashes\n        // See: https://code.google.com/p/chromium/issues/detail?id=25916\n        var queryIndex = url.indexOf('?'),\n        splitter =\n        queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n        uSplit = url.split(splitter),\n        slashRegex = /\\\\/g;\n        uSplit[0] = uSplit[0].replace(slashRegex, '/');\n        url = uSplit.join(splitter);\n\n        var rest = url;\n\n        // trim before proceeding.\n        // This is to support parse stuff like \"  http://foo.com  \\n\"\n        rest = rest.trim();\n\n        if (!slashesDenoteHost && url.split('#').length === 1) {\n          // Try fast path regexp\n          var simplePath = simplePathPattern.exec(rest);\n          if (simplePath) {\n            this.path = rest;\n            this.href = rest;\n            this.pathname = simplePath[1];\n            if (simplePath[2]) {\n              this.search = simplePath[2];\n              if (parseQueryString) {\n                this.query = querystring.parse(this.search.substr(1));\n              } else {\n                this.query = this.search.substr(1);\n              }\n            } else if (parseQueryString) {\n              this.search = '';\n              this.query = {};\n            }\n            return this;\n          }\n        }\n\n        var proto = protocolPattern.exec(rest);\n        if (proto) {\n          proto = proto[0];\n          var lowerProto = proto.toLowerCase();\n          this.protocol = lowerProto;\n          rest = rest.substr(proto.length);\n        }\n\n        // figure out if it's got a host\n        // user@server is *always* interpreted as a hostname, and url\n        // resolution will treat //foo/bar as host=foo,path=bar because that's\n        // how the browser resolves relative URLs.\n        if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n          var slashes = rest.substr(0, 2) === '//';\n          if (slashes && !(proto && hostlessProtocol[proto])) {\n            rest = rest.substr(2);\n            this.slashes = true;\n          }\n        }\n\n        if (!hostlessProtocol[proto] && (\n        slashes || proto && !slashedProtocol[proto])) {\n\n          // there's a hostname.\n          // the first instance of /, ?, ;, or # ends the host.\n          //\n          // If there is an @ in the hostname, then non-host chars *are* allowed\n          // to the left of the last @ sign, unless some host-ending character\n          // comes *before* the @-sign.\n          // URLs are obnoxious.\n          //\n          // ex:\n          // http://a@b@c/ => user:a@b host:c\n          // http://a@b?@c => user:a host:c path:/?@c\n\n          // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n          // Review our test case against browsers more comprehensively.\n\n          // find the first instance of any hostEndingChars\n          var hostEnd = -1;\n          for (var i = 0; i < hostEndingChars.length; i++) {\n            var hec = rest.indexOf(hostEndingChars[i]);\n            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n            hostEnd = hec;\n          }\n\n          // at this point, either we have an explicit point where the\n          // auth portion cannot go past, or the last @ char is the decider.\n          var auth, atSign;\n          if (hostEnd === -1) {\n            // atSign can be anywhere.\n            atSign = rest.lastIndexOf('@');\n          } else {\n            // atSign must be in auth portion.\n            // http://a@b/c@d => host:b auth:a path:/c@d\n            atSign = rest.lastIndexOf('@', hostEnd);\n          }\n\n          // Now we have a portion which is definitely the auth.\n          // Pull that off.\n          if (atSign !== -1) {\n            auth = rest.slice(0, atSign);\n            rest = rest.slice(atSign + 1);\n            this.auth = decodeURIComponent(auth);\n          }\n\n          // the host is the remaining to the left of the first non-host char\n          hostEnd = -1;\n          for (var i = 0; i < nonHostChars.length; i++) {\n            var hec = rest.indexOf(nonHostChars[i]);\n            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n            hostEnd = hec;\n          }\n          // if we still have not hit it, then the entire thing is a host.\n          if (hostEnd === -1)\n          hostEnd = rest.length;\n\n          this.host = rest.slice(0, hostEnd);\n          rest = rest.slice(hostEnd);\n\n          // pull out port.\n          this.parseHost();\n\n          // we've indicated that there is a hostname,\n          // so even if it's empty, it has to be present.\n          this.hostname = this.hostname || '';\n\n          // if hostname begins with [ and ends with ]\n          // assume that it's an IPv6 address.\n          var ipv6Hostname = this.hostname[0] === '[' &&\n          this.hostname[this.hostname.length - 1] === ']';\n\n          // validate a little.\n          if (!ipv6Hostname) {\n            var hostparts = this.hostname.split(/\\./);\n            for (var i = 0, l = hostparts.length; i < l; i++) {\n              var part = hostparts[i];\n              if (!part) continue;\n              if (!part.match(hostnamePartPattern)) {\n                var newpart = '';\n                for (var j = 0, k = part.length; j < k; j++) {\n                  if (part.charCodeAt(j) > 127) {\n                    // we replace non-ASCII char with a temporary placeholder\n                    // we need this to make sure size of hostname is not\n                    // broken by replacing non-ASCII by nothing\n                    newpart += 'x';\n                  } else {\n                    newpart += part[j];\n                  }\n                }\n                // we test again with ASCII char only\n                if (!newpart.match(hostnamePartPattern)) {\n                  var validParts = hostparts.slice(0, i);\n                  var notHost = hostparts.slice(i + 1);\n                  var bit = part.match(hostnamePartStart);\n                  if (bit) {\n                    validParts.push(bit[1]);\n                    notHost.unshift(bit[2]);\n                  }\n                  if (notHost.length) {\n                    rest = '/' + notHost.join('.') + rest;\n                  }\n                  this.hostname = validParts.join('.');\n                  break;\n                }\n              }\n            }\n          }\n\n          if (this.hostname.length > hostnameMaxLen) {\n            this.hostname = '';\n          } else {\n            // hostnames are always lower case.\n            this.hostname = this.hostname.toLowerCase();\n          }\n\n          if (!ipv6Hostname) {\n            // IDNA Support: Returns a punycoded representation of \"domain\".\n            // It only converts parts of the domain name that\n            // have non-ASCII characters, i.e. it doesn't matter if\n            // you call it with a domain that already is ASCII-only.\n            this.hostname = punycode.toASCII(this.hostname);\n          }\n\n          var p = this.port ? ':' + this.port : '';\n          var h = this.hostname || '';\n          this.host = h + p;\n          this.href += this.host;\n\n          // strip [ and ] from the hostname\n          // the host field still retains them, though\n          if (ipv6Hostname) {\n            this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n            if (rest[0] !== '/') {\n              rest = '/' + rest;\n            }\n          }\n        }\n\n        // now rest is set to the post-host stuff.\n        // chop off any delim chars.\n        if (!unsafeProtocol[lowerProto]) {\n\n          // First, make 100% sure that any \"autoEscape\" chars get\n          // escaped, even if encodeURIComponent doesn't think they\n          // need to be.\n          for (var i = 0, l = autoEscape.length; i < l; i++) {\n            var ae = autoEscape[i];\n            if (rest.indexOf(ae) === -1)\n            continue;\n            var esc = encodeURIComponent(ae);\n            if (esc === ae) {\n              esc = escape(ae);\n            }\n            rest = rest.split(ae).join(esc);\n          }\n        }\n\n\n        // chop off from the tail first.\n        var hash = rest.indexOf('#');\n        if (hash !== -1) {\n          // got a fragment string.\n          this.hash = rest.substr(hash);\n          rest = rest.slice(0, hash);\n        }\n        var qm = rest.indexOf('?');\n        if (qm !== -1) {\n          this.search = rest.substr(qm);\n          this.query = rest.substr(qm + 1);\n          if (parseQueryString) {\n            this.query = querystring.parse(this.query);\n          }\n          rest = rest.slice(0, qm);\n        } else if (parseQueryString) {\n          // no query string, but parseQueryString still requested\n          this.search = '';\n          this.query = {};\n        }\n        if (rest) this.pathname = rest;\n        if (slashedProtocol[lowerProto] &&\n        this.hostname && !this.pathname) {\n          this.pathname = '/';\n        }\n\n        //to support http.request\n        if (this.pathname || this.search) {\n          var p = this.pathname || '';\n          var s = this.search || '';\n          this.path = p + s;\n        }\n\n        // finally, reconstruct the href based on what has been validated.\n        this.href = this.format();\n        return this;\n      };\n\n      // format a parsed object into a url string\n      function urlFormat(obj) {\n        // ensure it's an object, and not a string url.\n        // If it's an obj, this is a no-op.\n        // this way, you can call url_format() on strings\n        // to clean up potentially wonky urls.\n        if (util.isString(obj)) obj = urlParse(obj);\n        if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n        return obj.format();\n      }\n\n      Url.prototype.format = function () {\n        var auth = this.auth || '';\n        if (auth) {\n          auth = encodeURIComponent(auth);\n          auth = auth.replace(/%3A/i, ':');\n          auth += '@';\n        }\n\n        var protocol = this.protocol || '',\n        pathname = this.pathname || '',\n        hash = this.hash || '',\n        host = false,\n        query = '';\n\n        if (this.host) {\n          host = auth + this.host;\n        } else if (this.hostname) {\n          host = auth + (this.hostname.indexOf(':') === -1 ?\n          this.hostname :\n          '[' + this.hostname + ']');\n          if (this.port) {\n            host += ':' + this.port;\n          }\n        }\n\n        if (this.query &&\n        util.isObject(this.query) &&\n        Object.keys(this.query).length) {\n          query = querystring.stringify(this.query);\n        }\n\n        var search = this.search || query && '?' + query || '';\n\n        if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n        // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n        // unless they had them to begin with.\n        if (this.slashes ||\n        (!protocol || slashedProtocol[protocol]) && host !== false) {\n          host = '//' + (host || '');\n          if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n        } else if (!host) {\n          host = '';\n        }\n\n        if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n        if (search && search.charAt(0) !== '?') search = '?' + search;\n\n        pathname = pathname.replace(/[?#]/g, function (match) {\n          return encodeURIComponent(match);\n        });\n        search = search.replace('#', '%23');\n\n        return protocol + host + pathname + search + hash;\n      };\n\n      function urlResolve(source, relative) {\n        return urlParse(source, false, true).resolve(relative);\n      }\n\n      Url.prototype.resolve = function (relative) {\n        return this.resolveObject(urlParse(relative, false, true)).format();\n      };\n\n      function urlResolveObject(source, relative) {\n        if (!source) return relative;\n        return urlParse(source, false, true).resolveObject(relative);\n      }\n\n      Url.prototype.resolveObject = function (relative) {\n        if (util.isString(relative)) {\n          var rel = new Url();\n          rel.parse(relative, false, true);\n          relative = rel;\n        }\n\n        var result = new Url();\n        var tkeys = Object.keys(this);\n        for (var tk = 0; tk < tkeys.length; tk++) {\n          var tkey = tkeys[tk];\n          result[tkey] = this[tkey];\n        }\n\n        // hash is always overridden, no matter what.\n        // even href=\"\" will remove it.\n        result.hash = relative.hash;\n\n        // if the relative url is empty, then there's nothing left to do here.\n        if (relative.href === '') {\n          result.href = result.format();\n          return result;\n        }\n\n        // hrefs like //foo/bar always cut to the protocol.\n        if (relative.slashes && !relative.protocol) {\n          // take everything except the protocol from relative\n          var rkeys = Object.keys(relative);\n          for (var rk = 0; rk < rkeys.length; rk++) {\n            var rkey = rkeys[rk];\n            if (rkey !== 'protocol')\n            result[rkey] = relative[rkey];\n          }\n\n          //urlParse appends trailing / to urls like http://www.example.com\n          if (slashedProtocol[result.protocol] &&\n          result.hostname && !result.pathname) {\n            result.path = result.pathname = '/';\n          }\n\n          result.href = result.format();\n          return result;\n        }\n\n        if (relative.protocol && relative.protocol !== result.protocol) {\n          // if it's a known url protocol, then changing\n          // the protocol does weird things\n          // first, if it's not file:, then we MUST have a host,\n          // and if there was a path\n          // to begin with, then we MUST have a path.\n          // if it is file:, then the host is dropped,\n          // because that's known to be hostless.\n          // anything else is assumed to be absolute.\n          if (!slashedProtocol[relative.protocol]) {\n            var keys = Object.keys(relative);\n            for (var v = 0; v < keys.length; v++) {\n              var k = keys[v];\n              result[k] = relative[k];\n            }\n            result.href = result.format();\n            return result;\n          }\n\n          result.protocol = relative.protocol;\n          if (!relative.host && !hostlessProtocol[relative.protocol]) {\n            var relPath = (relative.pathname || '').split('/');\n            while (relPath.length && !(relative.host = relPath.shift())) {;}\n            if (!relative.host) relative.host = '';\n            if (!relative.hostname) relative.hostname = '';\n            if (relPath[0] !== '') relPath.unshift('');\n            if (relPath.length < 2) relPath.unshift('');\n            result.pathname = relPath.join('/');\n          } else {\n            result.pathname = relative.pathname;\n          }\n          result.search = relative.search;\n          result.query = relative.query;\n          result.host = relative.host || '';\n          result.auth = relative.auth;\n          result.hostname = relative.hostname || relative.host;\n          result.port = relative.port;\n          // to support http.request\n          if (result.pathname || result.search) {\n            var p = result.pathname || '';\n            var s = result.search || '';\n            result.path = p + s;\n          }\n          result.slashes = result.slashes || relative.slashes;\n          result.href = result.format();\n          return result;\n        }\n\n        var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n        isRelAbs =\n        relative.host ||\n        relative.pathname && relative.pathname.charAt(0) === '/',\n\n        mustEndAbs = isRelAbs || isSourceAbs ||\n        result.host && relative.pathname,\n        removeAllDots = mustEndAbs,\n        srcPath = result.pathname && result.pathname.split('/') || [],\n        relPath = relative.pathname && relative.pathname.split('/') || [],\n        psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n        // if the url is a non-slashed url, then relative\n        // links like ../.. should be able\n        // to crawl up to the hostname, as well.  This is strange.\n        // result.protocol has already been set by now.\n        // Later on, put the first path part into the host field.\n        if (psychotic) {\n          result.hostname = '';\n          result.port = null;\n          if (result.host) {\n            if (srcPath[0] === '') srcPath[0] = result.host;else\n            srcPath.unshift(result.host);\n          }\n          result.host = '';\n          if (relative.protocol) {\n            relative.hostname = null;\n            relative.port = null;\n            if (relative.host) {\n              if (relPath[0] === '') relPath[0] = relative.host;else\n              relPath.unshift(relative.host);\n            }\n            relative.host = null;\n          }\n          mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n        }\n\n        if (isRelAbs) {\n          // it's absolute.\n          result.host = relative.host || relative.host === '' ?\n          relative.host : result.host;\n          result.hostname = relative.hostname || relative.hostname === '' ?\n          relative.hostname : result.hostname;\n          result.search = relative.search;\n          result.query = relative.query;\n          srcPath = relPath;\n          // fall through to the dot-handling below.\n        } else if (relPath.length) {\n          // it's relative\n          // throw away the existing file, and take the new path instead.\n          if (!srcPath) srcPath = [];\n          srcPath.pop();\n          srcPath = srcPath.concat(relPath);\n          result.search = relative.search;\n          result.query = relative.query;\n        } else if (!util.isNullOrUndefined(relative.search)) {\n          // just pull out the search.\n          // like href='?foo'.\n          // Put this after the other two cases because it simplifies the booleans\n          if (psychotic) {\n            result.hostname = result.host = srcPath.shift();\n            //occationaly the auth can get stuck only in host\n            //this especially happens in cases like\n            //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n            var authInHost = result.host && result.host.indexOf('@') > 0 ?\n            result.host.split('@') : false;\n            if (authInHost) {\n              result.auth = authInHost.shift();\n              result.host = result.hostname = authInHost.shift();\n            }\n          }\n          result.search = relative.search;\n          result.query = relative.query;\n          //to support http.request\n          if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n            result.path = (result.pathname ? result.pathname : '') + (\n            result.search ? result.search : '');\n          }\n          result.href = result.format();\n          return result;\n        }\n\n        if (!srcPath.length) {\n          // no path at all.  easy.\n          // we've already handled the other stuff above.\n          result.pathname = null;\n          //to support http.request\n          if (result.search) {\n            result.path = '/' + result.search;\n          } else {\n            result.path = null;\n          }\n          result.href = result.format();\n          return result;\n        }\n\n        // if a url ENDs in . or .., then it must get a trailing slash.\n        // however, if it ends in anything else non-slashy,\n        // then it must NOT get a trailing slash.\n        var last = srcPath.slice(-1)[0];\n        var hasTrailingSlash =\n        (result.host || relative.host || srcPath.length > 1) && (\n        last === '.' || last === '..') || last === '';\n\n        // strip single dots, resolve double dots to parent dir\n        // if the path tries to go above the root, `up` ends up > 0\n        var up = 0;\n        for (var i = srcPath.length; i >= 0; i--) {\n          last = srcPath[i];\n          if (last === '.') {\n            srcPath.splice(i, 1);\n          } else if (last === '..') {\n            srcPath.splice(i, 1);\n            up++;\n          } else if (up) {\n            srcPath.splice(i, 1);\n            up--;\n          }\n        }\n\n        // if the path is allowed to go above the root, restore leading ..s\n        if (!mustEndAbs && !removeAllDots) {\n          for (; up--; up) {\n            srcPath.unshift('..');\n          }\n        }\n\n        if (mustEndAbs && srcPath[0] !== '' && (\n        !srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n          srcPath.unshift('');\n        }\n\n        if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {\n          srcPath.push('');\n        }\n\n        var isAbsolute = srcPath[0] === '' ||\n        srcPath[0] && srcPath[0].charAt(0) === '/';\n\n        // put the host back\n        if (psychotic) {\n          result.hostname = result.host = isAbsolute ? '' :\n          srcPath.length ? srcPath.shift() : '';\n          //occationaly the auth can get stuck only in host\n          //this especially happens in cases like\n          //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n          var authInHost = result.host && result.host.indexOf('@') > 0 ?\n          result.host.split('@') : false;\n          if (authInHost) {\n            result.auth = authInHost.shift();\n            result.host = result.hostname = authInHost.shift();\n          }\n        }\n\n        mustEndAbs = mustEndAbs || result.host && srcPath.length;\n\n        if (mustEndAbs && !isAbsolute) {\n          srcPath.unshift('');\n        }\n\n        if (!srcPath.length) {\n          result.pathname = null;\n          result.path = null;\n        } else {\n          result.pathname = srcPath.join('/');\n        }\n\n        //to support request.http\n        if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n          result.path = (result.pathname ? result.pathname : '') + (\n          result.search ? result.search : '');\n        }\n        result.auth = relative.auth || result.auth;\n        result.slashes = result.slashes || relative.slashes;\n        result.href = result.format();\n        return result;\n      };\n\n      Url.prototype.parseHost = function () {\n        var host = this.host;\n        var port = portPattern.exec(host);\n        if (port) {\n          port = port[0];\n          if (port !== ':') {\n            this.port = port.substr(1);\n          }\n          host = host.substr(0, host.length - port.length);\n        }\n        if (host) this.hostname = host;\n      };\n\n    }, { \"./util\": 114, \"punycode\": 93, \"querystring\": 96 }], 114: [function (require, module, exports) {\n      'use strict';\n\n      module.exports = {\n        isString: function isString(arg) {\n          return typeof arg === 'string';\n        },\n        isObject: function isObject(arg) {\n          return typeof arg === 'object' && arg !== null;\n        },\n        isNull: function isNull(arg) {\n          return arg === null;\n        },\n        isNullOrUndefined: function isNullOrUndefined(arg) {\n          return arg == null;\n        } };\n\n\n    }, {}], 115: [function (require, module, exports) {\n      (function (global) {\n\n        /**\n                           * Module exports.\n                           */\n\n        module.exports = deprecate;\n\n        /**\n                                     * Mark that a method should not be used.\n                                     * Returns a modified function which warns once by default.\n                                     *\n                                     * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n                                     *\n                                     * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n                                     * will throw an Error when invoked.\n                                     *\n                                     * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n                                     * will invoke `console.trace()` instead of `console.error()`.\n                                     *\n                                     * @param {Function} fn - the function to deprecate\n                                     * @param {String} msg - the string to print to the console when `fn` is invoked\n                                     * @returns {Function} a new \"deprecated\" version of `fn`\n                                     * @api public\n                                     */\n\n        function deprecate(fn, msg) {\n          if (config('noDeprecation')) {\n            return fn;\n          }\n\n          var warned = false;\n          function deprecated() {\n            if (!warned) {\n              if (config('throwDeprecation')) {\n                throw new Error(msg);\n              } else if (config('traceDeprecation')) {\n                console.trace(msg);\n              } else {\n                __f__(\"warn\", msg, \" at utils/mqttjs3/mqtt.js:13761\");\n              }\n              warned = true;\n            }\n            return fn.apply(this, arguments);\n          }\n\n          return deprecated;\n        }\n\n        /**\n           * Checks `localStorage` for boolean values for the given `name`.\n           *\n           * @param {String} name\n           * @returns {Boolean}\n           * @api private\n           */\n\n        function config(name) {\n          // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n          try {\n            if (!global.localStorage) return false;\n          } catch (_) {\n            return false;\n          }\n          var val = global.localStorage[name];\n          if (null == val) return false;\n          return String(val).toLowerCase() === 'true';\n        }\n\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, {}], 116: [function (require, module, exports) {\n      module.exports = function isBuffer(arg) {\n        return arg && typeof arg === 'object' &&\n        typeof arg.copy === 'function' &&\n        typeof arg.fill === 'function' &&\n        typeof arg.readUInt8 === 'function';\n      };\n    }, {}], 117: [function (require, module, exports) {\n      (function (process, global) {\n        // Copyright Joyent, Inc. and other Node contributors.\n        //\n        // Permission is hereby granted, free of charge, to any person obtaining a\n        // copy of this software and associated documentation files (the\n        // \"Software\"), to deal in the Software without restriction, including\n        // without limitation the rights to use, copy, modify, merge, publish,\n        // distribute, sublicense, and/or sell copies of the Software, and to permit\n        // persons to whom the Software is furnished to do so, subject to the\n        // following conditions:\n        //\n        // The above copyright notice and this permission notice shall be included\n        // in all copies or substantial portions of the Software.\n        //\n        // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n        // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n        // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n        // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n        // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n        // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n        // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n        var formatRegExp = /%[sdj%]/g;\n        exports.format = function (f) {\n          if (!isString(f)) {\n            var objects = [];\n            for (var i = 0; i < arguments.length; i++) {\n              objects.push(inspect(arguments[i]));\n            }\n            return objects.join(' ');\n          }\n\n          var i = 1;\n          var args = arguments;\n          var len = args.length;\n          var str = String(f).replace(formatRegExp, function (x) {\n            if (x === '%%') return '%';\n            if (i >= len) return x;\n            switch (x) {\n              case '%s':return String(args[i++]);\n              case '%d':return Number(args[i++]);\n              case '%j':\n                try {\n                  return JSON.stringify(args[i++]);\n                } catch (_) {\n                  return '[Circular]';\n                }\n              default:\n                return x;}\n\n          });\n          for (var x = args[i]; i < len; x = args[++i]) {\n            if (isNull(x) || !isObject(x)) {\n              str += ' ' + x;\n            } else {\n              str += ' ' + inspect(x);\n            }\n          }\n          return str;\n        };\n\n\n        // Mark that a method should not be used.\n        // Returns a modified function which warns once by default.\n        // If --no-deprecation is set, then it is a no-op.\n        exports.deprecate = function (fn, msg) {\n          // Allow for deprecating things in the process of starting up.\n          if (isUndefined(global.process)) {\n            return function () {\n              return exports.deprecate(fn, msg).apply(this, arguments);\n            };\n          }\n\n          if (process.noDeprecation === true) {\n            return fn;\n          }\n\n          var warned = false;\n          function deprecated() {\n            if (!warned) {\n              if (process.throwDeprecation) {\n                throw new Error(msg);\n              } else if (process.traceDeprecation) {\n                console.trace(msg);\n              } else {\n                __f__(\"error\", msg, \" at utils/mqttjs3/mqtt.js:13885\");\n              }\n              warned = true;\n            }\n            return fn.apply(this, arguments);\n          }\n\n          return deprecated;\n        };\n\n\n        var debugs = {};\n        var debugEnviron;\n        exports.debuglog = function (set) {\n          if (isUndefined(debugEnviron))\n          debugEnviron = process.env.NODE_DEBUG || '';\n          set = set.toUpperCase();\n          if (!debugs[set]) {\n            if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n              var pid = process.pid;\n              debugs[set] = function () {\n                var msg = exports.format.apply(exports, arguments);\n                __f__(\"error\", '%s %d: %s', set, pid, msg, \" at utils/mqttjs3/mqtt.js:13907\");\n              };\n            } else {\n              debugs[set] = function () {};\n            }\n          }\n          return debugs[set];\n        };\n\n\n        /**\n            * Echos the value of a value. Trys to print the value out\n            * in the best way possible given the different types.\n            *\n            * @param {Object} obj The object to print out.\n            * @param {Object} opts Optional options object that alters the output.\n            */\n        /* legacy: obj, showHidden, depth, colors*/\n        function inspect(obj, opts) {\n          // default options\n          var ctx = {\n            seen: [],\n            stylize: stylizeNoColor };\n\n          // legacy...\n          if (arguments.length >= 3) ctx.depth = arguments[2];\n          if (arguments.length >= 4) ctx.colors = arguments[3];\n          if (isBoolean(opts)) {\n            // legacy...\n            ctx.showHidden = opts;\n          } else if (opts) {\n            // got an \"options\" object\n            exports._extend(ctx, opts);\n          }\n          // set default options\n          if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n          if (isUndefined(ctx.depth)) ctx.depth = 2;\n          if (isUndefined(ctx.colors)) ctx.colors = false;\n          if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n          if (ctx.colors) ctx.stylize = stylizeWithColor;\n          return formatValue(ctx, obj, ctx.depth);\n        }\n        exports.inspect = inspect;\n\n\n        // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n        inspect.colors = {\n          'bold': [1, 22],\n          'italic': [3, 23],\n          'underline': [4, 24],\n          'inverse': [7, 27],\n          'white': [37, 39],\n          'grey': [90, 39],\n          'black': [30, 39],\n          'blue': [34, 39],\n          'cyan': [36, 39],\n          'green': [32, 39],\n          'magenta': [35, 39],\n          'red': [31, 39],\n          'yellow': [33, 39] };\n\n\n        // Don't use 'blue' not visible on cmd.exe\n        inspect.styles = {\n          'special': 'cyan',\n          'number': 'yellow',\n          'boolean': 'yellow',\n          'undefined': 'grey',\n          'null': 'bold',\n          'string': 'green',\n          'date': 'magenta',\n          // \"name\": intentionally not styling\n          'regexp': 'red' };\n\n\n\n        function stylizeWithColor(str, styleType) {\n          var style = inspect.styles[styleType];\n\n          if (style) {\n            return \"\\x1B[\" + inspect.colors[style][0] + 'm' + str +\n            \"\\x1B[\" + inspect.colors[style][1] + 'm';\n          } else {\n            return str;\n          }\n        }\n\n\n        function stylizeNoColor(str, styleType) {\n          return str;\n        }\n\n\n        function arrayToHash(array) {\n          var hash = {};\n\n          array.forEach(function (val, idx) {\n            hash[val] = true;\n          });\n\n          return hash;\n        }\n\n\n        function formatValue(ctx, value, recurseTimes) {\n          // Provide a hook for user-specified inspect functions.\n          // Check that value is an object with an inspect function on it\n          if (ctx.customInspect &&\n          value &&\n          isFunction(value.inspect) &&\n          // Filter out the util module, it's inspect function is special\n          value.inspect !== exports.inspect &&\n          // Also filter out any prototype objects using the circular check.\n          !(value.constructor && value.constructor.prototype === value)) {\n            var ret = value.inspect(recurseTimes, ctx);\n            if (!isString(ret)) {\n              ret = formatValue(ctx, ret, recurseTimes);\n            }\n            return ret;\n          }\n\n          // Primitive types cannot have properties\n          var primitive = formatPrimitive(ctx, value);\n          if (primitive) {\n            return primitive;\n          }\n\n          // Look up the keys of the object.\n          var keys = Object.keys(value);\n          var visibleKeys = arrayToHash(keys);\n\n          if (ctx.showHidden) {\n            keys = Object.getOwnPropertyNames(value);\n          }\n\n          // IE doesn't make error fields non-enumerable\n          // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n          if (isError(value) && (\n          keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n            return formatError(value);\n          }\n\n          // Some type of object without properties can be shortcutted.\n          if (keys.length === 0) {\n            if (isFunction(value)) {\n              var name = value.name ? ': ' + value.name : '';\n              return ctx.stylize('[Function' + name + ']', 'special');\n            }\n            if (isRegExp(value)) {\n              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n            }\n            if (isDate(value)) {\n              return ctx.stylize(Date.prototype.toString.call(value), 'date');\n            }\n            if (isError(value)) {\n              return formatError(value);\n            }\n          }\n\n          var base = '',array = false,braces = ['{', '}'];\n\n          // Make Array say that they are Array\n          if (isArray(value)) {\n            array = true;\n            braces = ['[', ']'];\n          }\n\n          // Make functions say that they are functions\n          if (isFunction(value)) {\n            var n = value.name ? ': ' + value.name : '';\n            base = ' [Function' + n + ']';\n          }\n\n          // Make RegExps say that they are RegExps\n          if (isRegExp(value)) {\n            base = ' ' + RegExp.prototype.toString.call(value);\n          }\n\n          // Make dates with properties first say the date\n          if (isDate(value)) {\n            base = ' ' + Date.prototype.toUTCString.call(value);\n          }\n\n          // Make error with message first say the error\n          if (isError(value)) {\n            base = ' ' + formatError(value);\n          }\n\n          if (keys.length === 0 && (!array || value.length == 0)) {\n            return braces[0] + base + braces[1];\n          }\n\n          if (recurseTimes < 0) {\n            if (isRegExp(value)) {\n              return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n            } else {\n              return ctx.stylize('[Object]', 'special');\n            }\n          }\n\n          ctx.seen.push(value);\n\n          var output;\n          if (array) {\n            output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n          } else {\n            output = keys.map(function (key) {\n              return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n            });\n          }\n\n          ctx.seen.pop();\n\n          return reduceToSingleString(output, base, braces);\n        }\n\n\n        function formatPrimitive(ctx, value) {\n          if (isUndefined(value))\n          return ctx.stylize('undefined', 'undefined');\n          if (isString(value)) {\n            var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '').\n            replace(/'/g, \"\\\\'\").\n            replace(/\\\\\"/g, '\"') + '\\'';\n            return ctx.stylize(simple, 'string');\n          }\n          if (isNumber(value))\n          return ctx.stylize('' + value, 'number');\n          if (isBoolean(value))\n          return ctx.stylize('' + value, 'boolean');\n          // For some reason typeof null is \"object\", so special case here.\n          if (isNull(value))\n          return ctx.stylize('null', 'null');\n        }\n\n\n        function formatError(value) {\n          return '[' + Error.prototype.toString.call(value) + ']';\n        }\n\n\n        function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n          var output = [];\n          for (var i = 0, l = value.length; i < l; ++i) {\n            if (hasOwnProperty(value, String(i))) {\n              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n              String(i), true));\n            } else {\n              output.push('');\n            }\n          }\n          keys.forEach(function (key) {\n            if (!key.match(/^\\d+$/)) {\n              output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n              key, true));\n            }\n          });\n          return output;\n        }\n\n\n        function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n          var name, str, desc;\n          desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n          if (desc.get) {\n            if (desc.set) {\n              str = ctx.stylize('[Getter/Setter]', 'special');\n            } else {\n              str = ctx.stylize('[Getter]', 'special');\n            }\n          } else {\n            if (desc.set) {\n              str = ctx.stylize('[Setter]', 'special');\n            }\n          }\n          if (!hasOwnProperty(visibleKeys, key)) {\n            name = '[' + key + ']';\n          }\n          if (!str) {\n            if (ctx.seen.indexOf(desc.value) < 0) {\n              if (isNull(recurseTimes)) {\n                str = formatValue(ctx, desc.value, null);\n              } else {\n                str = formatValue(ctx, desc.value, recurseTimes - 1);\n              }\n              if (str.indexOf('\\n') > -1) {\n                if (array) {\n                  str = str.split('\\n').map(function (line) {\n                    return '  ' + line;\n                  }).join('\\n').substr(2);\n                } else {\n                  str = '\\n' + str.split('\\n').map(function (line) {\n                    return '   ' + line;\n                  }).join('\\n');\n                }\n              }\n            } else {\n              str = ctx.stylize('[Circular]', 'special');\n            }\n          }\n          if (isUndefined(name)) {\n            if (array && key.match(/^\\d+$/)) {\n              return str;\n            }\n            name = JSON.stringify('' + key);\n            if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n              name = name.substr(1, name.length - 2);\n              name = ctx.stylize(name, 'name');\n            } else {\n              name = name.replace(/'/g, \"\\\\'\").\n              replace(/\\\\\"/g, '\"').\n              replace(/(^\"|\"$)/g, \"'\");\n              name = ctx.stylize(name, 'string');\n            }\n          }\n\n          return name + ': ' + str;\n        }\n\n\n        function reduceToSingleString(output, base, braces) {\n          var numLinesEst = 0;\n          var length = output.reduce(function (prev, cur) {\n            numLinesEst++;\n            if (cur.indexOf('\\n') >= 0) numLinesEst++;\n            return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n          }, 0);\n\n          if (length > 60) {\n            return braces[0] + (\n            base === '' ? '' : base + '\\n ') +\n            ' ' +\n            output.join(',\\n  ') +\n            ' ' +\n            braces[1];\n          }\n\n          return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n        }\n\n\n        // NOTE: These type checking functions intentionally don't use `instanceof`\n        // because it is fragile and can be easily faked with `Object.create()`.\n        function isArray(ar) {\n          return Array.isArray(ar);\n        }\n        exports.isArray = isArray;\n\n        function isBoolean(arg) {\n          return typeof arg === 'boolean';\n        }\n        exports.isBoolean = isBoolean;\n\n        function isNull(arg) {\n          return arg === null;\n        }\n        exports.isNull = isNull;\n\n        function isNullOrUndefined(arg) {\n          return arg == null;\n        }\n        exports.isNullOrUndefined = isNullOrUndefined;\n\n        function isNumber(arg) {\n          return typeof arg === 'number';\n        }\n        exports.isNumber = isNumber;\n\n        function isString(arg) {\n          return typeof arg === 'string';\n        }\n        exports.isString = isString;\n\n        function isSymbol(arg) {\n          return typeof arg === 'symbol';\n        }\n        exports.isSymbol = isSymbol;\n\n        function isUndefined(arg) {\n          return arg === void 0;\n        }\n        exports.isUndefined = isUndefined;\n\n        function isRegExp(re) {\n          return isObject(re) && objectToString(re) === '[object RegExp]';\n        }\n        exports.isRegExp = isRegExp;\n\n        function isObject(arg) {\n          return typeof arg === 'object' && arg !== null;\n        }\n        exports.isObject = isObject;\n\n        function isDate(d) {\n          return isObject(d) && objectToString(d) === '[object Date]';\n        }\n        exports.isDate = isDate;\n\n        function isError(e) {\n          return isObject(e) && (\n          objectToString(e) === '[object Error]' || e instanceof Error);\n        }\n        exports.isError = isError;\n\n        function isFunction(arg) {\n          return typeof arg === 'function';\n        }\n        exports.isFunction = isFunction;\n\n        function isPrimitive(arg) {\n          return arg === null ||\n          typeof arg === 'boolean' ||\n          typeof arg === 'number' ||\n          typeof arg === 'string' ||\n          typeof arg === 'symbol' || // ES6 symbol\n          typeof arg === 'undefined';\n        }\n        exports.isPrimitive = isPrimitive;\n\n        exports.isBuffer = require('./support/isBuffer');\n\n        function objectToString(o) {\n          return Object.prototype.toString.call(o);\n        }\n\n\n        function pad(n) {\n          return n < 10 ? '0' + n.toString(10) : n.toString(10);\n        }\n\n\n        var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n        'Oct', 'Nov', 'Dec'];\n\n        // 26 Feb 16:19:34\n        function timestamp() {\n          var d = new Date();\n          var time = [pad(d.getHours()),\n          pad(d.getMinutes()),\n          pad(d.getSeconds())].join(':');\n          return [d.getDate(), months[d.getMonth()], time].join(' ');\n        }\n\n\n        // log is just a thin wrapper to console.log that prepends a timestamp\n        exports.log = function () {\n          __f__(\"log\", '%s - %s', timestamp(), exports.format.apply(exports, arguments), \" at utils/mqttjs3/mqtt.js:14353\");\n        };\n\n\n        /**\n            * Inherit the prototype methods from one constructor into another.\n            *\n            * The Function.prototype.inherits from lang.js rewritten as a standalone\n            * function (not on Function.prototype). NOTE: If this file is to be loaded\n            * during bootstrapping this function needs to be rewritten using some native\n            * functions as prototype setup using normal JavaScript does not work as\n            * expected during bootstrapping (see mirror.js in r114903).\n            *\n            * @param {function} ctor Constructor function which needs to inherit the\n            *     prototype.\n            * @param {function} superCtor Constructor function to inherit prototype from.\n            */\n        exports.inherits = require('inherits');\n\n        exports._extend = function (origin, add) {\n          // Don't do anything if add isn't an object\n          if (!add || !isObject(add)) return origin;\n\n          var keys = Object.keys(add);\n          var i = keys.length;\n          while (i--) {\n            origin[keys[i]] = add[keys[i]];\n          }\n          return origin;\n        };\n\n        function hasOwnProperty(obj, prop) {\n          return Object.prototype.hasOwnProperty.call(obj, prop);\n        }\n\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, { \"./support/isBuffer\": 116, \"_process\": 92, \"inherits\": 80 }], 118: [function (require, module, exports) {\n      (function (process, global) {\n        'use strict';\n\n        var Transform = require('readable-stream').Transform;\n        var duplexify = require('duplexify');\n        var WS = require('ws');\n        var Buffer = require('safe-buffer').Buffer;\n\n        module.exports = WebSocketStream;\n\n        function buildProxy(options, socketWrite, socketEnd) {\n          var proxy = new Transform({\n            objectMode: options.objectMode });\n\n\n          proxy._write = socketWrite;\n          proxy._flush = socketEnd;\n\n          return proxy;\n        }\n\n        function WebSocketStream(target, protocols, options) {\n          var stream, socket;\n\n          var isBrowser = process.title === 'browser';\n          var isNative = !!global.WebSocket;\n          var socketWrite = isBrowser ? socketWriteBrowser : socketWriteNode;\n\n          if (protocols && !Array.isArray(protocols) && 'object' === typeof protocols) {\n            // accept the \"options\" Object as the 2nd argument\n            options = protocols;\n            protocols = null;\n\n            if (typeof options.protocol === 'string' || Array.isArray(options.protocol)) {\n              protocols = options.protocol;\n            }\n          }\n\n          if (!options) options = {};\n\n          if (options.objectMode === undefined) {\n            options.objectMode = !(options.binary === true || options.binary === undefined);\n          }\n\n          var proxy = buildProxy(options, socketWrite, socketEnd);\n\n          if (!options.objectMode) {\n            proxy._writev = writev;\n          }\n\n          // browser only: sets the maximum socket buffer size before throttling\n          var bufferSize = options.browserBufferSize || 1024 * 512;\n\n          // browser only: how long to wait when throttling\n          var bufferTimeout = options.browserBufferTimeout || 1000;\n\n          // use existing WebSocket object that was passed in\n          if (typeof target === 'object') {\n            socket = target;\n            // otherwise make a new one\n          } else {\n            // special constructor treatment for native websockets in browsers, see\n            // https://github.com/maxogden/websocket-stream/issues/82\n            if (isNative && isBrowser) {\n              socket = new WS(target, protocols);\n            } else {\n              socket = new WS(target, protocols, options);\n            }\n\n            socket.binaryType = 'arraybuffer';\n          }\n\n          // was already open when passed in\n          if (socket.readyState === socket.OPEN) {\n            stream = proxy;\n          } else {\n            stream = duplexify.obj();\n            socket.onopen = onopen;\n          }\n\n          stream.socket = socket;\n\n          socket.onclose = onclose;\n          socket.onerror = onerror;\n          socket.onmessage = onmessage;\n\n          proxy.on('close', destroy);\n\n          var coerceToBuffer = !options.objectMode;\n\n          function socketWriteNode(chunk, enc, next) {\n            // avoid errors, this never happens unless\n            // destroy() is called\n            if (socket.readyState !== socket.OPEN) {\n              next();\n              return;\n            }\n\n            if (coerceToBuffer && typeof chunk === 'string') {\n              chunk = Buffer.from(chunk, 'utf8');\n            }\n            socket.send(chunk, next);\n          }\n\n          function socketWriteBrowser(chunk, enc, next) {\n            if (socket.bufferedAmount > bufferSize) {\n              setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);\n              return;\n            }\n\n            if (coerceToBuffer && typeof chunk === 'string') {\n              chunk = Buffer.from(chunk, 'utf8');\n            }\n\n            try {\n              socket.send(chunk);\n            } catch (err) {\n              return next(err);\n            }\n\n            next();\n          }\n\n          function socketEnd(done) {\n            socket.close();\n            done();\n          }\n\n          function onopen() {\n            stream.setReadable(proxy);\n            stream.setWritable(proxy);\n            stream.emit('connect');\n          }\n\n          function onclose() {\n            stream.end();\n            stream.destroy();\n          }\n\n          function onerror(err) {\n            stream.destroy(err);\n          }\n\n          function onmessage(event) {\n            var data = event.data;\n            if (data instanceof ArrayBuffer) data = Buffer.from(data);else\n            data = Buffer.from(data, 'utf8');\n            proxy.push(data);\n          }\n\n          function destroy() {\n            socket.close();\n          }\n\n          // this is to be enabled only if objectMode is false\n          function writev(chunks, cb) {\n            var buffers = new Array(chunks.length);\n            for (var i = 0; i < chunks.length; i++) {\n              if (typeof chunks[i].chunk === 'string') {\n                buffers[i] = Buffer.from(chunks[i], 'utf8');\n              } else {\n                buffers[i] = chunks[i].chunk;\n              }\n            }\n\n            this._write(Buffer.concat(buffers), 'binary', cb);\n          }\n\n          return stream;\n        }\n\n      }).call(this, require('_process'), typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, { \"_process\": 92, \"duplexify\": 17, \"readable-stream\": 108, \"safe-buffer\": 110, \"ws\": 119 }], 119: [function (require, module, exports) {\n\n      var ws = null;\n\n      if (typeof WebSocket !== 'undefined') {\n        ws = WebSocket;\n      } else if (typeof MozWebSocket !== 'undefined') {\n        ws = MozWebSocket;\n      } else if (typeof window !== 'undefined') {\n        ws = window.WebSocket || window.MozWebSocket;\n      }\n\n      module.exports = ws;\n\n    }, {}], 120: [function (require, module, exports) {\n      // Returns a wrapper function that returns a wrapped callback\n      // The wrapper function should do some stuff, and return a\n      // presumably different callback function.\n      // This makes sure that own properties are retained, so that\n      // decorations and such are not lost along the way.\n      module.exports = wrappy;\n      function wrappy(fn, cb) {\n        if (fn && cb) return wrappy(fn)(cb);\n\n        if (typeof fn !== 'function')\n        throw new TypeError('need wrapper function');\n\n        Object.keys(fn).forEach(function (k) {\n          wrapper[k] = fn[k];\n        });\n\n        return wrapper;\n\n        function wrapper() {\n          var args = new Array(arguments.length);\n          for (var i = 0; i < args.length; i++) {\n            args[i] = arguments[i];\n          }\n          var ret = fn.apply(this, args);\n          var cb = args[args.length - 1];\n          if (typeof ret === 'function' && ret !== cb) {\n            Object.keys(cb).forEach(function (k) {\n              ret[k] = cb[k];\n            });\n          }\n          return ret;\n        }\n      }\n\n    }, {}], 121: [function (require, module, exports) {\n      module.exports = extend;\n\n      var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n      function extend() {\n        var target = {};\n\n        for (var i = 0; i < arguments.length; i++) {\n          var source = arguments[i];\n\n          for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n              target[key] = source[key];\n            }\n          }\n        }\n\n        return target;\n      }\n\n    }, {}] }, {}, [9])(9);\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/webpack/buildin/global.js */ 9), __webpack_require__(/*! @dcloudio/uni-mp-weixin/dist/mp.js */ 10)[\"default\"], __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 10 */
/*!*********************************************************!*\
  !*** ./node_modules/@dcloudio/uni-mp-weixin/dist/mp.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {Object.defineProperty(exports, "__esModule", { value: true });exports.Behavior = Behavior;exports.Component = Component;exports.Page = Page;exports.nextTick = exports.default = void 0;var _vue = _interopRequireDefault(__webpack_require__(/*! vue */ 11));var _PROP_DEFAULT_VALUES;function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"] != null) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}

function parseData(data, vueComponentOptions) {
  if (!data) {
    return;
  }
  vueComponentOptions.mpOptions.data = data;
}

function parseComponents(vueComponentOptions) {
  vueComponentOptions.components = global.__wxVueOptions.components;
}

var _toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

function isFn(fn) {
  return typeof fn === 'function';
}

function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

function noop() {}

/**
                    * Create a cached version of a pure function.
                    */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
   * Camelize a hyphen-delimited string.
   */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {return c ? c.toUpperCase() : '';});
});

var SOURCE_KEY = '__data__';

var COMPONENT_LIFECYCLE = {
  created: 'onServiceCreated',
  attached: 'onServiceAttached',
  ready: 'mounted',
  moved: 'moved',
  detached: 'destroyed' };


var COMPONENT_LIFECYCLE_KEYS = Object.keys(COMPONENT_LIFECYCLE);

var PAGE_LIFETIMES = {
  show: 'onPageShow',
  hide: 'onPageHide',
  resize: 'onPageResize' };


var PAGE_LIFETIMES_KEYS = Object.keys(PAGE_LIFETIMES);

var PAGE_LIFECYCLE = [
'onLoad',
'onShow',
'onReady',
'onHide',
'onUnload',
'onPullDownRefresh',
'onReachBottom',
'onShareAppMessage',
'onPageScroll',
'onResize',
'onTabItemTap'];


function parsePageMethods(mpComponentOptions, vueComponentOptions) {
  var methods = Object.create(null);
  Object.keys(mpComponentOptions).forEach(function (key) {
    var value = mpComponentOptions[key];
    if (isFn(value) && PAGE_LIFECYCLE.indexOf(key) === -1) {
      methods[key] = value;
    }
  });
  vueComponentOptions.methods = methods;
}

function parsePageLifecycle(mpComponentOptions, vueComponentOptions) {
  Object.keys(mpComponentOptions).forEach(function (key) {
    if (PAGE_LIFECYCLE.indexOf(key) !== -1) {
      vueComponentOptions[key] = mpComponentOptions[key];
    }
  });
}

function parsePage(mpComponentOptions) {
  var vueComponentOptions = {
    mixins: [],
    mpOptions: {} };


  parseComponents(vueComponentOptions);

  parseData(mpComponentOptions.data, vueComponentOptions);

  parsePageMethods(mpComponentOptions, vueComponentOptions);
  parsePageLifecycle(mpComponentOptions, vueComponentOptions);

  return vueComponentOptions;
}

function parseProperties(properties, vueComponentOptions) {
  if (!properties) {
    return;
  }
  vueComponentOptions.mpOptions.properties = properties;
}

function parseOptions(options, vueComponentOptions) {
  if (!options) {
    return;
  }
  vueComponentOptions.mpOptions.options = options;
}

function parseMethods(methods, vueComponentOptions) {
  if (!methods) {
    return;
  }
  if (methods.$emit) {
    console.warn('Method "$emit" conflicts with an existing Vue instance method');
    delete methods.$emit;
  }
  vueComponentOptions.methods = methods;
}

function parseLifecycle(mpComponentOptions, vueComponentOptions) {
  COMPONENT_LIFECYCLE_KEYS.forEach(function (name) {
    if (hasOwn(mpComponentOptions, name)) {
      (vueComponentOptions[COMPONENT_LIFECYCLE[name]] || (vueComponentOptions[COMPONENT_LIFECYCLE[name]] = [])).
      push(mpComponentOptions[name]);
    }
  });
}

var mpBehaviors = {
  'wx://form-field': {},
  'wx://component-export': {} };


function callDefinitionFilter(mpComponentOptions) {var

  behaviors =

  mpComponentOptions.behaviors,definitionFilter = mpComponentOptions.definitionFilter;

  var behaviorDefinitionFilters = [];

  if (Array.isArray(behaviors)) {
    behaviors.forEach(function (behavior) {
      behavior = typeof behavior === 'string' ? mpBehaviors[behavior] : behavior;
      if (behavior.definitionFilter) {
        behaviorDefinitionFilters.push(behavior.definitionFilter);
        behavior.definitionFilter.call(null, mpComponentOptions, []);
      }
    });
  }

  if (isFn(definitionFilter)) {
    return function (defFields) {
      definitionFilter(defFields, behaviorDefinitionFilters);
    };
  }
}

function parseDefinitionFilter(mpComponentOptions, vueComponentOptions) {
  callDefinitionFilter(mpComponentOptions);
}

function parseBehavior(behavior) {var

  data =



  behavior.data,methods = behavior.methods,behaviors = behavior.behaviors,properties = behavior.properties;

  var vueComponentOptions = {
    watch: {},
    mpOptions: {
      mpObservers: [] } };



  parseData(data, vueComponentOptions);
  parseMethods(methods, vueComponentOptions);
  parseBehaviors(behaviors, vueComponentOptions);
  parseProperties(properties, vueComponentOptions);

  parseLifecycle(behavior, vueComponentOptions);
  parseDefinitionFilter(behavior);

  return vueComponentOptions;
}

var BEHAVIORS = {
  'wx://form-field': {
    beforeCreate: function beforeCreate() {
      var mpOptions = this.$options.mpOptions;
      if (!mpOptions.properties) {
        mpOptions.properties = Object.create(null);
      }

      var props = mpOptions.properties;
      // TODO form submit,reset
      if (!hasOwn(props, 'name')) {
        props.name = {
          type: String };

      }
      if (!hasOwn(props, 'value')) {
        props.value = {
          type: String // 默认类型调整为 String,否则默认值为 null,导致一些自定义 input 显示不正确
        };
      }
    } } };



function parseBehaviors(behaviors, vueComponentOptions) {
  if (!behaviors) {
    return;
  }
  behaviors.forEach(function (behavior) {
    if (typeof behavior === 'string') {
      BEHAVIORS[behavior] && vueComponentOptions.mixins.push(BEHAVIORS[behavior]);
    } else {
      vueComponentOptions.mixins.push(parseBehavior(behavior));
    }
  });
}

function parseSinglePath(path) {
  return path.split('.');
}

function parseMultiPaths(paths) {
  return paths.split(',').map(function (path) {return parseSinglePath(path);});
}

function parseObservers(observers, vueComponentOptions) {
  if (!observers) {
    return;
  }var


  mpObservers =
  vueComponentOptions.mpOptions.mpObservers;

  Object.keys(observers).forEach(function (path) {
    mpObservers.push({
      paths: parseMultiPaths(path),
      observer: observers[path] });

  });
}

function relative(from, to) {
  if (to.indexOf('/') === 0) {
    from = '';
  }
  var fromArr = from.split('/');
  var toArr = to.split('/');
  fromArr.pop();
  while (toArr.length) {
    var part = toArr.shift();
    if (part !== '' && part !== '.') {
      if (part !== '..') {
        fromArr.push(part);
      } else {
        fromArr.pop();
      }
    }
  }
  return fromArr.join('/');
}

function parseRelations(relations, vueComponentOptions) {
  if (!relations) {
    return;
  }
  Object.keys(relations).forEach(function (name) {
    var relation = relations[name];
    relation.name = name;
    relation.target = relation.target ? String(relation.target) : relative(global.__wxRoute, name);
  });
  vueComponentOptions.mpOptions.relations = relations;
}

function parseExternalClasses(externalClasses, vueComponentOptions) {
  if (!externalClasses) {
    return;
  }
  if (!Array.isArray(externalClasses)) {
    externalClasses = [externalClasses];
  }
  vueComponentOptions.mpOptions.externalClasses = externalClasses;
  if (!vueComponentOptions.mpOptions.properties) {
    vueComponentOptions.mpOptions.properties = Object.create(null);
  }
  externalClasses.forEach(function (externalClass) {
    vueComponentOptions.mpOptions.properties[camelize(externalClass)] = {
      type: String,
      value: '' };

  });
}

function parseLifetimes(lifetimes, vueComponentOptions) {
  if (!lifetimes) {
    return;
  }
  parseLifecycle(lifetimes, vueComponentOptions);
}

function parsePageLifetimes(pageLifetimes, vueComponentOptions) {
  if (!pageLifetimes) {
    return;
  }
  PAGE_LIFETIMES_KEYS.forEach(function (key) {
    var lifetimeFn = pageLifetimes[key];
    isFn(lifetimeFn) && (vueComponentOptions[PAGE_LIFETIMES[key]] = lifetimeFn);
  });
}

function parseComponent(mpComponentOptions) {var

  data =









  mpComponentOptions.data,options = mpComponentOptions.options,methods = mpComponentOptions.methods,behaviors = mpComponentOptions.behaviors,lifetimes = mpComponentOptions.lifetimes,observers = mpComponentOptions.observers,relations = mpComponentOptions.relations,properties = mpComponentOptions.properties,pageLifetimes = mpComponentOptions.pageLifetimes,externalClasses = mpComponentOptions.externalClasses;

  var vueComponentOptions = {
    mixins: [],
    props: {},
    watch: {},
    mpOptions: {
      mpObservers: [] } };



  parseComponents(vueComponentOptions);

  parseData(data, vueComponentOptions);
  parseOptions(options, vueComponentOptions);
  parseMethods(methods, vueComponentOptions);
  parseBehaviors(behaviors, vueComponentOptions);
  parseLifetimes(lifetimes, vueComponentOptions);
  parseObservers(observers, vueComponentOptions);
  parseRelations(relations, vueComponentOptions);
  parseProperties(properties, vueComponentOptions);
  parsePageLifetimes(pageLifetimes, vueComponentOptions);
  parseExternalClasses(externalClasses, vueComponentOptions);

  parseLifecycle(mpComponentOptions, vueComponentOptions);
  parseDefinitionFilter(mpComponentOptions);

  return vueComponentOptions;
}

function initRelationHandlers(type, handler, target, ctx) {
  if (!handler) {
    return;
  }
  var name = "_$".concat(type, "Handlers");
  (ctx[name] || (ctx[name] = [])).push(function () {
    handler.call(ctx, target);
  });
}

function initLinkedHandlers(relation, target, ctx) {
  var type = 'linked';
  var name = relation.name;
  var relationNodes = ctx._$relationNodes || (ctx._$relationNodes = Object.create(null));
  (relationNodes[name] || (relationNodes[name] = [])).push(target);
  initRelationHandlers(type, relation[type], target, ctx);
}

function initUnlinkedHandlers(relation, target, ctx) {
  var type = 'unlinked';
  initRelationHandlers(type, relation[type], target, ctx);
}

function findParentRelation(parentVm, target, type) {
  var relations = parentVm &&
  parentVm.$options.mpOptions &&
  parentVm.$options.mpOptions.relations;

  if (!relations) {
    return [];
  }
  var name = Object.keys(relations).find(function (name) {
    var relation = relations[name];
    return relation.target === target && relation.type === type;
  });
  if (!name) {
    return [];
  }
  return [relations[name], parentVm];
}

function initParentRelation(vm, childRelation, match) {var _match =
  match(vm, vm.$options.mpOptions.path),_match2 = _slicedToArray(_match, 2),parentRelation = _match2[0],parentVm = _match2[1];
  if (!parentRelation) {
    return;
  }

  initLinkedHandlers(parentRelation, vm, parentVm);
  initLinkedHandlers(childRelation, parentVm, vm);

  initUnlinkedHandlers(parentRelation, vm, parentVm);
  initUnlinkedHandlers(childRelation, parentVm, vm);
}

function initRelation(relation, vm) {
  var type = relation.type;
  if (type === 'parent') {
    initParentRelation(vm, relation, function matchParent(vm, target) {
      return findParentRelation(vm.$parent, target, 'child');
    });
  } else if (type === 'ancestor') {
    initParentRelation(vm, relation, function matchAncestor(vm, target) {
      var $parent = vm.$parent;
      while ($parent) {
        var ret = findParentRelation($parent, target, 'descendant');
        if (ret.length) {
          return ret;
        }
        $parent = $parent.$parent;
      }
      return [];
    });
  }
}

function initRelations(vm) {var _ref =


  vm.$options.mpOptions || {},relations = _ref.relations;
  if (!relations) {
    return;
  }
  Object.keys(relations).forEach(function (name) {
    initRelation(relations[name], vm);
  });
}

function handleRelations(vm, type) {
  // TODO 需要移除 relationNodes
  var handlers = vm["_$".concat(type, "Handlers")];
  if (!handlers) {
    return;
  }
  handlers.forEach(function (handler) {return handler();});
}

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop };


function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function setDataByExprPath(exprPath, value, data) {
  var keys = exprPath.replace(/\[(\d+?)\]/g, '.$1').split('.');
  keys.reduce(function (obj, key, idx) {
    if (idx === keys.length - 1) {
      obj[key] = value;
    } else {
      if (typeof obj[key] === 'undefined') {
        obj[key] = {};
      }
      return obj[key];
    }
  }, data);
  return keys.length === 1;
}

function setData(data, callback) {var _this = this;
  if (!isPlainObject(data)) {
    return;
  }
  Object.keys(data).forEach(function (key) {
    if (setDataByExprPath(key, data[key], _this.data)) {
      !hasOwn(_this, key) && proxy(_this, SOURCE_KEY, key);
    }
  });
  this.$forceUpdate();
  isFn(callback) && this.$nextTick(callback);
}

/**
   * https://github.com/swan-team/swan-js/blob/61e2a63f7aa576b5daafbe77fdfa7c65b977060c/src/utils/index.js
   */

var _toString$1 = Object.prototype.toString;
/**
                                              * 深度assign的函数
                                              * @param {Object} targetObject 要被拷贝的目标对象
                                              * @param {Object} originObject 拷贝的源对象
                                              * @return {Object} merge后的对象
                                              */
var deepAssign = function deepAssign() {var targetObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};var originObject = arguments.length > 1 ? arguments[1] : undefined;
  var originType = _toString$1.call(originObject);
  if (originType === '[object Array]') {
    targetObject = originObject.slice(0);
    return targetObject;
  } else if (originType === '[object Object]') {
    for (var key in originObject) {
      targetObject[key] = deepAssign(targetObject[key], originObject[key]);
    }
    return targetObject;
  } else if (originType === '[object Date]') {
    return new Date(originObject.getTime());
  } else if (originType === '[object RegExp]') {
    var target = String(originObject);
    var lastIndex = target.lastIndexOf('/');
    return new RegExp(target.slice(1, lastIndex), target.slice(lastIndex + 1));
  }
  return originObject;
};

/**
    * 深度拷贝逻辑，不同于lodash等库，但是与微信一致
    * @param {*} [originObj] 原对象
    * @return {Object|Array} 拷贝结果
    */
var deepClone = function deepClone(originObj) {
  return deepAssign(_toString$1.call(originObj) === '[object Array]' ? [] : {}, originObj);
};

var PROP_DEFAULT_VALUES = (_PROP_DEFAULT_VALUES = {}, _defineProperty(_PROP_DEFAULT_VALUES,
String, ''), _defineProperty(_PROP_DEFAULT_VALUES,
Number, 0), _defineProperty(_PROP_DEFAULT_VALUES,
Boolean, false), _defineProperty(_PROP_DEFAULT_VALUES,
Object, null), _defineProperty(_PROP_DEFAULT_VALUES,
Array, []), _defineProperty(_PROP_DEFAULT_VALUES,
null, null), _PROP_DEFAULT_VALUES);


function getDefaultVal(propType) {
  return PROP_DEFAULT_VALUES[propType];
}

function getPropertyVal(options) {
  if (isPlainObject(options)) {
    if (hasOwn(options, 'value')) {
      return options.value;
    }
    return getDefaultVal(options.type);
  }
  return getDefaultVal(options);
}

function getType(propOptions) {
  return isPlainObject(propOptions) ? propOptions.type : propOptions;
}

function validateProp(key, propsOptions, propsData, vm) {
  var value = propsData[key];
  if (value !== undefined) {
    var propOptions = propsOptions[key];
    var type = getType(propOptions);
    value = formatVal(value, type);
    var observer = propOptions && propOptions.observer;
    if (observer) {
      // 初始化时,异步触发 observer,否则 observer 中无法访问 methods 或其他
      setTimeout(function () {
        observe(observer, vm, value);
      }, 4);
    }
    return value;
  }
  return getPropertyVal(propsOptions[key]);
}

function formatVal(val, type) {
  if (type === Boolean) {
    return !!val;
  } else if (type === String) {
    return String(val);
  }
  return val;
}

function observe(observer, vm, newVal, oldVal) {
  try {
    if (typeof observer === 'function') {
      observer.call(vm, newVal, oldVal);
    } else if (typeof observer === 'string' &&
    typeof vm[observer] === 'function')
    {
      vm[observer](newVal, oldVal);
    }
  } catch (err) {
    console.error("execute observer ".concat(observer, " callback fail! err: ").concat(err));
  }
}

function initProperties(vm, instanceData) {
  var properties = vm.$options.mpOptions.properties;
  if (!properties) {
    return;
  }

  var propsData = deepClone(vm.$options.propsData) || {};var _loop = function _loop(

  key) {
    var observer = isPlainObject(properties[key]) ? properties[key].observer : false;
    var value = validateProp(key, properties, propsData, vm);
    Object.defineProperty(instanceData, key, {
      enumerable: true,
      configurable: true,
      get: function get() {
        return value;
      },
      set: function set(newVal) {
        var oldVal = value;
        /* eslint-disable no-self-compare */
        if (newVal === value || newVal !== newVal && value !== value) {
          return;
        }
        // TODO 临时方案,clone array
        value = Array.isArray(newVal) ? newVal.slice(0) : newVal;
        if (observer) {
          observe(observer, vm, newVal, oldVal);
        }
        // 触发渲染
        vm.$forceUpdate();
      } });};for (var key in properties) {_loop(key);

  }
}

function updateProperties(vm) {
  var properties = vm.$options.mpOptions && vm.$options.mpOptions.properties;
  var propsData = vm.$options.propsData;
  if (propsData && properties) {
    Object.keys(properties).forEach(function (key) {
      if (hasOwn(propsData, key)) {
        vm[key] = formatVal(propsData[key], getType(properties[key]));
      }
    });
  }
}

function initState(vm) {
  var instanceData = JSON.parse(JSON.stringify(vm.$options.mpOptions.data || {}));

  vm[SOURCE_KEY] = instanceData;

  var propertyDefinition = {
    get: function get() {
      return vm[SOURCE_KEY];
    },
    set: function set(value) {
      vm[SOURCE_KEY] = value;
    } };


  Object.defineProperties(vm, {
    data: propertyDefinition,
    properties: propertyDefinition });


  vm.setData = setData;

  initProperties(vm, instanceData);

  Object.keys(instanceData).forEach(function (key) {
    proxy(vm, SOURCE_KEY, key);
  });
}

function initMethods(vm) {
  var oldEmit = vm.$emit;
  vm.triggerEvent = function (eventName, detail, options) {
    var target = {
      dataset: vm.$el.dataset };


    var event = {
      target: target,
      currentTarget: target,
      detail: detail,
      preventDefault: noop,
      stopPropagation: noop };


    oldEmit.call(vm, eventName, event);
  };
  // 主要是Vant 自己封装了 $emit,放到 methods 中会触发 Vue 的警告,索性,框架直接重写该方法
  vm.$emit = function () {
    vm.triggerEvent.apply(vm, arguments);
  };
  vm.getRelationNodes = function (relationKey) {
    // 需要过滤已被销毁的vm
    /* eslint-disable  no-mixed-operators */
    return (vm._$relationNodes && vm._$relationNodes[relationKey] || []).filter(function (vm) {return !vm._isDestroyed;});
  };

  vm._$updateProperties = updateProperties;
}

function handleObservers(vm) {
  var watch = vm.$options.watch;
  if (!watch) {
    return;
  }
  Object.keys(watch).forEach(function (name) {
    var observer = watch[name];
    if (observer.mounted) {
      var val = vm[name];
      var handler = observer.handler;
      if (typeof handler === 'string') {
        handler = vm[handler];
      }
      handler && handler.call(vm, val, val);
    }
  });
}

var polyfill = {
  beforeCreate: function beforeCreate() {
    // 取消 development 时的 Proxy,避免小程序组件模板中使用尚未定义的属性告警
    this._renderProxy = this;

    this._$self = this;
    this._$noop = noop;
  },
  created: function created() {// properties 中可能会访问 methods,故需要在 created 中初始化
    initState(this);
    initMethods(this);
    initRelations(this);
  },
  mounted: function mounted() {
    handleObservers(this);
  },
  destroyed: function destroyed() {
    handleRelations(this, 'unlinked');
  } };


global.__wxRoute = '';
global.__wxComponents = Object.create(null);
global.__wxVueOptions = Object.create(null);

function Page(options) {
  var pageOptions = parsePage(options);
  pageOptions.mixins.unshift(polyfill);
  pageOptions.mpOptions.path = global.__wxRoute;
  global.__wxComponents[global.__wxRoute] = pageOptions;
}

function initRelationsHandler(vueComponentOptions) {
  // linked 需要在当前组件 attached 之后再执行
  if (!vueComponentOptions.onServiceAttached) {
    vueComponentOptions.onServiceAttached = [];
  }
  vueComponentOptions.onServiceAttached.push(function onServiceAttached() {
    handleRelations(this, 'linked');
  });
}

function Component(options) {
  var componentOptions = parseComponent(options);
  componentOptions.mixins.unshift(polyfill);
  componentOptions.mpOptions.path = global.__wxRoute;
  initRelationsHandler(componentOptions);
  global.__wxComponents[global.__wxRoute] = componentOptions;
}

function Behavior(options) {
  return options;
}

var nextTick = _vue.default.nextTick;exports.nextTick = nextTick;

var index = uni.__$wx__;var _default =

index;exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ 9)))

/***/ }),
/* 11 */
/*!**********************!*\
  !*** external "Vue" ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Vue;

/***/ }),
/* 12 */
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js ***!
  \**********************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return normalizeComponent; });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode, /* vue-cli only */
  components, // fixed by xxxxxx auto components
  renderjs // fixed by xxxxxx renderjs
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // fixed by xxxxxx auto components
  if (components) {
    if (!options.components) {
      options.components = {}
    }
    var hasOwn = Object.prototype.hasOwnProperty
    for (var name in components) {
      if (hasOwn.call(components, name) && !hasOwn.call(options.components, name)) {
        options.components[name] = components[name]
      }
    }
  }
  // fixed by xxxxxx renderjs
  if (renderjs) {
    (renderjs.beforeCreate || (renderjs.beforeCreate = [])).unshift(function() {
      this[renderjs.__module] = this
    });
    (options.mixins || (options.mixins = [])).push(renderjs)
  }

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functioal component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 13 */
/*!*******************************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/my/my.vue?mpType=page ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./my.vue?vue&type=template&id=1cc45dd4&mpType=page */ 14);\n/* harmony import */ var _my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./my.vue?vue&type=script&lang=js&mpType=page */ 16);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 12);\n\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(\n  _my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  null,\n  null,\n  false,\n  _my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__[\"components\"],\n  renderjs\n)\n\ncomponent.options.__file = \"pages/my/my.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBMEg7QUFDMUg7QUFDaUU7QUFDTDs7O0FBRzVEO0FBQzZMO0FBQzdMLGdCQUFnQiwyTEFBVTtBQUMxQixFQUFFLG1GQUFNO0FBQ1IsRUFBRSx3RkFBTTtBQUNSLEVBQUUsaUdBQWU7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsNEZBQVU7QUFDWjtBQUNBOztBQUVBO0FBQ2UsZ0YiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucywgcmVjeWNsYWJsZVJlbmRlciwgY29tcG9uZW50cyB9IGZyb20gXCIuL215LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xY2M0NWRkNCZtcFR5cGU9cGFnZVwiXG52YXIgcmVuZGVyanNcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vbXkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCJcbmV4cG9ydCAqIGZyb20gXCIuL215LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZtcFR5cGU9cGFnZVwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9Qcm9ncmFtIEZpbGVzL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgZmFsc2UsXG4gIGNvbXBvbmVudHMsXG4gIHJlbmRlcmpzXG4pXG5cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwicGFnZXMvbXkvbXkudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/*!*************************************************************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/my/my.vue?vue&type=template&id=1cc45dd4&mpType=page ***!
  \*************************************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./my.vue?vue&type=template&id=1cc45dd4&mpType=page */ 15);
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "render", function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__["render"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__["staticRenderFns"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__["recyclableRender"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "components", function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_10_0_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_filter_modules_template_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_page_meta_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_template_id_1cc45dd4_mpType_page__WEBPACK_IMPORTED_MODULE_0__["components"]; });



/***/ }),
/* 15 */

  !*** ./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--10-0!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/filter-modules-template.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/page-meta.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/my/my.vue?vue&type=template&id=1cc45dd4&mpType=page ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns, recyclableRender, components */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "render", function() { return render; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "staticRenderFns", function() { return staticRenderFns; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "recyclableRender", function() { return recyclableRender; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "components", function() { return components; });
var components
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "view",
    { staticClass: _vm._$s(0, "sc", "content"), attrs: { _i: 0 } },
    [
      _c("image", { staticClass: _vm._$s(1, "sc", "logo"), attrs: { _i: 1 } }),
      _c(
        "view",
        { staticClass: _vm._$s(2, "sc", "text-area"), attrs: { _i: 2 } },
        [
          _c(
            "text",
            { staticClass: _vm._$s(3, "sc", "title"), attrs: { _i: 3 } },
            [_vm._v(_vm._$s(3, "t0-0", _vm._s(_vm.title)))]
          )
        ]
      )
    ]
  )
}
var recyclableRender = false
var staticRenderFns = []
render._withStripped = true



/***/ }),
/* 16 */
/*!*******************************************************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/my/my.vue?vue&type=script&lang=js&mpType=page ***!
  \*******************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!../../../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./my.vue?vue&type=script&lang=js&mpType=page */ 17);\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_my_vue_vue_type_script_lang_js_mpType_page__WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQWlwQixDQUFnQiwybkJBQUcsRUFBQyIsImZpbGUiOiIxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy93ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtMSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9Qcm9ncmFtIEZpbGVzL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvd2VicGFjay11bmktYXBwLWxvYWRlci91c2luZy1jb21wb25lbnRzLmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbXkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy93ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtMSEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9Qcm9ncmFtIEZpbGVzL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvd2VicGFjay11bmktYXBwLWxvYWRlci91c2luZy1jb21wb25lbnRzLmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbXkudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJm1wVHlwZT1wYWdlXCIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/*!************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Administrator/Projects/season1/4.App/smarthome/pages/my/my.vue?vue&type=script&lang=js&mpType=page ***!
  \************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0; //\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default =\n{\n  data: function data() {\n    return {\n      title: '你好, uni-app' };\n\n  },\n  onLoad: function onLoad() {\n\n  },\n  methods: {} };exports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vcGFnZXMvbXkvbXkudnVlIl0sIm5hbWVzIjpbImRhdGEiLCJ0aXRsZSIsIm9uTG9hZCIsIm1ldGhvZHMiXSwibWFwcGluZ3MiOiJ3RkFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWU7QUFDZEEsTUFEYyxrQkFDUDtBQUNOLFdBQU87QUFDTkMsV0FBSyxFQUFFLGFBREQsRUFBUDs7QUFHQSxHQUxhO0FBTWRDLFFBTmMsb0JBTUw7O0FBRVIsR0FSYTtBQVNkQyxTQUFPLEVBQUUsRUFUSyxFIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuLy9cbi8vXG4vL1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdGRhdGEoKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRpdGxlOiAn5L2g5aW9LCB1bmktYXBwJ1xuXHRcdH1cblx0fSxcblx0b25Mb2FkKCkge1xuXG5cdH0sXG5cdG1ldGhvZHM6IHtcblxuXHR9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/*!***********************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/App.vue ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ 19);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib/runtime/componentNormalizer.js */ 12);\nvar render, staticRenderFns, recyclableRender, components\nvar renderjs\n\n\n\n\n/* normalize component */\n\nvar component = Object(_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\n  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null,\n  false,\n  components,\n  renderjs\n)\n\ncomponent.options.__file = \"App.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUN1RDtBQUNMOzs7QUFHbEQ7QUFDdUw7QUFDdkwsZ0JBQWdCLDJMQUFVO0FBQzFCLEVBQUUseUVBQU07QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNlLGdGIiwiZmlsZSI6IjE4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlbmRlciwgc3RhdGljUmVuZGVyRm5zLCByZWN5Y2xhYmxlUmVuZGVyLCBjb21wb25lbnRzXG52YXIgcmVuZGVyanNcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIG51bGwsXG4gIG51bGwsXG4gIGZhbHNlLFxuICBjb21wb25lbnRzLFxuICByZW5kZXJqc1xuKVxuXG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcIkFwcC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/*!************************************************************************************************!*\
  !*** C:/Users/Administrator/Projects/season1/4.App/smarthome/App.vue?vue&type=script&lang=js& ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/babel-loader/lib!../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!../../../../../../Program Files/HBuilderX/plugins/uniapp-cli/node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!./App.vue?vue&type=script&lang=js& */ 20);\n/* harmony import */ var _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_babel_loader_lib_index_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_preprocess_loader_index_js_ref_6_1_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_webpack_uni_app_loader_using_components_js_Program_Files_HBuilderX_plugins_uniapp_cli_node_modules_dcloudio_vue_cli_plugin_uni_packages_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbbnVsbF0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQSttQixDQUFnQixpbkJBQUcsRUFBQyIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy93ZWJwYWNrLXByZXByb2Nlc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTYtMSEuLi8uLi8uLi8uLi8uLi8uLi9Qcm9ncmFtIEZpbGVzL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL0BkY2xvdWRpby92dWUtY2xpLXBsdWdpbi11bmkvcGFja2FnZXMvd2VicGFjay11bmktYXBwLWxvYWRlci91c2luZy1jb21wb25lbnRzLmpzIS4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9Qcm9ncmFtIEZpbGVzL0hCdWlsZGVyWC9wbHVnaW5zL3VuaWFwcC1jbGkvbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3dlYnBhY2stcHJlcHJvY2Vzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tNi0xIS4uLy4uLy4uLy4uLy4uLy4uL1Byb2dyYW0gRmlsZXMvSEJ1aWxkZXJYL3BsdWdpbnMvdW5pYXBwLWNsaS9ub2RlX21vZHVsZXMvQGRjbG91ZGlvL3Z1ZS1jbGktcGx1Z2luLXVuaS9wYWNrYWdlcy93ZWJwYWNrLXVuaS1hcHAtbG9hZGVyL3VzaW5nLWNvbXBvbmVudHMuanMhLi4vLi4vLi4vLi4vLi4vLi4vUHJvZ3JhbSBGaWxlcy9IQnVpbGRlclgvcGx1Z2lucy91bmlhcHAtY2xpL25vZGVfbW9kdWxlcy9AZGNsb3VkaW8vdnVlLWNsaS1wbHVnaW4tdW5pL3BhY2thZ2VzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/*!*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-preprocess-loader??ref--6-1!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/webpack-uni-app-loader/using-components.js!./node_modules/@dcloudio/vue-cli-plugin-uni/packages/vue-loader/lib??vue-loader-options!C:/Users/Administrator/Projects/season1/4.App/smarthome/App.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(__f__) {Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = void 0;var _default =\n{\n  onLaunch: function onLaunch() {\n    __f__(\"log\", 'App Launch', \" at App.vue:4\");\n  },\n  onShow: function onShow() {\n    __f__(\"log\", 'App Show', \" at App.vue:7\");\n  },\n  onHide: function onHide() {\n    __f__(\"log\", 'App Hide', \" at App.vue:10\");\n  } };exports.default = _default;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./node_modules/@dcloudio/vue-cli-plugin-uni/lib/format-log.js */ 7)[\"default\"]))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVuaS1hcHA6Ly8vQXBwLnZ1ZSJdLCJuYW1lcyI6WyJvbkxhdW5jaCIsIm9uU2hvdyIsIm9uSGlkZSJdLCJtYXBwaW5ncyI6IjtBQUNlO0FBQ2RBLFVBQVEsRUFBRSxvQkFBVztBQUNwQixpQkFBWSxZQUFaO0FBQ0EsR0FIYTtBQUlkQyxRQUFNLEVBQUUsa0JBQVc7QUFDbEIsaUJBQVksVUFBWjtBQUNBLEdBTmE7QUFPZEMsUUFBTSxFQUFFLGtCQUFXO0FBQ2xCLGlCQUFZLFVBQVo7QUFDQSxHQVRhLEUiLCJmaWxlIjoiMjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBkZWZhdWx0IHtcblx0b25MYXVuY2g6IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdBcHAgTGF1bmNoJylcblx0fSxcblx0b25TaG93OiBmdW5jdGlvbigpIHtcblx0XHRjb25zb2xlLmxvZygnQXBwIFNob3cnKVxuXHR9LFxuXHRvbkhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdGNvbnNvbGUubG9nKCdBcHAgSGlkZScpXG5cdH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///20\n");

/***/ })
],[[0,"app-config"]]]);